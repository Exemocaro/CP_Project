 Percent |	Source code & Disassembly of MD.exe for cycles (13342 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000027e0 <VelocityVerlet(double, int, _IO_FILE*)>:
         : 6    VelocityVerlet(double, int, _IO_FILE*):
         : 580  }
         : 581  }
         : 582  }
         :
         : 584  // returns sum of dv/dt*m/A (aka Pressure) from elastic collisions with walls
         : 585  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27e0:   endbr64
         : 586  int i;
         :
         : 588  double psum = 0.;
         :
         : 590  double dt2 = dt*dt;
         : 591  double dt5 = dt * 0.5;
    0.00 :   27e4:   movapd %xmm0,%xmm9
         : 580  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27e9:   push   %rbx
         : 585  double dt2 = dt*dt;
    0.00 :   27ea:   movapd %xmm0,%xmm15
         : 580  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27ef:   movapd %xmm0,%xmm7
         : 586  double dt5 = dt * 0.5;
    0.00 :   27f3:   movsd  0x2435(%rip),%xmm2        # 4c30 <_IO_stdin_used+0xc30>
         : 597  //  Compute accelerations from forces at current position
         : 598  // this call was removed (commented) for predagogical reasons
         : 599  //computeAccelerations();
         : 600  //  Update positions and velocity with current velocity and acceleration
         : 601  //printf("  Updated Positions!\n");
         : 602  for (i=0; i<N; i++) {
    0.00 :   27fb:   mov    0x79c46(%rip),%r10d        # 7c448 <N>
         : 585  double dt2 = dt*dt;
    0.00 :   2802:   mulsd  %xmm0,%xmm15
         : 679  // Elastic walls
         : 680  if (r[i][0]<0.) {
         : 681  v[i][0] *=-1.; //- elastic walls
         : 682  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "left" walls
         : 683  }
         : 684  else if (r[i][0]>=L) {
    0.00 :   2807:   movsd  0x79c30(%rip),%xmm8        # 7c440 <L>
         : 586  double dt5 = dt * 0.5;
    0.00 :   2810:   mulsd  %xmm2,%xmm9
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2815:   lea    -0x1(%r10),%r11d
    0.00 :   2819:   movapd %xmm9,%xmm4
    0.00 :   281e:   unpcklpd %xmm4,%xmm4
    0.00 :   2822:   movaps %xmm4,-0x10(%rsp)
         : 597  for (i=0; i<N; i++) {
    0.00 :   2827:   test   %r10d,%r10d
    0.00 :   282a:   jle    2d3e <VelocityVerlet(double, int, _IO_FILE*)+0x55e>
    0.00 :   2830:   movapd %xmm0,%xmm3
    0.00 :   2834:   movapd %xmm15,%xmm0
    0.00 :   2839:   unpcklpd %xmm3,%xmm3
    0.00 :   283d:   unpcklpd %xmm0,%xmm0
    0.00 :   2841:   cmp    $0x1,%r10d
    0.00 :   2845:   je     2d67 <VelocityVerlet(double, int, _IO_FILE*)+0x587>
    0.00 :   284b:   mov    %r10d,%r9d
    0.00 :   284e:   lea    0x21d4b(%rip),%rsi        # 245a0 <a>
    0.00 :   2855:   lea    0x3f224(%rip),%rdi        # 41a80 <v>
    0.00 :   285c:   movapd 0x23cc(%rip),%xmm6        # 4c30 <_IO_stdin_used+0xc30>
    0.00 :   2864:   shr    %r9d
    0.00 :   2867:   lea    0x5c6f2(%rip),%r8        # 5ef60 <r>
    0.00 :   286e:   mov    %rsi,%rax
    0.00 :   2871:   mov    %rdi,%rcx
    0.00 :   2874:   sub    $0x1,%r9d
    0.00 :   2878:   lea    0x30(%rsi),%rbx
         : 616  a[i][0] = 0;
    0.00 :   287c:   pxor   %xmm10,%xmm10
    0.00 :   2881:   mov    %r8,%rdx
    0.00 :   2884:   lea    (%r9,%r9,2),%r9
    0.00 :   2888:   shl    $0x4,%r9
    0.00 :   288c:   add    %rbx,%r9
    0.00 :   288f:   nop
         : 603  ai05 =  0.5*a[i][0];
    0.01 :   2890:   movapd 0x10(%rax),%xmm4
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   2895:   movapd 0x10(%rcx),%xmm11
    0.00 :   289b:   movapd %xmm0,%xmm12
    0.01 :   28a0:   add    $0x30,%rax
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28a4:   movapd -0x10(%rax),%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28a9:   movapd 0x20(%rcx),%xmm13
    0.00 :   28af:   add    $0x30,%rdx
    0.00 :   28b3:   add    $0x30,%rcx
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28b7:   mulpd  %xmm6,%xmm4
    0.00 :   28bb:   movapd -0x30(%rax),%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28c0:   movapd -0x30(%rcx),%xmm14
    0.00 :   28c6:   mulpd  %xmm3,%xmm11
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28cb:   mulpd  %xmm6,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28cf:   mulpd  %xmm3,%xmm13
         : 603  ai05 =  0.5*a[i][0];
    0.01 :   28d4:   mulpd  %xmm6,%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28d8:   mulpd  %xmm4,%xmm12
    0.01 :   28dd:   mulpd  %xmm3,%xmm14
         : 608  v[i][0] += ai05*dt;
    0.00 :   28e2:   mulpd  %xmm3,%xmm4
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28e6:   addpd  %xmm11,%xmm12
    0.00 :   28eb:   movapd %xmm0,%xmm11
    0.00 :   28f0:   addpd  -0x20(%rdx),%xmm12
    0.00 :   28f6:   mulpd  %xmm1,%xmm11
         : 608  v[i][0] += ai05*dt;
    0.01 :   28fb:   mulpd  %xmm3,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28ff:   movaps %xmm12,-0x20(%rdx)
    0.00 :   2904:   addpd  %xmm13,%xmm11
    0.00 :   2909:   movapd %xmm0,%xmm13
    0.01 :   290e:   addpd  -0x10(%rdx),%xmm11
    0.00 :   2914:   mulpd  %xmm5,%xmm13
         : 608  v[i][0] += ai05*dt;
    0.00 :   2919:   mulpd  %xmm3,%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   291d:   movaps %xmm11,-0x10(%rdx)
    0.00 :   2922:   addpd  %xmm14,%xmm13
    0.00 :   2927:   addpd  -0x30(%rdx),%xmm13
    0.00 :   292d:   movaps %xmm13,-0x30(%rdx)
         : 608  v[i][0] += ai05*dt;
    0.00 :   2932:   addpd  -0x30(%rcx),%xmm5
    0.00 :   2937:   addpd  -0x20(%rcx),%xmm4
    0.00 :   293c:   addpd  -0x10(%rcx),%xmm1
    0.00 :   2941:   movaps %xmm5,-0x30(%rcx)
    0.00 :   2945:   movaps %xmm4,-0x20(%rcx)
    0.00 :   2949:   movaps %xmm1,-0x10(%rcx)
         : 616  a[i][0] = 0;
    0.00 :   294d:   movaps %xmm10,-0x30(%rax)
    0.00 :   2952:   movaps %xmm10,-0x20(%rax)
    0.00 :   2957:   movaps %xmm10,-0x10(%rax)
         : 597  for (i=0; i<N; i++) {
    0.00 :   295c:   cmp    %r9,%rax
    0.00 :   295f:   jne    2890 <VelocityVerlet(double, int, _IO_FILE*)+0xb0>
    0.00 :   2965:   mov    %r10d,%eax
    0.00 :   2968:   and    $0xfffffffe,%eax
    0.00 :   296b:   test   $0x1,%r10b
    0.00 :   296f:   je     29fe <VelocityVerlet(double, int, _IO_FILE*)+0x21e>
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   2975:   cltq
    0.00 :   2977:   lea    (%rax,%rax,2),%rdx
    0.00 :   297b:   shl    $0x3,%rdx
    0.00 :   297f:   lea    (%rdx,%rsi,1),%rax
    0.00 :   2983:   lea    (%r8,%rdx,1),%rcx
    0.00 :   2987:   add    %rdi,%rdx
    0.00 :   298a:   movupd (%rax),%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   298e:   movupd (%rdx),%xmm4
         : 605  ai25 =  0.5*a[i][2];
    0.00 :   2992:   mulsd  0x10(%rax),%xmm2
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   2997:   mulpd  %xmm6,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   299b:   mulpd  %xmm3,%xmm4
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   299f:   mulsd  %xmm2,%xmm15
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   29a4:   mulpd  %xmm1,%xmm0
         : 608  v[i][0] += ai05*dt;
    0.00 :   29a8:   mulpd  %xmm3,%xmm1
         : 614  v[i][2] += ai25*dt;
    0.00 :   29ac:   mulsd  %xmm7,%xmm2
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   29b0:   addpd  %xmm4,%xmm0
    0.00 :   29b4:   movupd (%rcx),%xmm4
    0.00 :   29b8:   addpd  %xmm4,%xmm0
    0.00 :   29bc:   movups %xmm0,(%rcx)
         : 608  v[i][0] += ai05*dt;
    0.00 :   29bf:   movupd (%rdx),%xmm4
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29c3:   movapd %xmm7,%xmm0
         : 608  v[i][0] += ai05*dt;
    0.00 :   29c7:   addpd  %xmm4,%xmm1
    0.00 :   29cb:   movups %xmm1,(%rdx)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29ce:   movsd  0x10(%rdx),%xmm1
         : 618  a[i][2] = 0;
    0.00 :   29d3:   movq   $0x0,0x10(%rax)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29db:   mulsd  %xmm1,%xmm0
         : 614  v[i][2] += ai25*dt;
    0.00 :   29df:   addsd  %xmm1,%xmm2
    0.00 :   29e3:   movsd  %xmm2,0x10(%rdx)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29e8:   addsd  %xmm15,%xmm0
    0.00 :   29ed:   addsd  0x10(%rcx),%xmm0
    0.00 :   29f2:   movsd  %xmm0,0x10(%rcx)
         : 616  a[i][0] = 0;
    0.00 :   29f7:   pxor   %xmm0,%xmm0
    0.00 :   29fb:   movups %xmm0,(%rax)
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   29fe:   pxor   %xmm4,%xmm4
    0.00 :   2a02:   test   %r11d,%r11d
    0.00 :   2a05:   jle    2b82 <VelocityVerlet(double, int, _IO_FILE*)+0x3a2>
    0.00 :   2a0b:   lea    0x21b8e(%rip),%rdx        # 245a0 <a>
         : 597  for (i=0; i<N; i++) {
    0.00 :   2a12:   xor    %r9d,%r9d
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2a15:   xor    %r8d,%r8d
    0.00 :   2a18:   movsd  0x2258(%rip),%xmm6        # 4c78 <_IO_stdin_used+0xc78>
    0.00 :   2a20:   movsd  0x2258(%rip),%xmm5        # 4c80 <_IO_stdin_used+0xc80>
    0.00 :   2a28:   lea    0x5c531(%rip),%rdi        # 5ef60 <r>
    0.00 :   2a2f:   pxor   %xmm4,%xmm4
    0.00 :   2a33:   lea    0x18(%rdx),%rbx
    0.00 :   2a37:   nopw   0x0(%rax,%rax,1)
         : 633  for (j = i+1; j < N; j++) {
    0.00 :   2a40:   add    $0x1,%r8d
    0.01 :   2a44:   cmp    %r8d,%r10d
    0.00 :   2a47:   jle    2b64 <VelocityVerlet(double, int, _IO_FILE*)+0x384>
    0.00 :   2a4d:   mov    %r11d,%eax
         : 639  rij[0] = r[i][0] - r[j][0];
    0.00 :   2a50:   movsd  (%rdi),%xmm13
         : 642  rij[1] = r[i][1] - r[j][1];
    0.00 :   2a55:   movsd  0x8(%rdi),%xmm12
         : 645  rij[2] = r[i][2] - r[j][2];
    0.00 :   2a5b:   mov    %rdi,%rcx
    0.01 :   2a5e:   sub    %r8d,%eax
    0.00 :   2a61:   movsd  0x10(%rdi),%xmm11
    0.01 :   2a67:   add    %r9,%rax
    0.00 :   2a6a:   lea    (%rax,%rax,2),%rax
    0.00 :   2a6e:   lea    (%rbx,%rax,8),%rsi
    0.00 :   2a72:   mov    %rdx,%rax
    0.00 :   2a75:   nopl   (%rax)
         : 639  rij[0] = r[i][0] - r[j][0];
    0.91 :   2a78:   movapd %xmm13,%xmm3
    0.23 :   2a7d:   subsd  0x18(%rcx),%xmm3
         : 633  for (j = i+1; j < N; j++) {
    2.12 :   2a82:   add    $0x18,%rax
    0.41 :   2a86:   add    $0x18,%rcx
         : 642  rij[1] = r[i][1] - r[j][1];
    0.94 :   2a8a:   movapd %xmm12,%xmm2
    0.31 :   2a8f:   subsd  0x8(%rcx),%xmm2
         : 640  rSqd += rij[0] * rij[0];
    2.04 :   2a94:   movapd %xmm3,%xmm1
    0.41 :   2a98:   mulsd  %xmm3,%xmm1
         : 643  rSqd += rij[1] * rij[1];
    0.91 :   2a9c:   movapd %xmm2,%xmm0
    0.29 :   2aa0:   mulsd  %xmm2,%xmm0
         : 640  rSqd += rij[0] * rij[0];
    2.08 :   2aa4:   addsd  %xmm4,%xmm1
         : 643  rSqd += rij[1] * rij[1];
    0.34 :   2aa8:   addsd  %xmm1,%xmm0
         : 645  rij[2] = r[i][2] - r[j][2];
    1.15 :   2aac:   movapd %xmm11,%xmm1
    0.31 :   2ab1:   subsd  0x10(%rcx),%xmm1
         : 646  rSqd += rij[2] * rij[2];
    2.20 :   2ab6:   movapd %xmm1,%xmm10
    0.40 :   2abb:   mulsd  %xmm1,%xmm10
    0.96 :   2ac0:   addsd  %xmm0,%xmm10
         : 653  inv_rSqd = 1.0 / rSqd;
    0.24 :   2ac5:   movapd %xmm6,%xmm0
    2.24 :   2ac9:   divsd  %xmm10,%xmm0
         : 654  inv_rSqd_2 = inv_rSqd * inv_rSqd;
    0.41 :   2ace:   movapd %xmm0,%xmm14
    0.95 :   2ad3:   mulsd  %xmm0,%xmm14
         : 656  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    0.52 :   2ad8:   mulsd  %xmm14,%xmm0
         : 655  inv_rSqd_4 = inv_rSqd_2 * inv_rSqd_2;
    2.18 :   2add:   movapd %xmm14,%xmm10
    0.68 :   2ae2:   mulsd  %xmm14,%xmm10
         : 656  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    1.38 :   2ae7:   mulsd  %xmm10,%xmm0
         : 658  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
    2.67 :   2aec:   addsd  %xmm0,%xmm0
    9.46 :   2af0:   subsd  %xmm10,%xmm0
         : 662  a[i][k] += rij[k] * f;
    0.21 :   2af5:   movsd  (%rdx),%xmm10
         : 658  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
   14.17 :   2afa:   mulsd  %xmm5,%xmm0
         : 662  a[i][k] += rij[k] * f;
   16.40 :   2afe:   mulsd  %xmm0,%xmm3
    0.78 :   2b02:   mulsd  %xmm0,%xmm2
    1.08 :   2b06:   mulsd  %xmm0,%xmm1
    9.52 :   2b0a:   addsd  %xmm3,%xmm10
    4.00 :   2b0f:   movsd  %xmm10,(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.03 :   2b14:   movsd  (%rax),%xmm10
    0.01 :   2b19:   subsd  %xmm3,%xmm10
    3.61 :   2b1e:   movsd  %xmm10,(%rax)
         : 662  a[i][k] += rij[k] * f;
    0.42 :   2b23:   movsd  0x8(%rdx),%xmm3
    0.05 :   2b28:   addsd  %xmm2,%xmm3
    2.17 :   2b2c:   movsd  %xmm3,0x8(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.91 :   2b31:   movsd  0x8(%rax),%xmm3
    0.39 :   2b36:   subsd  %xmm2,%xmm3
    2.88 :   2b3a:   movsd  %xmm3,0x8(%rax)
         : 662  a[i][k] += rij[k] * f;
    0.31 :   2b3f:   movsd  0x10(%rdx),%xmm0
    0.88 :   2b44:   addsd  %xmm1,%xmm0
    1.75 :   2b48:   movsd  %xmm0,0x10(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.99 :   2b4d:   movsd  0x10(%rax),%xmm0
    0.19 :   2b52:   subsd  %xmm1,%xmm0
    1.91 :   2b56:   movsd  %xmm0,0x10(%rax)
         : 633  for (j = i+1; j < N; j++) {
    0.00 :   2b5b:   cmp    %rax,%rsi
    0.48 :   2b5e:   jne    2a78 <VelocityVerlet(double, int, _IO_FILE*)+0x298>
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2b64:   add    $0x1,%r9
    0.00 :   2b68:   add    $0x18,%rdi
    0.00 :   2b6c:   add    $0x18,%rdx
    0.00 :   2b70:   cmp    %r11d,%r8d
    0.00 :   2b73:   jl     2a40 <VelocityVerlet(double, int, _IO_FILE*)+0x260>
         : 669  for (i=0; i<N; i++) {
    0.00 :   2b79:   test   %r10d,%r10d
    0.00 :   2b7c:   jle    2d4b <VelocityVerlet(double, int, _IO_FILE*)+0x56b>
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2b82:   movq   0x2095(%rip),%xmm10        # 4c20 <_IO_stdin_used+0xc20>
    0.00 :   2b8b:   lea    0x3eeee(%rip),%rax        # 41a80 <v>
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2b92:   xor    %esi,%esi
    0.00 :   2b94:   movsd  0x448c(%rip),%xmm2        # 7028 <m>
    0.00 :   2b9c:   lea    0x219fd(%rip),%rcx        # 245a0 <a>
    0.00 :   2ba3:   lea    0x5c3b6(%rip),%rdx        # 5ef60 <r>
    0.00 :   2baa:   movapd %xmm4,%xmm0
         : 676  v[i][0] *=-1.; //- elastic walls
    0.00 :   2bae:   movapd %xmm10,%xmm13
         : 689  if (r[i][1]<0.) {
         : 690  v[i][1] *=-1.; //- elastic walls
         : 691  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "left" walls
         : 692  }
         : 693  else if (r[i][1]>=L) {
         : 694  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2bb3:   movapd %xmm10,%xmm15
         : 685  v[i][1] *=-1.; //- elastic walls
    0.00 :   2bb8:   movapd %xmm10,%xmm12
         : 694  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "right" walls
         : 695  }
         :
         : 697  if (r[i][2]<0.) {
         : 698  v[i][2] *=-1.; //- elastic walls
    0.00 :   2bbd:   movapd %xmm10,%xmm11
    0.00 :   2bc2:   jmp    2cc7 <VelocityVerlet(double, int, _IO_FILE*)+0x4e7>
    0.00 :   2bc7:   nopw   0x0(%rax,%rax,1)
         : 679  else if (r[i][0]>=L) {
    0.00 :   2bd0:   comisd %xmm8,%xmm6
    0.00 :   2bd5:   jb     2c12 <VelocityVerlet(double, int, _IO_FILE*)+0x432>
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2bd7:   movapd %xmm3,%xmm6
    0.00 :   2bdb:   xorpd  %xmm10,%xmm6
         : 683  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2be0:   movapd %xmm4,%xmm14
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2be5:   movsd  %xmm6,(%rax)
         : 682  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2be9:   cmpnltsd %xmm3,%xmm14
    0.00 :   2bef:   andpd  %xmm14,%xmm6
    0.00 :   2bf4:   andnpd %xmm3,%xmm14
         : 91   VelocityVerlet(double, int, _IO_FILE*):
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2bf9:   movapd %xmm2,%xmm3
    0.00 :   2bfd:   addsd  %xmm2,%xmm3
         : 684  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c01:   orpd   %xmm14,%xmm6
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c06:   mulsd  %xmm6,%xmm3
    0.00 :   2c0a:   divsd  %xmm7,%xmm3
    0.00 :   2c0e:   addsd  %xmm3,%xmm0
         : 684  if (r[i][1]<0.) {
    0.01 :   2c12:   movsd  0x8(%rdx),%xmm3
    0.00 :   2c17:   comisd %xmm3,%xmm4
    0.00 :   2c1b:   ja     2d20 <VelocityVerlet(double, int, _IO_FILE*)+0x540>
         : 688  else if (r[i][1]>=L) {
    0.00 :   2c21:   comisd %xmm8,%xmm3
    0.00 :   2c26:   jb     2c5f <VelocityVerlet(double, int, _IO_FILE*)+0x47f>
         : 689  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2c28:   movapd %xmm5,%xmm6
    0.00 :   2c2c:   xorpd  %xmm15,%xmm6
         : 692  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c31:   movapd %xmm4,%xmm3
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 689  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2c35:   movsd  %xmm6,0x8(%rax)
         : 691  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c3a:   cmpnltsd %xmm5,%xmm3
    0.00 :   2c3f:   andpd  %xmm3,%xmm6
    0.00 :   2c43:   andnpd %xmm5,%xmm3
    0.00 :   2c47:   orpd   %xmm3,%xmm6
         : 92   VelocityVerlet(double, int, _IO_FILE*):
         : 690  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c4b:   movapd %xmm2,%xmm3
    0.00 :   2c4f:   addsd  %xmm2,%xmm3
    0.00 :   2c53:   mulsd  %xmm6,%xmm3
    0.00 :   2c57:   divsd  %xmm7,%xmm3
    0.00 :   2c5b:   addsd  %xmm3,%xmm0
         : 693  if (r[i][2]<0.) {
    0.00 :   2c5f:   movsd  0x10(%rdx),%xmm3
    0.00 :   2c64:   comisd %xmm3,%xmm4
    0.00 :   2c68:   ja     2d30 <VelocityVerlet(double, int, _IO_FILE*)+0x550>
         : 697  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "left" walls
         : 698  }
         : 699  else if (r[i][2]>=L) {
    0.00 :   2c6e:   comisd %xmm8,%xmm3
    0.00 :   2c73:   jb     2caf <VelocityVerlet(double, int, _IO_FILE*)+0x4cf>
         : 698  v[i][2]*=-1.;  //- elastic walls
    0.00 :   2c75:   movapd %xmm1,%xmm3
    0.00 :   2c79:   xorpd  0x1f9f(%rip),%xmm3        # 4c20 <_IO_stdin_used+0xc20>
         : 701  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c81:   movapd %xmm4,%xmm5
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 698  v[i][2]*=-1.;  //- elastic walls
    0.00 :   2c85:   movsd  %xmm3,0x10(%rax)
         : 700  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c8a:   cmpnltsd %xmm1,%xmm5
    0.00 :   2c8f:   andpd  %xmm5,%xmm3
    0.00 :   2c93:   andnpd %xmm1,%xmm5
         : 91   VelocityVerlet(double, int, _IO_FILE*):
         : 699  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c97:   movapd %xmm2,%xmm1
    0.00 :   2c9b:   addsd  %xmm2,%xmm1
         : 702  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c9f:   orpd   %xmm5,%xmm3
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 699  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "right" walls
    0.00 :   2ca3:   mulsd  %xmm3,%xmm1
    0.00 :   2ca7:   divsd  %xmm7,%xmm1
    0.00 :   2cab:   addsd  %xmm1,%xmm0
         : 669  for (i=0; i<N; i++) {
    0.00 :   2caf:   add    $0x1,%esi
    0.00 :   2cb2:   add    $0x18,%rax
    0.00 :   2cb6:   add    $0x18,%rcx
    0.00 :   2cba:   add    $0x18,%rdx
    0.00 :   2cbe:   cmp    %esi,%r10d
    0.00 :   2cc1:   jle    2d4f <VelocityVerlet(double, int, _IO_FILE*)+0x56f>
         : 670  v[i][0] += a[i][0]*dt5;
    0.01 :   2cc7:   movupd (%rcx),%xmm1
    0.00 :   2ccb:   mulpd  -0x10(%rsp),%xmm1
    0.01 :   2cd1:   movupd (%rax),%xmm6
    0.01 :   2cd5:   addpd  %xmm6,%xmm1
    0.00 :   2cd9:   movapd %xmm1,%xmm5
    0.00 :   2cdd:   movups %xmm1,(%rax)
    0.00 :   2ce0:   movapd %xmm1,%xmm3
         : 672  v[i][2] += a[i][2]*dt5;
    0.00 :   2ce4:   movsd  0x10(%rcx),%xmm1
    0.00 :   2ce9:   unpckhpd %xmm5,%xmm5
    0.00 :   2ced:   mulsd  %xmm9,%xmm1
    0.00 :   2cf2:   addsd  0x10(%rax),%xmm1
    0.00 :   2cf7:   movsd  %xmm1,0x10(%rax)
         : 675  if (r[i][0]<0.) {
    0.01 :   2cfc:   movsd  (%rdx),%xmm6
    0.01 :   2d00:   comisd %xmm6,%xmm4
    0.00 :   2d04:   jbe    2bd0 <VelocityVerlet(double, int, _IO_FILE*)+0x3f0>
         : 676  v[i][0] *=-1.; //- elastic walls
    0.00 :   2d0a:   movapd %xmm3,%xmm6
    0.00 :   2d0e:   xorpd  %xmm13,%xmm6
    0.00 :   2d13:   jmp    2be0 <VelocityVerlet(double, int, _IO_FILE*)+0x400>
    0.00 :   2d18:   nopl   0x0(%rax,%rax,1)
         : 685  v[i][1] *=-1.; //- elastic walls
    0.00 :   2d20:   movapd %xmm5,%xmm6
    0.00 :   2d24:   xorpd  %xmm12,%xmm6
    0.00 :   2d29:   jmp    2c31 <VelocityVerlet(double, int, _IO_FILE*)+0x451>
    0.00 :   2d2e:   xchg   %ax,%ax
         : 694  v[i][2] *=-1.; //- elastic walls
    0.00 :   2d30:   movapd %xmm1,%xmm3
    0.00 :   2d34:   xorpd  %xmm11,%xmm3
    0.00 :   2d39:   jmp    2c81 <VelocityVerlet(double, int, _IO_FILE*)+0x4a1>
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2d3e:   pxor   %xmm4,%xmm4
    0.00 :   2d42:   test   %r11d,%r11d
    0.00 :   2d45:   jg     2a0b <VelocityVerlet(double, int, _IO_FILE*)+0x22b>
         : 583  double psum = 0.;
    0.00 :   2d4b:   movapd %xmm4,%xmm0
         : 713  }
         : 714  fprintf(fp,"\n");
         : 715  }*/
         : 716  //fprintf(fp,"\n \n");
         :
         : 718  return psum/(6*L*L);
    0.00 :   2d4f:   movsd  0x1f31(%rip),%xmm1        # 4c88 <_IO_stdin_used+0xc88>
         : 714  }
    0.00 :   2d57:   pop    %rbx
         : 713  return psum/(6*L*L);
    0.00 :   2d58:   mulsd  %xmm8,%xmm1
    0.00 :   2d5d:   mulsd  %xmm8,%xmm1
    0.00 :   2d62:   divsd  %xmm1,%xmm0
         : 714  }
    0.00 :   2d66:   ret
         : 597  for (i=0; i<N; i++) {
    0.00 :   2d67:   xor    %eax,%eax
    0.00 :   2d69:   movapd 0x1ebf(%rip),%xmm6        # 4c30 <_IO_stdin_used+0xc30>
    0.00 :   2d71:   lea    0x21828(%rip),%rsi        # 245a0 <a>
    0.00 :   2d78:   lea    0x3ed01(%rip),%rdi        # 41a80 <v>
    0.00 :   2d7f:   lea    0x5c1da(%rip),%r8        # 5ef60 <r>
    0.00 :   2d86:   jmp    2975 <VelocityVerlet(double, int, _IO_FILE*)+0x195>
 Percent |	Source code & Disassembly of MD.exe for cycles (10077 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000002530 <Potential()>:
         : 6    Potential():
         :
         : 492  }
         :
         :
         : 495  // Function to calculate the potential energy of the system
         : 496  double Potential() {
    0.00 :   2530:   endbr64
         : 497  double r2; //, rnorm; //, quot;
         : 498  int i, j;
         : 499  double ri0, ri1, ri2, rj0, rj1, rj2, mult0, mult1, mult2;
         :
         : 501  double Pot = 0.;
         : 502  for (i = 0; i < N; i++) {
    0.00 :   2534:   mov    0x79f0e(%rip),%esi        # 7c448 <N>
    0.00 :   253a:   test   %esi,%esi
    0.00 :   253c:   jle    263e <Potential()+0x10e>
    0.00 :   2542:   lea    0x5ca17(%rip),%r9        # 5ef60 <r>
         : 496  double Pot = 0.;
    0.00 :   2549:   pxor   %xmm5,%xmm5
         : 518  r2 += mult1 * mult1;
         : 519  r2 += mult2 * mult2;
         :
         : 521  double r6 = r2 * r2 * r2;
         : 522  double r12 = r6 * r6;
         : 523  Pot += (sigma / r12 - sigma / r6);
    0.00 :   254d:   movsd  0x4ae3(%rip),%xmm4        # 7038 <sigma>
         : 497  for (i = 0; i < N; i++) {
    0.00 :   2555:   xor    %ecx,%ecx
         : 518  Pot += (sigma / r12 - sigma / r6);
    0.00 :   2557:   mov    %r9,%r8
         : 496  double Pot = 0.;
    0.00 :   255a:   movapd %xmm5,%xmm3
    0.00 :   255e:   xchg   %ax,%ax
         : 498  ri0 = r[i][0];
    0.01 :   2560:   movsd  (%r8),%xmm8
         : 499  ri1 = r[i][1];
    0.00 :   2565:   movsd  0x8(%r8),%xmm7
         : 500  ri2 = r[i][2];
    0.00 :   256b:   mov    %r9,%rax
         : 501  for (j = 0; j < N; j++) {
    0.02 :   256e:   xor    %edx,%edx
         : 500  ri2 = r[i][2];
    0.00 :   2570:   movsd  0x10(%r8),%xmm6
         : 501  for (j = 0; j < N; j++) {
    0.00 :   2576:   lea    0x1(%rcx),%edi
    0.00 :   2579:   nopl   0x0(%rax)
         : 506  if (j != i) {
    0.01 :   2580:   cmp    %edx,%ecx
    0.00 :   2582:   je     2620 <Potential()+0xf0>
         : 508  mult0 = ri0 - rj0;
    0.00 :   2588:   movapd %xmm8,%xmm2
    9.86 :   258d:   subsd  (%rax),%xmm2
         : 509  mult1 = ri1 - rj1;
    0.05 :   2591:   movapd %xmm7,%xmm1
         : 501  for (j = 0; j < N; j++) {
    0.00 :   2595:   add    $0x1,%edx
         : 509  mult1 = ri1 - rj1;
    0.09 :   2598:   subsd  0x8(%rax),%xmm1
         : 510  mult2 = ri2 - rj2;
    9.17 :   259d:   movapd %xmm6,%xmm0
    0.10 :   25a1:   subsd  0x10(%rax),%xmm0
         : 501  for (j = 0; j < N; j++) {
    0.00 :   25a6:   add    $0x18,%rax
         : 512  r2 += mult0 * mult0;
    0.00 :   25aa:   mulsd  %xmm2,%xmm2
         : 513  r2 += mult1 * mult1;
   10.10 :   25ae:   mulsd  %xmm1,%xmm1
         : 514  r2 += mult2 * mult2;
    0.01 :   25b2:   mulsd  %xmm0,%xmm0
         : 512  r2 += mult0 * mult0;
    0.01 :   25b6:   addsd  %xmm5,%xmm2
         : 513  r2 += mult1 * mult1;
    0.02 :   25ba:   addsd  %xmm2,%xmm1
         : 514  r2 += mult2 * mult2;
    9.57 :   25be:   addsd  %xmm1,%xmm0
         : 516  double r6 = r2 * r2 * r2;
    0.02 :   25c2:   movapd %xmm0,%xmm1
    0.03 :   25c6:   mulsd  %xmm0,%xmm1
    0.04 :   25ca:   mulsd  %xmm1,%xmm0
         : 518  Pot += (sigma / r12 - sigma / r6);
   10.77 :   25ce:   movapd %xmm4,%xmm1
         : 517  double r12 = r6 * r6;
    0.01 :   25d2:   movapd %xmm0,%xmm2
    0.02 :   25d6:   mulsd  %xmm0,%xmm2
         : 518  Pot += (sigma / r12 - sigma / r6);
    2.63 :   25da:   divsd  %xmm2,%xmm1
   12.12 :   25de:   movapd %xmm4,%xmm2
    0.02 :   25e2:   divsd  %xmm0,%xmm2
    0.11 :   25e6:   movapd %xmm1,%xmm0
    6.46 :   25ea:   subsd  %xmm2,%xmm0
   28.67 :   25ee:   addsd  %xmm0,%xmm3
         : 501  for (j = 0; j < N; j++) {
    0.01 :   25f2:   cmp    %edx,%esi
    0.09 :   25f4:   jne    2580 <Potential()+0x50>
         : 497  for (i = 0; i < N; i++) {
    0.00 :   25f6:   mov    %edi,%ecx
    0.00 :   25f8:   add    $0x18,%r8
    0.00 :   25fc:   cmp    %edi,%esi
    0.00 :   25fe:   jne    2560 <Potential()+0x30>
         :
         :
         : 530  }
         : 531  }
         : 532  }
         : 533  return 4.0 * epsilon * Pot;
    0.00 :   2604:   movsd  0x2664(%rip),%xmm0        # 4c70 <_IO_stdin_used+0xc70>
    0.00 :   260c:   mulsd  0x4a1c(%rip),%xmm0        # 7030 <epsilon>
    0.00 :   2614:   mulsd  %xmm3,%xmm0
         : 529  }
    0.00 :   2618:   ret
    0.00 :   2619:   nopl   0x0(%rax)
         : 501  for (j = 0; j < N; j++) {
    0.00 :   2620:   mov    %edi,%edx
    0.00 :   2622:   add    $0x18,%rax
    0.00 :   2626:   cmp    %edi,%esi
    0.00 :   2628:   jne    2580 <Potential()+0x50>
         : 497  for (i = 0; i < N; i++) {
    0.00 :   262e:   mov    %edi,%ecx
    0.00 :   2630:   add    $0x18,%r8
    0.00 :   2634:   cmp    %edi,%esi
    0.00 :   2636:   jne    2560 <Potential()+0x30>
    0.00 :   263c:   jmp    2604 <Potential()+0xd4>
         : 496  double Pot = 0.;
    0.00 :   263e:   pxor   %xmm3,%xmm3
    0.00 :   2642:   jmp    2604 <Potential()+0xd4>
 Percent |	Source code & Disassembly of MD.exe for cycles (54 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000002650 <computeAccelerations()>:
         : 6    computeAccelerations():
         :
         :
         : 537  //   Uses the derivative of the Lennard-Jones potential to calculate
         : 538  //   the forces on each atom.  Then uses a = F/m to calculate the
         : 539  //   accelleration of each atom.
         : 540  void computeAccelerations() { // NOTA: melhorar a funçao !!!!
    0.00 :   2650:   endbr64
         : 542  double f, rSqd;
         : 543  double rij[3]; // position of i relative to j
         :
         : 545  double inv_rSqd, inv_rSqd_2, inv_rSqd_4, inv_rSqd_7;
         :
         : 547  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2654:   mov    0x79ded(%rip),%r11d        # 7c448 <N>
    0.00 :   265b:   lea    -0x1(%r11),%r10d
    0.00 :   265f:   test   %r10d,%r10d
    0.00 :   2662:   jle    27d2 <computeAccelerations()+0x182>
    0.00 :   2668:   lea    0x21f31(%rip),%rdx        # 245a0 <a>
         : 535  void computeAccelerations() { // NOTA: melhorar a funçao !!!!
    0.00 :   266f:   push   %rbx
         : 542  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2670:   xor    %r9d,%r9d
    0.00 :   2673:   xor    %r8d,%r8d
    0.00 :   2676:   movsd  0x25fa(%rip),%xmm5        # 4c78 <_IO_stdin_used+0xc78>
    0.00 :   267e:   movsd  0x25fa(%rip),%xmm4        # 4c80 <_IO_stdin_used+0xc80>
    0.00 :   2686:   lea    0x18(%rdx),%rbx
    0.00 :   268a:   pxor   %xmm6,%xmm6
    0.00 :   268e:   lea    0x5c8cb(%rip),%rdi        # 5ef60 <r>
    0.00 :   2695:   nopl   (%rax)
         : 543  for (j = i+1; j < N; j++) {
    0.00 :   2698:   add    $0x1,%r8d
    0.00 :   269c:   cmp    %r11d,%r8d
    0.00 :   269f:   jge    27bb <computeAccelerations()+0x16b>
    0.00 :   26a5:   mov    %r10d,%eax
         : 549  // initialize r^2 to zero
         : 550  rSqd = 0;
         :
         : 552  //for (k = 0; k < 3; k++) {
         : 553  //  component-by-componenent position of i relative to j
         : 554  rij[0] = r[i][0] - r[j][0];
    0.00 :   26a8:   movsd  (%rdi),%xmm9
         : 555  rSqd += rij[0] * rij[0];
         :
         : 557  rij[1] = r[i][1] - r[j][1];
         : 558  rSqd += rij[1] * rij[1];
         :
         : 560  rij[2] = r[i][2] - r[j][2];
    0.00 :   26ad:   movsd  0x10(%rdi),%xmm7
    0.00 :   26b2:   mov    %rdi,%rcx
    0.00 :   26b5:   sub    %r8d,%eax
         : 552  rij[1] = r[i][1] - r[j][1];
    0.00 :   26b8:   movsd  0x8(%rdi),%xmm8
    0.00 :   26be:   add    %r9,%rax
    0.00 :   26c1:   lea    (%rax,%rax,2),%rax
    0.00 :   26c5:   lea    (%rbx,%rax,8),%rsi
         : 555  rij[2] = r[i][2] - r[j][2];
    0.00 :   26c9:   mov    %rdx,%rax
    0.00 :   26cc:   nopl   0x0(%rax)
         : 549  rij[0] = r[i][0] - r[j][0];
    1.98 :   26d0:   movapd %xmm9,%xmm3
    0.00 :   26d5:   subsd  0x18(%rcx),%xmm3
         : 543  for (j = i+1; j < N; j++) {
    0.00 :   26da:   add    $0x18,%rax
    0.00 :   26de:   add    $0x18,%rcx
         : 552  rij[1] = r[i][1] - r[j][1];
    0.00 :   26e2:   movapd %xmm8,%xmm2
    0.00 :   26e7:   subsd  0x8(%rcx),%xmm2
         : 550  rSqd += rij[0] * rij[0];
    6.24 :   26ec:   movapd %xmm3,%xmm1
    1.39 :   26f0:   mulsd  %xmm3,%xmm1
         : 553  rSqd += rij[1] * rij[1];
    0.00 :   26f4:   movapd %xmm2,%xmm0
    0.00 :   26f8:   mulsd  %xmm2,%xmm0
         : 550  rSqd += rij[0] * rij[0];
    0.00 :   26fc:   addsd  %xmm6,%xmm1
         : 553  rSqd += rij[1] * rij[1];
    0.00 :   2700:   addsd  %xmm1,%xmm0
         : 555  rij[2] = r[i][2] - r[j][2];
    0.00 :   2704:   movapd %xmm7,%xmm1
    0.00 :   2708:   subsd  0x10(%rcx),%xmm1
         : 556  rSqd += rij[2] * rij[2];
    4.37 :   270d:   movapd %xmm1,%xmm10
    0.00 :   2712:   mulsd  %xmm1,%xmm10
    0.00 :   2717:   addsd  %xmm0,%xmm10
         : 563  //}
         :
         : 565  //  From derivative of Lennard-Jones with sigma and epsilon set equal to 1 in natural units!
         : 566  //f = 24 * (2 * custom_pow2(rSqd, -7) - custom_pow2(rSqd, -4));
         :
         : 568  inv_rSqd = 1.0 / rSqd;
    0.00 :   271c:   movapd %xmm5,%xmm0
    1.42 :   2720:   divsd  %xmm10,%xmm0
         : 564  inv_rSqd_2 = inv_rSqd * inv_rSqd;
    0.00 :   2725:   movapd %xmm0,%xmm10
    1.55 :   272a:   mulsd  %xmm0,%xmm10
         : 566  inv_rSqd_4 = inv_rSqd_2 * inv_rSqd_2;
         : 567  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    0.00 :   272f:   mulsd  %xmm10,%xmm0
         : 565  inv_rSqd_4 = inv_rSqd_2 * inv_rSqd_2;
    0.00 :   2734:   movapd %xmm10,%xmm11
    0.00 :   2739:   mulsd  %xmm10,%xmm11
         :
         : 573  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
         :
         : 575  for (k = 0; k < 3; k++) {
         : 576  //  from F = ma, where m = 1 in natural units!
         : 577  a[i][k] += rij[k] * f;
    2.87 :   273e:   movsd  (%rdx),%xmm10
         : 566  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    3.00 :   2743:   mulsd  %xmm11,%xmm0
         : 568  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
    5.74 :   2748:   addsd  %xmm0,%xmm0
    7.87 :   274c:   subsd  %xmm11,%xmm0
   18.62 :   2751:   mulsd  %xmm4,%xmm0
         : 572  a[i][k] += rij[k] * f;
   15.93 :   2755:   mulsd  %xmm0,%xmm3
    0.00 :   2759:   mulsd  %xmm0,%xmm2
    0.00 :   275d:   mulsd  %xmm0,%xmm1
    6.99 :   2761:   addsd  %xmm3,%xmm10
    1.91 :   2766:   movsd  %xmm10,(%rdx)
         : 573  a[j][k] -= rij[k] * f;
    0.00 :   276b:   movsd  (%rax),%xmm10
    0.00 :   2770:   subsd  %xmm3,%xmm10
    6.47 :   2775:   movsd  %xmm10,(%rax)
         : 572  a[i][k] += rij[k] * f;
    0.00 :   277a:   movsd  0x8(%rdx),%xmm3
    0.00 :   277f:   addsd  %xmm2,%xmm3
    1.72 :   2783:   movsd  %xmm3,0x8(%rdx)
         : 573  a[j][k] -= rij[k] * f;
    3.08 :   2788:   movsd  0x8(%rax),%xmm3
    0.00 :   278d:   subsd  %xmm2,%xmm3
    3.05 :   2791:   movsd  %xmm3,0x8(%rax)
         : 572  a[i][k] += rij[k] * f;
    0.00 :   2796:   movsd  0x10(%rdx),%xmm0
    0.00 :   279b:   addsd  %xmm1,%xmm0
    0.00 :   279f:   movsd  %xmm0,0x10(%rdx)
         : 573  a[j][k] -= rij[k] * f;
    3.02 :   27a4:   movsd  0x10(%rax),%xmm0
    0.00 :   27a9:   subsd  %xmm1,%xmm0
    2.78 :   27ad:   movsd  %xmm0,0x10(%rax)
         : 543  for (j = i+1; j < N; j++) {
    0.00 :   27b2:   cmp    %rax,%rsi
    0.00 :   27b5:   jne    26d0 <computeAccelerations()+0x80>
         : 542  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   27bb:   add    $0x1,%r9
    0.00 :   27bf:   add    $0x18,%rdi
    0.00 :   27c3:   add    $0x18,%rdx
    0.00 :   27c7:   cmp    %r8d,%r10d
    0.00 :   27ca:   jne    2698 <computeAccelerations()+0x48>
         : 577  }
         : 578  }
         : 579  }
         : 580  }
    0.00 :   27d0:   pop    %rbx
    0.00 :   27d1:   ret
    0.00 :   27d2:   ret
 Percent |	Source code & Disassembly of MD.exe for cycles (4 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000001260 <main>:
         : 6    main():
         : 91   double my_fabs(double x) {
         : 92   return (x < 0) ? -x : x;
         : 93   }
         :
         : 95   int main()
         : 96   {
    0.00 :   1260:   endbr64
    0.00 :   1264:   push   %r15
    0.00 :   1266:   push   %r14
    0.00 :   1268:   push   %r13
    0.00 :   126a:   push   %r12
    0.00 :   126c:   push   %rbp
    0.00 :   126d:   push   %rbx
    0.00 :   126e:   sub    $0x1000,%rsp
    0.00 :   1275:   orq    $0x0,(%rsp)
    0.00 :   127a:   sub    $0x68,%rsp
         : 112  }
         :
         : 114  __fortify_function int
         : 115  printf (const char *__restrict __fmt, ...)
         : 116  {
         : 117  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   127e:   lea    0x2d83(%rip),%rbp        # 4008 <_IO_stdin_used+0x8>
    0.00 :   1285:   lea    0x2df4(%rip),%r15        # 4080 <_IO_stdin_used+0x80>
         : 120  printf():
    0.00 :   128c:   mov    %rbp,%rdi
         : 113  main():
    0.00 :   128f:   mov    %fs:0x28,%rax
    0.00 :   1298:   mov    %rax,0x1058(%rsp)
    0.00 :   12a0:   xor    %eax,%eax
         : 109  printf("\n  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
         : 110  printf("                  WELCOME TO WILLY P CHEM MD!\n");
         : 111  printf("  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
         : 112  printf("\n  ENTER A TITLE FOR YOUR CALCULATION!\n");
         :
         : 114  if (scanf("%s", prefix) != 1) {
    0.00 :   12a2:   lea    0xa0(%rsp),%r12
         : 116  printf():
    0.00 :   12aa:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   12af:   lea    0x2d9a(%rip),%rdi        # 4050 <_IO_stdin_used+0x50>
         : 113  printf():
    0.00 :   12b6:   call   1150 <puts@plt>
    0.00 :   12bb:   mov    %r15,%rdi
    0.00 :   12be:   call   1150 <puts@plt>
         : 115  main():
    0.00 :   12c3:   lea    0x2df6(%rip),%rdi        # 40c0 <_IO_stdin_used+0xc0>
         : 113  printf():
    0.00 :   12ca:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   12cf:   lea    0x386b(%rip),%r8        # 4b41 <_IO_stdin_used+0xb41>
    0.00 :   12d6:   xor    %eax,%eax
    0.00 :   12d8:   mov    %r12,%rsi
    0.00 :   12db:   mov    %r8,%rdi
    0.00 :   12de:   call   1200 <__isoc99_scanf@plt>
    0.00 :   12e3:   cmp    $0x1,%eax
    0.00 :   12e6:   jne    2154 <main+0xef4>
         : 115  fprintf(stderr, "Error reading prefix.\n");
         : 116  exit(1);
         : 117  }
         :
         :
         : 120  strcpy(tfn,OUTPUT_FOLDER);
    0.00 :   12ec:   mov    0x5d4d(%rip),%rbx        # 7040 <OUTPUT_FOLDER>
         : 79   #endif
         :
         : 81   __fortify_function char *
         : 82   __NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
         : 83   {
         : 84   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   12f3:   lea    0x490(%rsp),%r14
         : 86   strcpy():
    0.00 :   12fb:   mov    $0x3e8,%edx
         : 80   main():
    0.00 :   1300:   lea    0x880(%rsp),%r13
         : 80   strcpy():
    0.00 :   1308:   mov    %r14,%rdi
    0.00 :   130b:   mov    %rbx,%rsi
    0.00 :   130e:   call   11c0 <__stpcpy_chk@plt>
         : 82   main():
         :
         :
         : 132  __fortify_function char *
         : 133  __NTH (strcat (char *__restrict __dest, const char *__restrict __src))
         : 134  {
         : 135  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   1313:   mov    %r14,%rdx
         : 137  strcat():
    0.00 :   1316:   mov    %r12,%rsi
    0.00 :   1319:   sub    %rax,%rdx
         : 132  strcpy():
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   131c:   mov    %rax,%rdi
         : 81   strcat():
         : 130  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   131f:   add    $0x3e8,%rdx
    0.00 :   1326:   call   11c0 <__stpcpy_chk@plt>
         : 133  main():
    0.00 :   132b:   mov    %r14,%rcx
         : 131  strcat():
    0.00 :   132e:   mov    $0xa,%edx
    0.00 :   1333:   lea    0x3821(%rip),%rsi        # 4b5b <_IO_stdin_used+0xb5b>
    0.00 :   133a:   sub    %rax,%rcx
    0.00 :   133d:   mov    %rax,%rdi
    0.00 :   1340:   add    $0x3e8,%rcx
    0.00 :   1347:   call   11b0 <__memcpy_chk@plt>
         : 136  strcpy():
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   134c:   mov    %rbx,%rsi
    0.00 :   134f:   mov    $0x3e8,%edx
    0.00 :   1354:   mov    %r13,%rdi
    0.00 :   1357:   call   11c0 <__stpcpy_chk@plt>
         : 84   main():
         : 130  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   135c:   mov    %r13,%rdx
         : 132  strcat():
    0.00 :   135f:   mov    %r12,%rsi
    0.00 :   1362:   sub    %rax,%rdx
         : 132  strcpy():
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   1365:   mov    %rax,%rdi
         : 81   strcat():
         : 130  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   1368:   add    $0x3e8,%rdx
    0.00 :   136f:   call   11c0 <__stpcpy_chk@plt>
         : 133  main():
    0.00 :   1374:   mov    %r13,%rcx
         : 131  strcat():
    0.00 :   1377:   mov    $0xc,%edx
    0.00 :   137c:   lea    0x37e2(%rip),%rsi        # 4b65 <_IO_stdin_used+0xb65>
    0.00 :   1383:   sub    %rax,%rcx
    0.00 :   1386:   mov    %rax,%rdi
    0.00 :   1389:   add    $0x3e8,%rcx
    0.00 :   1390:   call   11b0 <__memcpy_chk@plt>
         : 136  main():
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   1395:   lea    0xc70(%rsp),%rax
         : 81   strcpy():
    0.00 :   139d:   mov    %rbx,%rsi
    0.00 :   13a0:   mov    $0x3e8,%edx
    0.00 :   13a5:   mov    %rax,%rbx
    0.00 :   13a8:   mov    %rax,%rdi
    0.00 :   13ab:   mov    %rax,0x48(%rsp)
    0.00 :   13b0:   call   11c0 <__stpcpy_chk@plt>
         : 85   main():
         : 130  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   13b5:   mov    %rbx,%rdx
         : 132  strcat():
    0.00 :   13b8:   mov    %r12,%rsi
    0.00 :   13bb:   sub    %rax,%rdx
         : 132  strcpy():
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   13be:   mov    %rax,%rdi
         : 81   strcat():
         : 130  return __builtin___strcat_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   13c1:   add    $0x3e8,%rdx
    0.00 :   13c8:   call   11c0 <__stpcpy_chk@plt>
         : 133  main():
    0.00 :   13cd:   mov    %rbx,%rcx
         : 131  strcat():
    0.00 :   13d0:   mov    $0xd,%edx
    0.00 :   13d5:   lea    0x3795(%rip),%rsi        # 4b71 <_IO_stdin_used+0xb71>
    0.00 :   13dc:   sub    %rax,%rcx
    0.00 :   13df:   mov    %rax,%rdi
    0.00 :   13e2:   add    $0x3e8,%rcx
    0.00 :   13e9:   call   11b0 <__memcpy_chk@plt>
         : 136  main():
    0.00 :   13ee:   mov    %rbp,%rdi
         : 113  printf():
    0.00 :   13f1:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   13f6:   mov    %r12,%rdx
         : 113  printf():
    0.00 :   13f9:   mov    $0x1,%edi
    0.00 :   13fe:   xor    %eax,%eax
    0.00 :   1400:   lea    0x2ce1(%rip),%rsi        # 40e8 <_IO_stdin_used+0xe8>
         : 115  main():
         : 157  printf("  FOR NEON,    TYPE 'Ne' THEN PRESS 'return' TO CONTINUE\n");
         : 158  printf("  FOR ARGON,   TYPE 'Ar' THEN PRESS 'return' TO CONTINUE\n");
         : 159  printf("  FOR KRYPTON, TYPE 'Kr' THEN PRESS 'return' TO CONTINUE\n");
         : 160  printf("  FOR XENON,   TYPE 'Xe' THEN PRESS 'return' TO CONTINUE\n");
         : 161  printf("  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
         : 162  if (scanf("%s", atype) != 1) {
    0.00 :   1407:   lea    0x5c92(%rip),%r12        # 70a0 <atype>
         : 164  printf():
    0.00 :   140e:   call   11e0 <__printf_chk@plt>
         : 113  main():
    0.00 :   1413:   mov    %r15,%rdi
         : 113  printf():
    0.00 :   1416:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   141b:   mov    %rbp,%rdi
         : 113  printf():
    0.00 :   141e:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1423:   lea    0x2cee(%rip),%rdi        # 4118 <_IO_stdin_used+0x118>
         : 113  printf():
    0.00 :   142a:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   142f:   lea    0x2d2a(%rip),%rdi        # 4160 <_IO_stdin_used+0x160>
         : 113  printf():
    0.00 :   1436:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   143b:   lea    0x2d5e(%rip),%rdi        # 41a0 <_IO_stdin_used+0x1a0>
         : 113  printf():
    0.00 :   1442:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1447:   lea    0x2d92(%rip),%rdi        # 41e0 <_IO_stdin_used+0x1e0>
         : 113  printf():
    0.00 :   144e:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1453:   lea    0x2dc6(%rip),%rdi        # 4220 <_IO_stdin_used+0x220>
         : 113  printf():
    0.00 :   145a:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   145f:   lea    0x2dfa(%rip),%rdi        # 4260 <_IO_stdin_used+0x260>
         : 113  printf():
    0.00 :   1466:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   146b:   mov    %r15,%rdi
         : 113  printf():
    0.00 :   146e:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1473:   lea    0x36c7(%rip),%r8        # 4b41 <_IO_stdin_used+0xb41>
    0.00 :   147a:   xor    %eax,%eax
    0.00 :   147c:   mov    %r12,%rsi
    0.00 :   147f:   mov    %r8,%rdi
    0.00 :   1482:   call   1200 <__isoc99_scanf@plt>
    0.00 :   1487:   cmp    $0x1,%eax
    0.00 :   148a:   jne    212d <main+0xecd>
         : 163  fprintf(stderr, "Error reading atype.\n");
         : 164  exit(1);
         : 165  }
         :
         :
         : 168  if (strcmp(atype,"He")==0) {
    0.00 :   1490:   cmpw   $0x6548,0x5c07(%rip)        # 70a0 <atype>
    0.00 :   1499:   je     16e3 <main+0x483>
         : 171  PressFac = 8152287.336171632;
         : 172  TempFac = 10.864459551225972;
         : 173  timefac = 1.7572698825166272e-12;
         :
         : 175  }
         : 176  else if (strcmp(atype,"Ne")==0) {
    0.00 :   149f:   lea    0x36f1(%rip),%rsi        # 4b97 <_IO_stdin_used+0xb97>
    0.00 :   14a6:   mov    %r12,%rdi
    0.00 :   14a9:   call   11a0 <strcmp@plt>
    0.00 :   14ae:   test   %eax,%eax
    0.00 :   14b0:   jne    164e <main+0x3ee>
         :
         : 177  VolFac = 2.0570823999999997e-29;
         : 178  PressFac = 27223022.27659913;
         : 179  TempFac = 40.560648991243625;
         : 180  timefac = 2.1192341945685407e-12;
    0.00 :   14b6:   movsd  0x3812(%rip),%xmm6        # 4cd0 <_IO_stdin_used+0xcd0>
    0.00 :   14be:   movsd  %xmm6,0x20(%rsp)
         : 174  PressFac = 27223022.27659913;
    0.00 :   14c4:   movsd  0x380c(%rip),%xmm6        # 4cd8 <_IO_stdin_used+0xcd8>
    0.00 :   14cc:   movsd  %xmm6,0x28(%rsp)
         : 175  TempFac = 40.560648991243625;
    0.00 :   14d2:   movsd  0x3806(%rip),%xmm6        # 4ce0 <_IO_stdin_used+0xce0>
    0.00 :   14da:   movsd  %xmm6,0x18(%rsp)
         : 173  VolFac = 2.0570823999999997e-29;
    0.00 :   14e0:   movsd  0x3800(%rip),%xmm6        # 4ce8 <_IO_stdin_used+0xce8>
    0.00 :   14e8:   movsd  %xmm6,0x40(%rsp)
    0.00 :   14ee:   mov    %rbp,%rdi
         : 113  printf():
    0.00 :   14f1:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   14f6:   mov    %r12,%rdx
         : 113  printf():
    0.00 :   14f9:   mov    $0x1,%edi
    0.00 :   14fe:   xor    %eax,%eax
    0.00 :   1500:   lea    0x2d99(%rip),%rsi        # 42a0 <_IO_stdin_used+0x2a0>
    0.00 :   1507:   call   11e0 <__printf_chk@plt>
         : 116  main():
    0.00 :   150c:   mov    %rbp,%rdi
         : 113  printf():
    0.00 :   150f:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1514:   mov    %rbp,%rdi
         :
         : 222  printf("\n  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
         : 223  printf("\n  YOU WILL NOW ENTER A FEW SIMULATION PARAMETERS\n");
         : 224  printf("  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
         : 225  printf("\n\n  ENTER THE INTIAL TEMPERATURE OF YOUR GAS IN KELVIN\n");
         : 226  if (scanf("%lf", &Tinit) != 1) {
    0.00 :   1517:   lea    0x3685(%rip),%rbp        # 4ba3 <_IO_stdin_used+0xba3>
         : 228  printf():
    0.00 :   151e:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1523:   lea    0x2dae(%rip),%rdi        # 42d8 <_IO_stdin_used+0x2d8>
         : 113  printf():
    0.00 :   152a:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   152f:   mov    %r15,%rdi
         : 113  printf():
    0.00 :   1532:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1537:   lea    0x2dd2(%rip),%rdi        # 4310 <_IO_stdin_used+0x310>
         : 113  printf():
    0.00 :   153e:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1543:   xor    %eax,%eax
    0.00 :   1545:   lea    0x7aeec(%rip),%rsi        # 7c438 <Tinit>
    0.00 :   154c:   mov    %rbp,%rdi
    0.00 :   154f:   call   1200 <__isoc99_scanf@plt>
    0.00 :   1554:   cmp    $0x1,%eax
    0.00 :   1557:   jne    20df <main+0xe7f>
         : 227  fprintf(stderr, "Error reading Tinit.\n");
         : 228  exit(1);
         : 229  }
         :
         : 231  // Make sure temperature is a positive number!
         : 232  if (Tinit<0.) {
    0.00 :   155d:   movsd  0x7aed3(%rip),%xmm0        # 7c438 <Tinit>
    0.00 :   1565:   pxor   %xmm6,%xmm6
    0.00 :   1569:   comisd %xmm0,%xmm6
    0.00 :   156d:   ja     16d0 <main+0x470>
    0.00 :   1573:   lea    0x2e3e(%rip),%rdi        # 43b8 <_IO_stdin_used+0x3b8>
         : 232  printf("\n  !!!!! ABSOLUTE TEMPERATURE MUST BE A POSITIVE NUMBER!  PLEASE TRY AGAIN WITH A POSITIVE TEMPERATURE!!!\n");
         : 233  exit(0);
         : 234  }
         : 235  // Convert initial temperature from kelvin to natural units
         : 236  Tinit /= TempFac;
    0.00 :   157a:   divsd  0x18(%rsp),%xmm0
    0.00 :   1580:   movsd  %xmm0,0x7aeb0(%rip)        # 7c438 <Tinit>
         : 239  printf():
    0.00 :   1588:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   158d:   lea    0x2e54(%rip),%rdi        # 43e8 <_IO_stdin_used+0x3e8>
         : 113  printf():
    0.00 :   1594:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   1599:   lea    0x2e98(%rip),%rdi        # 4438 <_IO_stdin_used+0x438>
         : 113  printf():
    0.00 :   15a0:   call   1150 <puts@plt>
         : 113  main():
         :
         : 240  printf("\n\n  ENTER THE NUMBER DENSITY IN moles/m^3\n");
         : 241  printf("  FOR REFERENCE, NUMBER DENSITY OF AN IDEAL GAS AT STP IS ABOUT 40 moles/m^3\n");
         : 242  printf("  NUMBER DENSITY OF LIQUID ARGON AT 1 ATM AND 87 K IS ABOUT 35000 moles/m^3\n");
         :
         : 244  if (scanf("%lf", &rho) != 1) {
    0.00 :   15a5:   xor    %eax,%eax
    0.00 :   15a7:   lea    0x98(%rsp),%rsi
    0.00 :   15af:   mov    %rbp,%rdi
    0.00 :   15b2:   call   1200 <__isoc99_scanf@plt>
    0.00 :   15b7:   sub    $0x1,%eax
    0.00 :   15ba:   jne    2106 <main+0xea6>
         : 246  exit(1);
         : 247  }
         :
         :
         : 250  N = 10*216;
         : 251  Vol = N/(rho*NA);
    0.00 :   15c0:   movsd  0x98(%rsp),%xmm0
    0.00 :   15c9:   mulsd  0x5a47(%rip),%xmm0        # 7018 <NA>
         : 245  N = 10*216;
    0.00 :   15d1:   movl   $0x870,0x7ae6d(%rip)        # 7c448 <N>
         : 246  Vol = N/(rho*NA);
    0.00 :   15db:   movsd  0x376d(%rip),%xmm1        # 4d50 <_IO_stdin_used+0xd50>
    0.00 :   15e3:   movapd %xmm1,%xmm2
    0.00 :   15e7:   divsd  %xmm0,%xmm2
         :
         : 249  Vol /= VolFac;
    0.00 :   15eb:   divsd  0x40(%rsp),%xmm2
         : 261  }
         : 262  //  Check to see if the volume makes sense - is it too small?
         : 263  //  Remember VDW radius of the particles is 1 natural unit of length
         : 264  //  and volume = L*L*L, so if V = N*L*L*L = N, then all the particles
         : 265  //  will be initialized with an interparticle separation equal to 2xVDW radius
         : 266  if (Vol<N) {
    0.00 :   15f1:   comisd %xmm2,%xmm1
    0.00 :   15f5:   movsd  %xmm2,0x58(%rsp)
    0.00 :   15fb:   jbe    172d <main+0x4cd>
    0.00 :   1601:   lea    0x2e80(%rip),%rdi        # 4488 <_IO_stdin_used+0x488>
         : 113  printf():
    0.00 :   1608:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   160d:   movsd  0x58(%rsp),%xmm0
         : 113  printf():
    0.00 :   1613:   mov    0x7ae2f(%rip),%edx        # 7c448 <N>
    0.00 :   1619:   lea    0x2e90(%rip),%rsi        # 44b0 <_IO_stdin_used+0x4b0>
    0.00 :   1620:   mov    $0x1,%edi
    0.00 :   1625:   mov    $0x1,%eax
    0.00 :   162a:   call   11e0 <__printf_chk@plt>
         : 117  main():
    0.00 :   162f:   lea    0x2eca(%rip),%rdi        # 4500 <_IO_stdin_used+0x500>
         : 113  printf():
    0.00 :   1636:   call   1150 <puts@plt>
         : 113  main():
    0.00 :   163b:   lea    0x2f1e(%rip),%rdi        # 4560 <_IO_stdin_used+0x560>
         : 113  printf():
    0.00 :   1642:   call   1150 <puts@plt>
         : 113  main():
         :
         : 268  printf("\n\n\n  YOUR DENSITY IS VERY HIGH!\n\n");
         : 269  printf("  THE NUMBER OF PARTICLES IS %i AND THE AVAILABLE VOLUME IS %f NATURAL UNITS\n",N,Vol);
         : 270  printf("  SIMULATIONS WITH DENSITY GREATER THAN 1 PARTCICLE/(1 Natural Unit of Volume) MAY DIVERGE\n");
         : 271  printf("  PLEASE ADJUST YOUR INPUT FILE ACCORDINGLY AND RETRY\n\n");
         : 272  exit(0);
    0.00 :   1647:   xor    %edi,%edi
    0.00 :   1649:   call   1210 <exit@plt>
         : 179  else if (strcmp(atype,"Ar")==0) {
    0.00 :   164e:   lea    0x3545(%rip),%rsi        # 4b9a <_IO_stdin_used+0xb9a>
    0.00 :   1655:   mov    %r12,%rdi
    0.00 :   1658:   call   11a0 <strcmp@plt>
    0.00 :   165d:   test   %eax,%eax
    0.00 :   165f:   je     1c3c <main+0x9dc>
         : 188  else if (strcmp(atype,"Kr")==0) {
    0.00 :   1665:   lea    0x3531(%rip),%rsi        # 4b9d <_IO_stdin_used+0xb9d>
    0.00 :   166c:   mov    %r12,%rdi
    0.00 :   166f:   call   11a0 <strcmp@plt>
    0.00 :   1674:   test   %eax,%eax
    0.00 :   1676:   je     209d <main+0xe3d>
         : 196  else if (strcmp(atype,"Xe")==0) {
    0.00 :   167c:   lea    0x351d(%rip),%rsi        # 4ba0 <_IO_stdin_used+0xba0>
    0.00 :   1683:   mov    %r12,%rdi
    0.00 :   1686:   call   11a0 <strcmp@plt>
    0.00 :   168b:   test   %eax,%eax
    0.00 :   168d:   jne    1c2c <main+0x9cc>
         : 201  timefac = 9.018957925790732e-13;
    0.00 :   1693:   movsd  0x3695(%rip),%xmm6        # 4d30 <_IO_stdin_used+0xd30>
         : 199  PressFac = 70527773.72794868;
    0.00 :   169b:   movsd  0x3695(%rip),%xmm7        # 4d38 <_IO_stdin_used+0xd38>
         : 201  timefac = 9.018957925790732e-13;
    0.00 :   16a3:   movsd  %xmm6,0x20(%rsp)
         : 200  TempFac = 280.30305642163006;
    0.00 :   16a9:   movsd  0x368f(%rip),%xmm6        # 4d40 <_IO_stdin_used+0xd40>
         : 199  PressFac = 70527773.72794868;
    0.00 :   16b1:   movsd  %xmm7,0x28(%rsp)
         : 198  VolFac = 5.4872e-29;
    0.00 :   16b7:   movsd  0x3689(%rip),%xmm7        # 4d48 <_IO_stdin_used+0xd48>
         : 200  TempFac = 280.30305642163006;
    0.00 :   16bf:   movsd  %xmm6,0x18(%rsp)
         : 198  VolFac = 5.4872e-29;
    0.00 :   16c5:   movsd  %xmm7,0x40(%rsp)
    0.00 :   16cb:   jmp    14ee <main+0x28e>
    0.00 :   16d0:   lea    0x2c71(%rip),%rdi        # 4348 <_IO_stdin_used+0x348>
         : 113  printf():
    0.00 :   16d7:   call   1150 <puts@plt>
         : 113  main():
         : 229  exit(0);
    0.00 :   16dc:   xor    %edi,%edi
    0.00 :   16de:   call   1210 <exit@plt>
         : 163  if (strcmp(atype,"He")==0) {
    0.00 :   16e3:   cmpb   $0x0,0x59b8(%rip)        # 70a2 <atype+0x2>
    0.00 :   16ea:   jne    149f <main+0x23f>
         : 168  timefac = 1.7572698825166272e-12;
    0.00 :   16f0:   movsd  0x35b8(%rip),%xmm6        # 4cb0 <_IO_stdin_used+0xcb0>
         : 166  PressFac = 8152287.336171632;
    0.00 :   16f8:   movsd  0x35b8(%rip),%xmm7        # 4cb8 <_IO_stdin_used+0xcb8>
         : 168  timefac = 1.7572698825166272e-12;
    0.00 :   1700:   movsd  %xmm6,0x20(%rsp)
         : 167  TempFac = 10.864459551225972;
    0.00 :   1706:   movsd  0x35b2(%rip),%xmm6        # 4cc0 <_IO_stdin_used+0xcc0>
         : 166  PressFac = 8152287.336171632;
    0.00 :   170e:   movsd  %xmm7,0x28(%rsp)
         : 165  VolFac = 1.8399744000000005e-29;
    0.00 :   1714:   movsd  0x35ac(%rip),%xmm7        # 4cc8 <_IO_stdin_used+0xcc8>
         : 167  TempFac = 10.864459551225972;
    0.00 :   171c:   movsd  %xmm6,0x18(%rsp)
         : 165  VolFac = 1.8399744000000005e-29;
    0.00 :   1722:   movsd  %xmm7,0x40(%rsp)
    0.00 :   1728:   jmp    14ee <main+0x28e>
         : 271  }
         : 272  // Vol = L*L*L;
         : 273  // Length of the box in natural units:
         : 274  L = pow(Vol,(1./3));
    0.00 :   172d:   movsd  0x356b(%rip),%xmm1        # 4ca0 <_IO_stdin_used+0xca0>
    0.00 :   1735:   movsd  0x58(%rsp),%xmm0
         :
         : 275  //  Files that we can write different quantities to
         : 276  tfp = fopen(tfn,"w");     //  The MD trajectory, coordinates of every particle at each timestep
    0.00 :   173b:   lea    0x348f(%rip),%rbx        # 4bd1 <_IO_stdin_used+0xbd1>
         : 271  L = pow(Vol,(1./3));
    0.00 :   1742:   call   1160 <pow@plt>
         : 274  tfp = fopen(tfn,"w");     //  The MD trajectory, coordinates of every particle at each timestep
    0.00 :   1747:   mov    %rbx,%rsi
    0.00 :   174a:   mov    %r14,%rdi
         : 271  L = pow(Vol,(1./3));
    0.00 :   174d:   movsd  %xmm0,0x7aceb(%rip)        # 7c440 <L>
         : 274  tfp = fopen(tfn,"w");     //  The MD trajectory, coordinates of every particle at each timestep
    0.00 :   1755:   call   11f0 <fopen@plt>
         : 275  ofp = fopen(ofn,"w");     //  Output of other quantities (T, P, gc, etc) at every timestep
    0.00 :   175a:   mov    %rbx,%rsi
    0.00 :   175d:   mov    %r13,%rdi
         : 274  tfp = fopen(tfn,"w");     //  The MD trajectory, coordinates of every particle at each timestep
    0.00 :   1760:   mov    %rax,%r15
         : 275  ofp = fopen(ofn,"w");     //  Output of other quantities (T, P, gc, etc) at every timestep
    0.00 :   1763:   call   11f0 <fopen@plt>
         : 276  afp = fopen(afn,"w");    //  Average T, P, gc, etc from the simulation
    0.00 :   1768:   mov    0x48(%rsp),%rdi
    0.00 :   176d:   mov    %rbx,%rsi
         : 275  ofp = fopen(ofn,"w");     //  Output of other quantities (T, P, gc, etc) at every timestep
    0.00 :   1770:   mov    %rax,%rbp
         : 276  afp = fopen(afn,"w");    //  Average T, P, gc, etc from the simulation
    0.00 :   1773:   call   11f0 <fopen@plt>
         :
         : 280  int NumTime;
         : 281  if (strcmp(atype,"He")==0) {
    0.00 :   1778:   lea    0x3415(%rip),%rsi        # 4b94 <_IO_stdin_used+0xb94>
    0.00 :   177f:   mov    %r12,%rdi
         : 276  afp = fopen(afn,"w");    //  Average T, P, gc, etc from the simulation
    0.00 :   1782:   mov    %rax,0x70(%rsp)
         : 279  if (strcmp(atype,"He")==0) {
    0.00 :   1787:   call   11a0 <strcmp@plt>
    0.00 :   178c:   test   %eax,%eax
    0.00 :   178e:   je     1c0b <main+0x9ab>
         : 290  //  And NumTime*dt multiplied by the appropriate conversion factor for time in seconds
         : 291  NumTime=50000;
         : 292  }
         : 293  else {
         : 294  dt = 0.5e-14/timefac;
         : 295  NumTime=200;
    0.00 :   1794:   movl   $0xc8,0x68(%rsp)
         : 289  dt = 0.5e-14/timefac;
    0.00 :   179c:   movsd  0x35bc(%rip),%xmm0        # 4d60 <_IO_stdin_used+0xd60>
    0.00 :   17a4:   divsd  0x20(%rsp),%xmm0
    0.00 :   17aa:   movsd  %xmm0,0x10(%rsp)
         :
         : 297  }
         :
         : 299  //  Put all the atoms in simple crystal lattice and give them random velocities
         : 300  //  that corresponds to the initial temperature we have specified
         : 301  initialize();
    0.00 :   17b0:   call   32b0 <initialize()>
         :
         : 302  //  Based on their positions, calculate the ininial intermolecular forces
         : 303  //  The accellerations of each particle will be defined from the forces and their
         : 304  //  mass, and this will allow us to update their positions via Newton's law
         : 305  computeAccelerations();
    0.00 :   17b5:   call   2650 <computeAccelerations()>
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   17ba:   mov    0x7ac88(%rip),%ecx        # 7c448 <N>
         : 107  fprintf():
    0.00 :   17c0:   mov    %r15,%rdi
    0.00 :   17c3:   xor    %eax,%eax
    0.00 :   17c5:   lea    0x3407(%rip),%rdx        # 4bd3 <_IO_stdin_used+0xbd3>
    0.00 :   17cc:   mov    $0x1,%esi
    0.00 :   17d1:   call   1230 <__fprintf_chk@plt>
         : 110  main():
         : 313  //  The variables need to be set to zero initially
         : 314  Pavg = 0;
         : 315  Tavg = 0;
         :
         :
         : 318  int tenp = floor(NumTime/10);
    0.00 :   17d6:   mov    0x68(%rsp),%eax
    0.00 :   17da:   mov    $0xa,%ecx
    0.00 :   17df:   mov    $0x1,%esi
         : 106  fprintf():
    0.00 :   17e4:   lea    0x2dad(%rip),%rdi        # 4598 <_IO_stdin_used+0x598>
         : 106  main():
    0.00 :   17eb:   cltd
    0.00 :   17ec:   idiv   %ecx
         : 315  fprintf():
    0.00 :   17ee:   mov    %rbp,%rcx
    0.00 :   17f1:   mov    $0x7f,%edx
         : 107  main():
    0.00 :   17f6:   mov    %eax,(%rsp)
         : 314  fprintf():
    0.00 :   17f9:   call   1220 <fwrite@plt>
         : 106  main():
         : 112  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   17fe:   lea    0x2e13(%rip),%rsi        # 4618 <_IO_stdin_used+0x618>
         : 114  printf():
    0.00 :   1805:   mov    $0x1,%edi
    0.00 :   180a:   xor    %eax,%eax
    0.00 :   180c:   call   11e0 <__printf_chk@plt>
         : 115  main():
         : 320  printf("  PERCENTAGE OF CALCULATION COMPLETE:\n  [");
         : 321  for (i=0; i<NumTime+1; i++) {
         :
         : 323  //  This just prints updates on progress of the calculation for the users convenience
         : 324  if (i==tenp) printf(" 10 |");
         : 325  else if (i==2*tenp) printf(" 20 |");
    0.00 :   1811:   mov    (%rsp),%ecx
    0.00 :   1814:   mov    0x68(%rsp),%eax
         : 310  Tavg = 0;
    0.00 :   1818:   pxor   %xmm6,%xmm6
    0.00 :   181c:   mov    %r13,0x80(%rsp)
         : 320  else if (i==2*tenp) printf(" 20 |");
    0.00 :   1824:   lea    (%rcx,%rcx,1),%ebx
    0.00 :   1827:   add    $0x1,%eax
    0.00 :   182a:   mov    %ecx,%r13d
         : 310  Tavg = 0;
    0.00 :   182d:   movsd  %xmm6,(%rsp)
         : 320  else if (i==2*tenp) printf(" 20 |");
    0.00 :   1832:   mov    %ebx,0x30(%rsp)
         : 321  else if (i==3*tenp) printf(" 30 |");
    0.00 :   1836:   lea    (%rcx,%rcx,2),%ebx
    0.00 :   1839:   mov    %ebx,0x3c(%rsp)
         : 322  else if (i==4*tenp) printf(" 40 |");
    0.00 :   183d:   lea    0x0(,%rcx,4),%ebx
    0.00 :   1844:   mov    %ebx,0x50(%rsp)
         : 323  else if (i==5*tenp) printf(" 50 |");
    0.00 :   1848:   lea    (%rcx,%rcx,4),%ebx
    0.00 :   184b:   mov    %ebx,0x54(%rsp)
         : 324  else if (i==6*tenp) printf(" 60 |");
    0.00 :   184f:   imul   $0x6,%ecx,%ebx
    0.00 :   1852:   mov    %r14,0x88(%rsp)
    0.00 :   185a:   mov    %eax,%r14d
         : 309  Pavg = 0;
    0.00 :   185d:   movsd  %xmm6,0x8(%rsp)
         : 324  else if (i==6*tenp) printf(" 60 |");
    0.00 :   1863:   mov    %ebx,0x60(%rsp)
         : 325  else if (i==7*tenp) printf(" 70 |");
    0.00 :   1867:   imul   $0x7,%ecx,%ebx
    0.00 :   186a:   mov    %ebx,0x64(%rsp)
         : 326  else if (i==8*tenp) printf(" 80 |");
    0.00 :   186e:   lea    0x0(,%rcx,8),%ebx
    0.00 :   1875:   mov    %ebx,0x6c(%rsp)
         : 327  else if (i==9*tenp) printf(" 90 |");
    0.00 :   1879:   lea    (%rcx,%rcx,8),%ebx
    0.00 :   187c:   mov    %ebx,0x78(%rsp)
         : 328  else if (i==10*tenp) printf(" 100 ]\n");
    0.00 :   1880:   imul   $0xa,%ecx,%ebx
    0.00 :   1883:   mov    %ebx,0x7c(%rsp)
         : 316  for (i=0; i<NumTime+1; i++) {
    0.00 :   1887:   xor    %ebx,%ebx
         : 319  if (i==tenp) printf(" 10 |");
    0.00 :   1889:   cmp    %ebx,%r13d
    0.00 :   188c:   je     1bf3 <main+0x993>
    0.00 :   1892:   nopw   0x0(%rax,%rax,1)
         : 320  else if (i==2*tenp) printf(" 20 |");
    0.00 :   1898:   cmp    %ebx,0x30(%rsp)
    0.00 :   189c:   je     1cb3 <main+0xa53>
         : 321  else if (i==3*tenp) printf(" 30 |");
    0.00 :   18a2:   cmp    %ebx,0x3c(%rsp)
    0.00 :   18a6:   je     1ccb <main+0xa6b>
         : 322  else if (i==4*tenp) printf(" 40 |");
    0.00 :   18ac:   cmp    %ebx,0x50(%rsp)
    0.00 :   18b0:   je     1fbd <main+0xd5d>
         : 323  else if (i==5*tenp) printf(" 50 |");
    0.00 :   18b6:   cmp    %ebx,0x54(%rsp)
    0.00 :   18ba:   je     1ffa <main+0xd9a>
         : 324  else if (i==6*tenp) printf(" 60 |");
    0.00 :   18c0:   cmp    %ebx,0x60(%rsp)
    0.00 :   18c4:   je     202c <main+0xdcc>
         : 325  else if (i==7*tenp) printf(" 70 |");
    0.00 :   18ca:   cmp    %ebx,0x64(%rsp)
    0.00 :   18ce:   je     2044 <main+0xde4>
         : 326  else if (i==8*tenp) printf(" 80 |");
    0.00 :   18d4:   cmp    %ebx,0x6c(%rsp)
    0.00 :   18d8:   je     205c <main+0xdfc>
         : 327  else if (i==9*tenp) printf(" 90 |");
    0.00 :   18de:   cmp    %ebx,0x78(%rsp)
    0.00 :   18e2:   je     2074 <main+0xe14>
         : 328  else if (i==10*tenp) printf(" 100 ]\n");
    0.00 :   18e8:   cmp    %ebx,0x7c(%rsp)
    0.00 :   18ec:   je     208c <main+0xe2c>
    0.00 :   18f2:   nopw   0x0(%rax,%rax,1)
         : 329  fflush(stdout);
    0.00 :   18f8:   mov    0x5761(%rip),%rdi        # 7060 <stdout@GLIBC_2.2.5>
         :
         :
         : 337  // This updates the positions and velocities using Newton's Laws
         : 338  // Also computes the Pressure as the sum of momentum changes from wall collisions / timestep
         : 339  // which is a Kinetic Theory of gasses concept of Pressure
         : 340  Press = VelocityVerlet(dt, i+1, tfp);
    0.00 :   18ff:   lea    0x1(%rbx),%r12d
         : 329  fflush(stdout);
    0.00 :   1903:   call   11d0 <fflush@plt>
         : 335  Press = VelocityVerlet(dt, i+1, tfp);
    0.00 :   1908:   movsd  0x10(%rsp),%xmm0
    0.00 :   190e:   mov    %r15,%rsi
    0.00 :   1911:   mov    %r12d,%edi
    0.00 :   1914:   call   27e0 <VelocityVerlet(double, int, _IO_FILE*)>
         : 336  Press *= PressFac;
    0.00 :   1919:   mulsd  0x28(%rsp),%xmm0
         : 338  MeanSquaredVelocity():
         : 452  double vx2 = 0;
         : 453  double vy2 = 0;
         : 454  double vz2 = 0;
         : 455  double v2;
         :
         : 457  for (int i=0; i<N; i++) {
    0.00 :   191f:   mov    0x7ab23(%rip),%esi        # 7c448 <N>
    0.00 :   1925:   pxor   %xmm6,%xmm6
    0.00 :   1929:   test   %esi,%esi
         : 461  main():
         : 336  Press *= PressFac;
    0.00 :   192b:   movapd %xmm0,%xmm10
         : 338  MeanSquaredVelocity():
         : 452  for (int i=0; i<N; i++) {
    0.00 :   1930:   jle    1fd5 <main+0xd75>
    0.00 :   1936:   cmp    $0x1,%esi
    0.00 :   1939:   je     2012 <main+0xdb2>
         : 448  double vy2 = 0;
    0.00 :   193f:   movapd %xmm6,%xmm4
         : 447  double vx2 = 0;
    0.00 :   1943:   movapd %xmm6,%xmm5
    0.00 :   1947:   movapd %xmm6,%xmm8
    0.00 :   194c:   mov    %esi,%edi
    0.00 :   194e:   shr    %edi
    0.00 :   1950:   lea    0x40129(%rip),%rdx        # 41a80 <v>
    0.00 :   1957:   sub    $0x1,%edi
    0.00 :   195a:   lea    0x30(%rdx),%r8
    0.00 :   195e:   mov    %rdx,%rax
    0.00 :   1961:   lea    (%rdi,%rdi,2),%rdi
    0.00 :   1965:   shl    $0x4,%rdi
    0.00 :   1969:   add    %r8,%rdi
    0.00 :   196c:   nopl   0x0(%rax)
         :
         : 455  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   1970:   movapd (%rax),%xmm7
    0.00 :   1974:   movapd 0x10(%rax),%xmm0
    0.00 :   1979:   add    $0x30,%rax
    0.00 :   197d:   movapd %xmm7,%xmm2
    0.00 :   1981:   movhps -0x18(%rax),%xmm2
    0.00 :   1985:   unpcklpd %xmm7,%xmm0
    0.00 :   1989:   movhps -0x8(%rax),%xmm0
    0.00 :   198d:   movapd %xmm7,%xmm1
   25.33 :   1991:   mulpd  %xmm2,%xmm2
    0.00 :   1995:   shufpd $0x1,%xmm7,%xmm1
    0.00 :   199a:   movhpd -0x10(%rax),%xmm1
         : 456  vy2 = vy2 + v[i][1]*v[i][1];
         : 457  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   199f:   mulpd  %xmm0,%xmm0
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   19a3:   mulpd  %xmm1,%xmm1
    0.00 :   19a7:   movapd %xmm2,%xmm3
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   19ab:   unpckhpd %xmm2,%xmm2
    0.00 :   19af:   addsd  %xmm5,%xmm3
    0.00 :   19b3:   movapd %xmm2,%xmm5
    0.00 :   19b7:   movapd %xmm1,%xmm2
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   19bb:   unpckhpd %xmm1,%xmm1
    0.00 :   19bf:   addsd  %xmm4,%xmm2
    0.00 :   19c3:   movapd %xmm1,%xmm4
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   19c7:   addsd  %xmm3,%xmm5
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   19cb:   movapd %xmm0,%xmm3
         : 456  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   19cf:   unpckhpd %xmm0,%xmm0
    0.00 :   19d3:   addsd  %xmm8,%xmm3
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   19d8:   addsd  %xmm2,%xmm4
         : 456  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   19dc:   addsd  %xmm3,%xmm0
    0.00 :   19e0:   movapd %xmm0,%xmm8
         : 452  for (int i=0; i<N; i++) {
    0.00 :   19e5:   cmp    %rdi,%rax
    0.00 :   19e8:   jne    1970 <main+0x710>
    0.00 :   19ea:   mov    %esi,%eax
    0.00 :   19ec:   movapd %xmm0,%xmm3
    0.00 :   19f0:   and    $0xfffffffe,%eax
    0.00 :   19f3:   cmp    %eax,%esi
    0.00 :   19f5:   je     1c8c <main+0xa2c>
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   19fb:   cltq
    0.00 :   19fd:   lea    0x400ac(%rip),%r8        # 41ab0 <v+0x30>
         : 457  Kinetic():
         : 480  for (int j=0; j<3; j++) {
         :
         : 482  v2 += v[i][j]*v[i][j];
         :
         : 484  }
         : 485  kin += m*v2/2.;
    0.00 :   1a04:   movsd  0x561b(%rip),%xmm12        # 7028 <m>
         : 487  MeanSquaredVelocity():
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   1a0d:   lea    (%rax,%rax,2),%rax
    0.00 :   1a11:   lea    (%rdx,%rax,8),%rax
    0.00 :   1a15:   movsd  (%rax),%xmm0
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   1a19:   movsd  0x8(%rax),%xmm2
         : 456  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   1a1e:   movsd  0x10(%rax),%xmm1
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   1a23:   mulsd  %xmm0,%xmm0
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   1a27:   mulsd  %xmm2,%xmm2
         : 456  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   1a2b:   mulsd  %xmm1,%xmm1
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   1a2f:   addsd  %xmm5,%xmm0
         : 455  vy2 = vy2 + v[i][1]*v[i][1];
    0.00 :   1a33:   addsd  %xmm4,%xmm2
         : 456  vz2 = vz2 + v[i][2]*v[i][2];
    0.00 :   1a37:   addsd  %xmm3,%xmm1
         : 454  vx2 = vx2 + v[i][0]*v[i][0];
    0.00 :   1a3b:   movapd %xmm0,%xmm9
         : 459  v2 = (vx2+vy2+vz2)/N;
    0.00 :   1a40:   pxor   %xmm0,%xmm0
    0.00 :   1a44:   cvtsi2sd %esi,%xmm0
    0.00 :   1a48:   addsd  %xmm2,%xmm9
    0.00 :   1a4d:   addsd  %xmm1,%xmm9
    0.00 :   1a52:   divsd  %xmm0,%xmm9
         : 465  Kinetic():
         : 472  for (int i=0; i<N; i++) {
    0.00 :   1a57:   cmp    $0x1,%esi
    0.00 :   1a5a:   je     1c80 <main+0xa20>
    0.00 :   1a60:   movapd %xmm12,%xmm3
         : 480  kin += m*v2/2.;
    0.00 :   1a65:   movapd %xmm6,%xmm11
         : 477  v2 += v[i][j]*v[i][j];
    0.00 :   1a6a:   pxor   %xmm2,%xmm2
    0.00 :   1a6e:   mov    %esi,%edi
    0.00 :   1a70:   shr    %edi
    0.00 :   1a72:   unpcklpd %xmm3,%xmm3
    0.00 :   1a76:   lea    0x40003(%rip),%rax        # 41a80 <v>
    0.00 :   1a7d:   sub    $0x1,%edi
    0.00 :   1a80:   lea    (%rdi,%rdi,2),%rdi
    0.00 :   1a84:   shl    $0x4,%rdi
    0.00 :   1a88:   add    %r8,%rdi
    0.00 :   1a8b:   nopl   0x0(%rax,%rax,1)
    0.00 :   1a90:   movapd (%rax),%xmm4
    0.00 :   1a94:   movapd 0x10(%rax),%xmm0
    0.00 :   1a99:   add    $0x30,%rax
    0.00 :   1a9d:   movapd %xmm4,%xmm1
   24.64 :   1aa1:   movhps -0x18(%rax),%xmm1
    0.00 :   1aa5:   movapd %xmm4,%xmm5
    0.00 :   1aa9:   unpcklpd %xmm4,%xmm0
    0.00 :   1aad:   shufpd $0x1,%xmm4,%xmm5
    0.00 :   1ab2:   movhpd -0x10(%rax),%xmm5
    0.00 :   1ab7:   movapd %xmm0,%xmm4
    0.00 :   1abb:   movhps -0x8(%rax),%xmm4
    0.00 :   1abf:   mulpd  %xmm1,%xmm1
    0.00 :   1ac3:   mulpd  %xmm5,%xmm5
    0.00 :   1ac7:   mulpd  %xmm4,%xmm4
    0.00 :   1acb:   movapd %xmm1,%xmm0
    0.00 :   1acf:   addpd  %xmm2,%xmm0
   24.49 :   1ad3:   addpd  %xmm5,%xmm0
    0.00 :   1ad7:   addpd  %xmm4,%xmm0
         : 480  kin += m*v2/2.;
    0.00 :   1adb:   mulpd  %xmm3,%xmm0
    0.00 :   1adf:   mulpd  0x3149(%rip),%xmm0        # 4c30 <_IO_stdin_used+0xc30>
   25.55 :   1ae7:   movapd %xmm0,%xmm1
    0.00 :   1aeb:   unpckhpd %xmm0,%xmm0
    0.00 :   1aef:   addsd  %xmm11,%xmm1
    0.00 :   1af4:   addsd  %xmm1,%xmm0
    0.00 :   1af8:   movapd %xmm0,%xmm11
         : 472  for (int i=0; i<N; i++) {
    0.00 :   1afd:   cmp    %rax,%rdi
    0.00 :   1b00:   jne    1a90 <main+0x830>
    0.00 :   1b02:   mov    %esi,%eax
    0.00 :   1b04:   and    $0xfffffffe,%eax
    0.00 :   1b07:   and    $0x1,%esi
    0.00 :   1b0a:   je     1b52 <main+0x8f2>
         : 477  v2 += v[i][j]*v[i][j];
    0.00 :   1b0c:   cltq
    0.00 :   1b0e:   lea    (%rax,%rax,2),%rax
    0.00 :   1b12:   lea    (%rdx,%rax,8),%rax
    0.00 :   1b16:   movsd  (%rax),%xmm0
    0.00 :   1b1a:   mulsd  %xmm0,%xmm0
    0.00 :   1b1e:   movapd %xmm0,%xmm1
    0.00 :   1b22:   movsd  0x8(%rax),%xmm0
    0.00 :   1b27:   addsd  %xmm6,%xmm1
    0.00 :   1b2b:   mulsd  %xmm0,%xmm0
    0.00 :   1b2f:   addsd  %xmm0,%xmm1
    0.00 :   1b33:   movsd  0x10(%rax),%xmm0
    0.00 :   1b38:   mulsd  %xmm0,%xmm0
    0.00 :   1b3c:   addsd  %xmm1,%xmm0
         : 480  kin += m*v2/2.;
    0.00 :   1b40:   mulsd  %xmm12,%xmm0
    0.00 :   1b45:   mulsd  0x30e3(%rip),%xmm0        # 4c30 <_IO_stdin_used+0xc30>
    0.00 :   1b4d:   addsd  %xmm0,%xmm11
         : 484  main():
         : 345  PE = Potential();
    0.00 :   1b52:   call   2530 <Potential()>
         : 348  Temp = m*mvs/(3*kB) * TempFac;
    0.00 :   1b57:   movapd %xmm9,%xmm1
         : 356  Tavg += Temp;
    0.00 :   1b5c:   movsd  (%rsp),%xmm6
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   1b61:   movapd %xmm11,%xmm5
         : 345  PE = Potential();
    0.00 :   1b66:   movapd %xmm0,%xmm4
         : 348  Temp = m*mvs/(3*kB) * TempFac;
    0.00 :   1b6a:   movsd  0x31f6(%rip),%xmm0        # 4d68 <_IO_stdin_used+0xd68>
         : 350  fprintf():
    0.00 :   1b72:   mov    %rbp,%rdi
    0.00 :   1b75:   movapd %xmm11,%xmm3
         : 107  main():
    0.00 :   1b7a:   mulsd  %xmm12,%xmm1
         : 349  fprintf():
    0.00 :   1b7f:   addsd  %xmm4,%xmm5
    0.00 :   1b83:   movapd %xmm10,%xmm2
    0.00 :   1b88:   mov    $0x1,%esi
         : 108  main():
    0.00 :   1b8d:   mulsd  0x548b(%rip),%xmm0        # 7020 <kB>
         : 349  fprintf():
    0.00 :   1b95:   lea    0x2aac(%rip),%rdx        # 4648 <_IO_stdin_used+0x648>
    0.00 :   1b9c:   mov    $0x6,%eax
         : 107  main():
    0.00 :   1ba1:   divsd  %xmm0,%xmm1
         : 359  fprintf(ofp,"  %8.4e  %20.12g  %20.12g %20.12g  %20.12g  %20.12g \n",i*dt*timefac,Temp,Press,KE, PE, KE+PE);
    0.00 :   1ba5:   pxor   %xmm0,%xmm0
    0.00 :   1ba9:   cvtsi2sd %ebx,%xmm0
    0.00 :   1bad:   mulsd  0x10(%rsp),%xmm0
    0.00 :   1bb3:   mulsd  0x20(%rsp),%xmm0
         : 348  Temp = m*mvs/(3*kB) * TempFac;
    0.00 :   1bb9:   mulsd  0x18(%rsp),%xmm1
         : 356  Tavg += Temp;
    0.00 :   1bbf:   addsd  %xmm1,%xmm6
    0.00 :   1bc3:   movsd  %xmm6,(%rsp)
         : 357  Pavg += Press;
    0.00 :   1bc8:   movsd  0x8(%rsp),%xmm6
    0.00 :   1bce:   addsd  %xmm10,%xmm6
    0.00 :   1bd3:   movsd  %xmm6,0x8(%rsp)
         : 361  fprintf():
    0.00 :   1bd9:   call   1230 <__fprintf_chk@plt>
         : 106  main():
         : 316  for (i=0; i<NumTime+1; i++) {
    0.00 :   1bde:   cmp    %r14d,%r12d
    0.00 :   1be1:   je     1ce3 <main+0xa83>
    0.00 :   1be7:   mov    %r12d,%ebx
         : 319  if (i==tenp) printf(" 10 |");
    0.00 :   1bea:   cmp    %ebx,%r13d
    0.00 :   1bed:   jne    1898 <main+0x638>
         : 112  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   1bf3:   lea    0x2fdd(%rip),%rsi        # 4bd7 <_IO_stdin_used+0xbd7>
         : 114  printf():
    0.00 :   1bfa:   mov    $0x1,%edi
    0.00 :   1bff:   xor    %eax,%eax
    0.00 :   1c01:   call   11e0 <__printf_chk@plt>
    0.00 :   1c06:   jmp    18f8 <main+0x698>
         : 116  main():
         : 282  dt = 0.2e-14/timefac;
    0.00 :   1c0b:   movsd  0x3145(%rip),%xmm0        # 4d58 <_IO_stdin_used+0xd58>
         : 286  NumTime=50000;
    0.00 :   1c13:   movl   $0xc350,0x68(%rsp)
         : 282  dt = 0.2e-14/timefac;
    0.00 :   1c1b:   divsd  0x20(%rsp),%xmm0
    0.00 :   1c21:   movsd  %xmm0,0x10(%rsp)
         : 286  NumTime=50000;
    0.00 :   1c27:   jmp    17b0 <main+0x550>
         : 79   return __builtin___strcpy_chk (__dest, __src, __glibc_objsize (__dest));
    0.00 :   1c2c:   movw   $0x7241,0x546b(%rip)        # 70a0 <atype>
         : 81   strcpy():
    0.00 :   1c35:   movb   $0x0,0x5466(%rip)        # 70a2 <atype+0x2>
         : 80   main():
         : 184  timefac = 2.09618e-12;
    0.00 :   1c3c:   movsd  0x30ac(%rip),%xmm6        # 4cf0 <_IO_stdin_used+0xcf0>
         : 182  PressFac = 51695201.06691862;
    0.00 :   1c44:   movsd  0x30ac(%rip),%xmm7        # 4cf8 <_IO_stdin_used+0xcf8>
         : 184  timefac = 2.09618e-12;
    0.00 :   1c4c:   movsd  %xmm6,0x20(%rsp)
         : 183  TempFac = 142.0950000000000;
    0.00 :   1c52:   movsd  0x30a6(%rip),%xmm6        # 4d00 <_IO_stdin_used+0xd00>
         : 182  PressFac = 51695201.06691862;
    0.00 :   1c5a:   movsd  %xmm7,0x28(%rsp)
         : 181  VolFac = 3.7949992920124995e-29;
    0.00 :   1c60:   movsd  0x30a0(%rip),%xmm7        # 4d08 <_IO_stdin_used+0xd08>
         : 183  TempFac = 142.0950000000000;
    0.00 :   1c68:   movsd  %xmm6,0x18(%rsp)
         : 181  VolFac = 3.7949992920124995e-29;
    0.00 :   1c6e:   movsd  %xmm7,0x40(%rsp)
    0.00 :   1c74:   jmp    14ee <main+0x28e>
    0.00 :   1c79:   nopl   0x0(%rax)
         : 185  Kinetic():
         : 480  kin += m*v2/2.;
    0.00 :   1c80:   movapd %xmm6,%xmm11
    0.00 :   1c85:   xor    %eax,%eax
    0.00 :   1c87:   jmp    1b0c <main+0x8ac>
    0.00 :   1c8c:   movsd  0x5393(%rip),%xmm12        # 7028 <m>
         : 485  MeanSquaredVelocity():
         : 459  v2 = (vx2+vy2+vz2)/N;
    0.00 :   1c95:   addsd  %xmm4,%xmm5
    0.00 :   1c99:   addsd  %xmm0,%xmm5
    0.00 :   1c9d:   pxor   %xmm0,%xmm0
    0.00 :   1ca1:   cvtsi2sd %esi,%xmm0
    0.00 :   1ca5:   divsd  %xmm0,%xmm5
    0.00 :   1ca9:   movapd %xmm5,%xmm9
         : 466  Kinetic():
         : 472  for (int i=0; i<N; i++) {
    0.00 :   1cae:   jmp    1a60 <main+0x800>
         : 474  main():
    0.00 :   1cb3:   lea    0x2f23(%rip),%rsi        # 4bdd <_IO_stdin_used+0xbdd>
         : 113  printf():
    0.00 :   1cba:   mov    $0x1,%edi
    0.00 :   1cbf:   xor    %eax,%eax
    0.00 :   1cc1:   call   11e0 <__printf_chk@plt>
    0.00 :   1cc6:   jmp    18f8 <main+0x698>
         : 116  main():
    0.00 :   1ccb:   lea    0x2f11(%rip),%rsi        # 4be3 <_IO_stdin_used+0xbe3>
         : 113  printf():
    0.00 :   1cd2:   mov    $0x1,%edi
    0.00 :   1cd7:   xor    %eax,%eax
    0.00 :   1cd9:   call   11e0 <__printf_chk@plt>
    0.00 :   1cde:   jmp    18f8 <main+0x698>
         : 116  main():
         : 364  Pavg /= NumTime;
    0.00 :   1ce3:   pxor   %xmm0,%xmm0
    0.00 :   1ce7:   movsd  0x8(%rsp),%xmm2
         : 365  Tavg /= NumTime;
    0.00 :   1ced:   movsd  (%rsp),%xmm1
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   1cf2:   mov    $0xb4,%edx
         : 364  Pavg /= NumTime;
    0.00 :   1cf7:   cvtsi2sdl 0x68(%rsp),%xmm0
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1cfd:   movsd  0x40(%rsp),%xmm5
    0.00 :   1d03:   mulsd  0x58(%rsp),%xmm5
         : 369  fprintf():
    0.00 :   1d09:   mov    $0x1,%esi
         : 106  main():
    0.00 :   1d0e:   movsd  0x52fa(%rip),%xmm3        # 7010 <kBSI>
         : 367  fprintf():
    0.00 :   1d16:   mov    0x70(%rsp),%rbx
    0.00 :   1d1b:   lea    0x295e(%rip),%rdi        # 4680 <_IO_stdin_used+0x680>
         : 107  main():
         : 364  Pavg /= NumTime;
    0.00 :   1d22:   mov    0x80(%rsp),%r13
    0.00 :   1d2a:   mov    0x88(%rsp),%r14
         : 367  fprintf():
    0.00 :   1d32:   mov    %rbx,%rcx
         : 106  main():
    0.00 :   1d35:   divsd  %xmm0,%xmm2
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1d39:   movapd %xmm5,%xmm4
         : 367  gc = NA*Pavg*(Vol*VolFac)/(N*Tavg);
    0.00 :   1d3d:   movsd  %xmm5,0x8(%rsp)
         : 365  Tavg /= NumTime;
    0.00 :   1d43:   divsd  %xmm0,%xmm1
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1d47:   pxor   %xmm0,%xmm0
    0.00 :   1d4b:   cvtsi2sdl 0x7a6f5(%rip),%xmm0        # 7c448 <N>
    0.00 :   1d53:   mulsd  %xmm0,%xmm3
    0.00 :   1d57:   mulsd  %xmm2,%xmm4
         : 367  gc = NA*Pavg*(Vol*VolFac)/(N*Tavg);
    0.00 :   1d5b:   movsd  %xmm2,0x30(%rsp)
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1d61:   mulsd  %xmm1,%xmm3
         : 367  gc = NA*Pavg*(Vol*VolFac)/(N*Tavg);
    0.00 :   1d65:   movsd  %xmm1,0x28(%rsp)
    0.00 :   1d6b:   mulsd  %xmm1,%xmm0
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1d6f:   divsd  %xmm3,%xmm4
         : 367  gc = NA*Pavg*(Vol*VolFac)/(N*Tavg);
    0.00 :   1d73:   movapd %xmm2,%xmm3
    0.00 :   1d77:   mulsd  0x5299(%rip),%xmm3        # 7018 <NA>
    0.00 :   1d7f:   mulsd  %xmm5,%xmm3
    0.00 :   1d83:   divsd  %xmm0,%xmm3
         : 366  Z = Pavg*(Vol*VolFac)/(N*kBSI*Tavg);
    0.00 :   1d87:   movsd  %xmm4,0x18(%rsp)
         : 367  gc = NA*Pavg*(Vol*VolFac)/(N*Tavg);
    0.00 :   1d8d:   movsd  %xmm3,(%rsp)
         : 369  fprintf():
    0.00 :   1d92:   call   1220 <fwrite@plt>
         : 106  main():
    0.00 :   1d97:   mov    %rbx,%rcx
         : 106  fprintf():
    0.00 :   1d9a:   mov    $0xc1,%edx
    0.00 :   1d9f:   mov    $0x1,%esi
    0.00 :   1da4:   lea    0x298d(%rip),%rdi        # 4738 <_IO_stdin_used+0x738>
    0.00 :   1dab:   call   1220 <fwrite@plt>
         : 109  main():
         : 370  fprintf(afp,"  %8.12e       %15.12g              %15.12g       %10.12g              %10.12g             %10.12e          %i\n",i*dt*timefac,Tavg,Pavg,gc,Z,Vol*VolFac,N);
    0.00 :   1db0:   pxor   %xmm0,%xmm0
    0.00 :   1db4:   movsd  (%rsp),%xmm3
         : 106  fprintf():
    0.00 :   1db9:   movsd  0x8(%rsp),%xmm5
         : 106  main():
    0.00 :   1dbf:   cvtsi2sd %r12d,%xmm0
    0.00 :   1dc4:   mulsd  0x10(%rsp),%xmm0
         : 372  fprintf():
    0.00 :   1dca:   mov    %rbx,%rdi
    0.00 :   1dcd:   movsd  0x18(%rsp),%xmm4
         : 107  main():
    0.00 :   1dd3:   mulsd  0x20(%rsp),%xmm0
         : 371  fprintf():
    0.00 :   1dd9:   mov    0x7a669(%rip),%ecx        # 7c448 <N>
    0.00 :   1ddf:   lea    0x2a1a(%rip),%rdx        # 4800 <_IO_stdin_used+0x800>
    0.00 :   1de6:   mov    $0x1,%esi
    0.00 :   1deb:   movsd  0x30(%rsp),%xmm2
    0.00 :   1df1:   movsd  0x28(%rsp),%xmm1
    0.00 :   1df7:   mov    $0x6,%eax
    0.00 :   1dfc:   movsd  %xmm5,0x20(%rsp)
    0.00 :   1e02:   movsd  %xmm3,0x10(%rsp)
    0.00 :   1e08:   movsd  %xmm2,0x8(%rsp)
    0.00 :   1e0e:   movsd  %xmm1,(%rsp)
    0.00 :   1e13:   call   1230 <__fprintf_chk@plt>
         : 116  main():
         : 112  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   1e18:   mov    %r14,%rdx
         : 114  printf():
    0.00 :   1e1b:   mov    $0x1,%edi
    0.00 :   1e20:   xor    %eax,%eax
    0.00 :   1e22:   lea    0x2a47(%rip),%rsi        # 4870 <_IO_stdin_used+0x870>
    0.00 :   1e29:   call   11e0 <__printf_chk@plt>
         : 116  main():
    0.00 :   1e2e:   mov    %r13,%rdx
         : 113  printf():
    0.00 :   1e31:   mov    $0x1,%edi
    0.00 :   1e36:   xor    %eax,%eax
    0.00 :   1e38:   lea    0x2a91(%rip),%rsi        # 48d0 <_IO_stdin_used+0x8d0>
    0.00 :   1e3f:   call   11e0 <__printf_chk@plt>
         : 116  main():
    0.00 :   1e44:   mov    0x48(%rsp),%rdx
         : 113  printf():
    0.00 :   1e49:   lea    0x2b10(%rip),%rsi        # 4960 <_IO_stdin_used+0x960>
    0.00 :   1e50:   xor    %eax,%eax
    0.00 :   1e52:   mov    $0x1,%edi
    0.00 :   1e57:   call   11e0 <__printf_chk@plt>
         : 116  main():
    0.00 :   1e5c:   movsd  (%rsp),%xmm1
         : 113  printf():
    0.00 :   1e61:   mov    $0x1,%edi
    0.00 :   1e66:   lea    0x2b53(%rip),%rsi        # 49c0 <_IO_stdin_used+0x9c0>
    0.00 :   1e6d:   mov    $0x1,%eax
    0.00 :   1e72:   movapd %xmm1,%xmm0
    0.00 :   1e76:   call   11e0 <__printf_chk@plt>
         : 117  main():
    0.00 :   1e7b:   movsd  0x8(%rsp),%xmm2
         : 113  printf():
    0.00 :   1e81:   mov    $0x1,%edi
    0.00 :   1e86:   lea    0x2b6b(%rip),%rsi        # 49f8 <_IO_stdin_used+0x9f8>
    0.00 :   1e8d:   mov    $0x1,%eax
    0.00 :   1e92:   movapd %xmm2,%xmm0
    0.00 :   1e96:   call   11e0 <__printf_chk@plt>
         : 117  main():
    0.00 :   1e9b:   movsd  0x10(%rsp),%xmm3
         : 113  printf():
    0.00 :   1ea1:   mov    $0x1,%edi
    0.00 :   1ea6:   lea    0x2b83(%rip),%rsi        # 4a30 <_IO_stdin_used+0xa30>
    0.00 :   1ead:   mov    $0x1,%eax
    0.00 :   1eb2:   movapd %xmm3,%xmm0
    0.00 :   1eb6:   movsd  %xmm3,(%rsp)
    0.00 :   1ebb:   call   11e0 <__printf_chk@plt>
         : 118  main():
         : 378  printf("\n  PERCENT ERROR of pV/nT AND GAS CONSTANT: %15.12f\n",100*my_fabs(gc-8.3144598)/8.3144598); // NOTA: molar gas constant,
    0.00 :   1ec0:   movsd  (%rsp),%xmm3
         : 380  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   1ec5:   pxor   %xmm6,%xmm6
         : 89   main():
         : 378  printf("\n  PERCENT ERROR of pV/nT AND GAS CONSTANT: %15.12f\n",100*my_fabs(gc-8.3144598)/8.3144598); // NOTA: molar gas constant,
    0.00 :   1ec9:   movsd  0x2e9f(%rip),%xmm0        # 4d70 <_IO_stdin_used+0xd70>
         : 380  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   1ed1:   movsd  0x18(%rsp),%xmm4
    0.00 :   1ed7:   movsd  0x20(%rsp),%xmm5
         : 90   main():
         : 378  printf("\n  PERCENT ERROR of pV/nT AND GAS CONSTANT: %15.12f\n",100*my_fabs(gc-8.3144598)/8.3144598); // NOTA: molar gas constant,
    0.00 :   1edd:   subsd  %xmm0,%xmm3
         : 380  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   1ee1:   comisd %xmm3,%xmm6
    0.00 :   1ee5:   jbe    1eef <main+0xc8f>
    0.00 :   1ee7:   xorpd  0x2d31(%rip),%xmm3        # 4c20 <_IO_stdin_used+0xc20>
         : 91   main():
    0.00 :   1eef:   mov    $0x1,%edi
         : 113  printf():
    0.00 :   1ef4:   mov    $0x1,%eax
    0.00 :   1ef9:   movsd  %xmm5,(%rsp)
    0.00 :   1efe:   lea    0x2b63(%rip),%rsi        # 4a68 <_IO_stdin_used+0xa68>
         : 115  main():
         : 378  printf("\n  PERCENT ERROR of pV/nT AND GAS CONSTANT: %15.12f\n",100*my_fabs(gc-8.3144598)/8.3144598); // NOTA: molar gas constant,
    0.00 :   1f05:   mulsd  0x2e6b(%rip),%xmm3        # 4d78 <_IO_stdin_used+0xd78>
    0.00 :   1f0d:   movsd  %xmm4,0x8(%rsp)
    0.00 :   1f13:   divsd  %xmm0,%xmm3
         : 382  printf():
    0.00 :   1f17:   movapd %xmm3,%xmm0
    0.00 :   1f1b:   call   11e0 <__printf_chk@plt>
         : 114  main():
    0.00 :   1f20:   movsd  0x8(%rsp),%xmm4
         : 113  printf():
    0.00 :   1f26:   mov    $0x1,%edi
    0.00 :   1f2b:   lea    0x2b6e(%rip),%rsi        # 4aa0 <_IO_stdin_used+0xaa0>
    0.00 :   1f32:   mov    $0x1,%eax
    0.00 :   1f37:   movapd %xmm4,%xmm0
    0.00 :   1f3b:   call   11e0 <__printf_chk@plt>
         : 117  main():
    0.00 :   1f40:   movsd  (%rsp),%xmm5
         : 113  printf():
    0.00 :   1f45:   mov    $0x1,%edi
    0.00 :   1f4a:   lea    0x2b87(%rip),%rsi        # 4ad8 <_IO_stdin_used+0xad8>
    0.00 :   1f51:   mov    $0x1,%eax
    0.00 :   1f56:   movapd %xmm5,%xmm0
    0.00 :   1f5a:   call   11e0 <__printf_chk@plt>
         : 117  main():
    0.00 :   1f5f:   mov    0x7a4e3(%rip),%edx        # 7c448 <N>
         : 113  printf():
    0.00 :   1f65:   lea    0x2ba4(%rip),%rsi        # 4b10 <_IO_stdin_used+0xb10>
    0.00 :   1f6c:   xor    %eax,%eax
    0.00 :   1f6e:   mov    $0x1,%edi
    0.00 :   1f73:   call   11e0 <__printf_chk@plt>
         : 116  main():
         : 388  fclose(tfp);
    0.00 :   1f78:   mov    %r15,%rdi
    0.00 :   1f7b:   call   1170 <fclose@plt>
         : 389  fclose(ofp);
    0.00 :   1f80:   mov    %rbp,%rdi
    0.00 :   1f83:   call   1170 <fclose@plt>
         : 390  fclose(afp);
    0.00 :   1f88:   mov    0x70(%rsp),%rdi
    0.00 :   1f8d:   call   1170 <fclose@plt>
         : 393  }
    0.00 :   1f92:   mov    0x1058(%rsp),%rax
    0.00 :   1f9a:   sub    %fs:0x28,%rax
    0.00 :   1fa3:   jne    20da <main+0xe7a>
    0.00 :   1fa9:   add    $0x1068,%rsp
    0.00 :   1fb0:   xor    %eax,%eax
    0.00 :   1fb2:   pop    %rbx
    0.00 :   1fb3:   pop    %rbp
    0.00 :   1fb4:   pop    %r12
    0.00 :   1fb6:   pop    %r13
    0.00 :   1fb8:   pop    %r14
    0.00 :   1fba:   pop    %r15
    0.00 :   1fbc:   ret
    0.00 :   1fbd:   lea    0x2c25(%rip),%rsi        # 4be9 <_IO_stdin_used+0xbe9>
         : 113  printf():
    0.00 :   1fc4:   mov    $0x1,%edi
    0.00 :   1fc9:   xor    %eax,%eax
    0.00 :   1fcb:   call   11e0 <__printf_chk@plt>
    0.00 :   1fd0:   jmp    18f8 <main+0x698>
         : 116  MeanSquaredVelocity():
         : 459  v2 = (vx2+vy2+vz2)/N;
    0.00 :   1fd5:   pxor   %xmm0,%xmm0
    0.00 :   1fd9:   movapd %xmm6,%xmm9
         : 462  Kinetic():
         : 471  kin =0.;
    0.00 :   1fde:   movapd %xmm6,%xmm11
         : 473  main():
         : 348  Temp = m*mvs/(3*kB) * TempFac;
    0.00 :   1fe3:   movsd  0x503c(%rip),%xmm12        # 7028 <m>
         : 350  MeanSquaredVelocity():
         : 459  v2 = (vx2+vy2+vz2)/N;
    0.00 :   1fec:   cvtsi2sd %esi,%xmm0
    0.00 :   1ff0:   divsd  %xmm0,%xmm9
         : 462  Kinetic():
         : 472  for (int i=0; i<N; i++) {
    0.00 :   1ff5:   jmp    1b52 <main+0x8f2>
         : 474  main():
    0.00 :   1ffa:   lea    0x2bee(%rip),%rsi        # 4bef <_IO_stdin_used+0xbef>
         : 113  printf():
    0.00 :   2001:   mov    $0x1,%edi
    0.00 :   2006:   xor    %eax,%eax
    0.00 :   2008:   call   11e0 <__printf_chk@plt>
    0.00 :   200d:   jmp    18f8 <main+0x698>
         : 116  MeanSquaredVelocity():
         : 449  double vz2 = 0;
    0.00 :   2012:   movapd %xmm6,%xmm3
         : 448  double vy2 = 0;
    0.00 :   2016:   movapd %xmm6,%xmm4
         : 447  double vx2 = 0;
    0.00 :   201a:   movapd %xmm6,%xmm5
         : 452  for (int i=0; i<N; i++) {
    0.00 :   201e:   xor    %eax,%eax
    0.00 :   2020:   lea    0x3fa59(%rip),%rdx        # 41a80 <v>
    0.00 :   2027:   jmp    19fb <main+0x79b>
         : 456  main():
    0.00 :   202c:   lea    0x2bc2(%rip),%rsi        # 4bf5 <_IO_stdin_used+0xbf5>
         : 113  printf():
    0.00 :   2033:   mov    $0x1,%edi
    0.00 :   2038:   xor    %eax,%eax
    0.00 :   203a:   call   11e0 <__printf_chk@plt>
    0.00 :   203f:   jmp    18f8 <main+0x698>
         : 116  main():
    0.00 :   2044:   lea    0x2bb0(%rip),%rsi        # 4bfb <_IO_stdin_used+0xbfb>
         : 113  printf():
    0.00 :   204b:   mov    $0x1,%edi
    0.00 :   2050:   xor    %eax,%eax
    0.00 :   2052:   call   11e0 <__printf_chk@plt>
    0.00 :   2057:   jmp    18f8 <main+0x698>
         : 116  main():
    0.00 :   205c:   lea    0x2b9e(%rip),%rsi        # 4c01 <_IO_stdin_used+0xc01>
         : 113  printf():
    0.00 :   2063:   mov    $0x1,%edi
    0.00 :   2068:   xor    %eax,%eax
    0.00 :   206a:   call   11e0 <__printf_chk@plt>
    0.00 :   206f:   jmp    18f8 <main+0x698>
         : 116  main():
    0.00 :   2074:   lea    0x2b8c(%rip),%rsi        # 4c07 <_IO_stdin_used+0xc07>
         : 113  printf():
    0.00 :   207b:   mov    $0x1,%edi
    0.00 :   2080:   xor    %eax,%eax
    0.00 :   2082:   call   11e0 <__printf_chk@plt>
    0.00 :   2087:   jmp    18f8 <main+0x698>
         : 116  main():
    0.00 :   208c:   lea    0x2b7a(%rip),%rdi        # 4c0d <_IO_stdin_used+0xc0d>
         : 113  printf():
    0.00 :   2093:   call   1150 <puts@plt>
    0.00 :   2098:   jmp    18f8 <main+0x698>
         : 114  main():
         : 193  timefac = 8.051563913585078e-13;
    0.00 :   209d:   movsd  0x2c6b(%rip),%xmm6        # 4d10 <_IO_stdin_used+0xd10>
         : 191  PressFac = 59935428.40275003;
    0.00 :   20a5:   movsd  0x2c6b(%rip),%xmm7        # 4d18 <_IO_stdin_used+0xd18>
         : 193  timefac = 8.051563913585078e-13;
    0.00 :   20ad:   movsd  %xmm6,0x20(%rsp)
         : 192  TempFac = 199.1817584391428;
    0.00 :   20b3:   movsd  0x2c65(%rip),%xmm6        # 4d20 <_IO_stdin_used+0xd20>
         : 191  PressFac = 59935428.40275003;
    0.00 :   20bb:   movsd  %xmm7,0x28(%rsp)
         : 190  VolFac = 4.5882712000000004e-29;
    0.00 :   20c1:   movsd  0x2c5f(%rip),%xmm7        # 4d28 <_IO_stdin_used+0xd28>
         : 192  TempFac = 199.1817584391428;
    0.00 :   20c9:   movsd  %xmm6,0x18(%rsp)
         : 190  VolFac = 4.5882712000000004e-29;
    0.00 :   20cf:   movsd  %xmm7,0x40(%rsp)
    0.00 :   20d5:   jmp    14ee <main+0x28e>
         : 393  }
    0.00 :   20da:   call   1180 <__stack_chk_fail@plt>
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   20df:   mov    0x4f9a(%rip),%rcx        # 7080 <stderr@GLIBC_2.2.5>
         : 107  fprintf():
    0.00 :   20e6:   mov    $0x15,%edx
    0.00 :   20eb:   mov    $0x1,%esi
    0.00 :   20f0:   lea    0x2ab0(%rip),%rdi        # 4ba7 <_IO_stdin_used+0xba7>
    0.00 :   20f7:   call   1220 <fwrite@plt>
         : 109  main():
         : 223  exit(1);
    0.00 :   20fc:   mov    $0x1,%edi
    0.00 :   2101:   call   1210 <exit@plt>
    0.00 :   2106:   mov    0x4f73(%rip),%rcx        # 7080 <stderr@GLIBC_2.2.5>
         : 106  fprintf():
    0.00 :   210d:   mov    $0x13,%edx
    0.00 :   2112:   mov    $0x1,%esi
    0.00 :   2117:   lea    0x2a9f(%rip),%rdi        # 4bbd <_IO_stdin_used+0xbbd>
    0.00 :   211e:   call   1220 <fwrite@plt>
         : 109  main():
         : 241  exit(1);
    0.00 :   2123:   mov    $0x1,%edi
    0.00 :   2128:   call   1210 <exit@plt>
    0.00 :   212d:   mov    0x4f4c(%rip),%rcx        # 7080 <stderr@GLIBC_2.2.5>
         : 106  fprintf():
    0.00 :   2134:   mov    $0x15,%edx
    0.00 :   2139:   mov    $0x1,%esi
    0.00 :   213e:   lea    0x2a39(%rip),%rdi        # 4b7e <_IO_stdin_used+0xb7e>
    0.00 :   2145:   call   1220 <fwrite@plt>
         : 109  main():
         : 159  exit(1);
    0.00 :   214a:   mov    $0x1,%edi
    0.00 :   214f:   call   1210 <exit@plt>
    0.00 :   2154:   mov    0x4f25(%rip),%rcx        # 7080 <stderr@GLIBC_2.2.5>
         : 106  fprintf():
    0.00 :   215b:   mov    $0x16,%edx
    0.00 :   2160:   mov    $0x1,%esi
    0.00 :   2165:   lea    0x29d8(%rip),%rdi        # 4b44 <_IO_stdin_used+0xb44>
    0.00 :   216c:   call   1220 <fwrite@plt>
         : 109  main():
         : 111  exit(1);
    0.00 :   2171:   mov    $0x1,%edi
    0.00 :   2176:   call   1210 <exit@plt>
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff954abf70 <load0>:
    0.00 :   ffffffff954abf70:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff954abf75:       mov    $0xfffffe00,%eax
  100.00 :   ffffffff954abf7a:       lock xadd %eax,(%rdi)
    0.00 :   ffffffff954abf7e:       decl   %gs:0x6ab858c3(%rip)        # 0x31848
    0.00 :   ffffffff954abf85:       je     0xffffffff954abf90
    0.00 :   ffffffff954abf87:       xor    %eax,%eax
    0.00 :   ffffffff954abf89:       xor    %edi,%edi
    0.00 :   ffffffff954abf8b:       ret
    0.00 :   ffffffff954abf8c:       int3
    0.00 :   ffffffff954abf8d:       int3
    0.00 :   ffffffff954abf8e:       int3
    0.00 :   ffffffff954abf8f:       int3
    0.00 :   ffffffff954abf90:       push   %rbp
    0.00 :   ffffffff954abf91:       mov    %rsp,%rbp
    0.00 :   ffffffff954abf94:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff954abf99:       pop    %rbp
    0.00 :   ffffffff954abf9a:       xor    %eax,%eax
    0.00 :   ffffffff954abf9c:       xor    %edi,%edi
    0.00 :   ffffffff954abf9e:       ret
    0.00 :   ffffffff954abf9f:       int3
    0.00 :   ffffffff954abfa0:       int3
    0.00 :   ffffffff954abfa1:       int3
    0.00 :   ffffffff954abfa2:       int3
    0.00 :   ffffffff954abfa3:       data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   ffffffff954abfae:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (3 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94562590 <load0>:
   33.43 :   ffffffff94562590:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94562595:       push   %rbp
    0.00 :   ffffffff94562596:       mov    %rsp,%rbp
    0.00 :   ffffffff94562599:       push   %r14
    0.00 :   ffffffff9456259b:       push   %r13
    0.00 :   ffffffff9456259d:       mov    %rsi,%r13
    0.00 :   ffffffff945625a0:       push   %r12
    0.00 :   ffffffff945625a2:       mov    0xbf0(%rdi),%rax
    0.00 :   ffffffff945625a9:       mov    %rdi,%r12
    0.00 :   ffffffff945625ac:       add    %rsi,0xa88(%rdi)
    0.00 :   ffffffff945625b3:       mov    0x160(%rax),%edx
    0.00 :   ffffffff945625b9:       test   %edx,%edx
    0.00 :   ffffffff945625bb:       je     0xffffffff945625db
    0.00 :   ffffffff945625bd:       cmpq   $0x0,0xbf8(%rdi)
    0.00 :   ffffffff945625c5:       je     0xffffffff945625db
    0.00 :   ffffffff945625c7:       lea    0x100(%rax),%rcx
    0.00 :   ffffffff945625ce:       test   %rcx,%rcx
    0.00 :   ffffffff945625d1:       je     0xffffffff945625db
    0.00 :   ffffffff945625d3:       lock add %rsi,0x100(%rax)
    0.00 :   ffffffff945625db:       mov    0x70(%r12),%eax
    0.00 :   ffffffff945625e0:       xor    %r14d,%r14d
    0.00 :   ffffffff945625e3:       mov    %r12,%rdi
    0.00 :   ffffffff945625e6:       mov    %r13,%rdx
    0.00 :   ffffffff945625e9:       sub    $0x78,%eax
    0.00 :   ffffffff945625ec:       test   %eax,%eax
    0.00 :   ffffffff945625ee:       setg   %r14b
    0.00 :   ffffffff945625f2:       setg   %al
    0.00 :   ffffffff945625f5:       mov    %r14d,%esi
    0.00 :   ffffffff945625f8:       movzbl %al,%eax
    0.00 :   ffffffff945625fb:       add    %r13,%gs:0x202e0(,%rax,8)
    0.00 :   ffffffff94562604:       call   0xffffffff94571a00
    0.00 :   ffffffff94562609:       mov    0xe08(%r12),%rax
    0.00 :   ffffffff94562611:       mov    0x80(%rax),%rdi
   33.75 :   ffffffff94562618:       cmpq   $0x0,0xc0(%rdi)
    0.00 :   ffffffff94562620:       je     0xffffffff9456262d
    0.00 :   ffffffff94562622:       mov    %r13,%rdx
    0.00 :   ffffffff94562625:       mov    %r14d,%esi
    0.00 :   ffffffff94562628:       call   0xffffffff94610230
    0.00 :   ffffffff9456262d:       mov    %r12,%rdi
   32.83 :   ffffffff94562630:       call   0xffffffff9464e4d0
    0.00 :   ffffffff94562635:       pop    %r12
    0.00 :   ffffffff94562637:       pop    %r13
    0.00 :   ffffffff94562639:       pop    %r14
    0.00 :   ffffffff9456263b:       pop    %rbp
    0.00 :   ffffffff9456263c:       xor    %eax,%eax
    0.00 :   ffffffff9456263e:       xor    %edx,%edx
    0.00 :   ffffffff94562640:       xor    %ecx,%ecx
    0.00 :   ffffffff94562642:       xor    %esi,%esi
    0.00 :   ffffffff94562644:       xor    %edi,%edi
    0.00 :   ffffffff94562646:       ret
    0.00 :   ffffffff94562647:       int3
    0.00 :   ffffffff94562648:       int3
    0.00 :   ffffffff94562649:       int3
    0.00 :   ffffffff9456264a:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94855880 <load0>:
    0.00 :   ffffffff94855880:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94855885:       push   %rbp
    0.00 :   ffffffff94855886:       mov    %rsp,%rbp
    0.00 :   ffffffff94855889:       push   %r12
    0.00 :   ffffffff9485588b:       push   %rbx
    0.00 :   ffffffff9485588c:       xchg   %ax,%ax
    0.00 :   ffffffff9485588e:       mov    %rdi,%rbx
    0.00 :   ffffffff94855891:       test   %rdi,%rdi
    0.00 :   ffffffff94855894:       je     0xffffffff9485593f
    0.00 :   ffffffff9485589a:       call   0xffffffff945ae9b0
    0.00 :   ffffffff9485589f:       mov    0x410(%rbx),%rax
    0.00 :   ffffffff948558a6:       test   %rax,%rax
    0.00 :   ffffffff948558a9:       je     0xffffffff948558f3
    0.00 :   ffffffff948558ab:       mov    0xe08(%rax),%rax
    0.00 :   ffffffff948558b2:       mov    0x20(%rax),%r12
    0.00 :   ffffffff948558b6:       test   %r12,%r12
    0.00 :   ffffffff948558b9:       je     0xffffffff948558f3
  100.00 :   ffffffff948558bb:       testb  $0x1,0x54(%r12)
    0.00 :   ffffffff948558c1:       je     0xffffffff948558da
    0.00 :   ffffffff948558c3:       call   0xffffffff945b5a30
    0.00 :   ffffffff948558c8:       mov    %r12,%rax
    0.00 :   ffffffff948558cb:       pop    %rbx
    0.00 :   ffffffff948558cc:       pop    %r12
    0.00 :   ffffffff948558ce:       pop    %rbp
    0.00 :   ffffffff948558cf:       xor    %edx,%edx
    0.00 :   ffffffff948558d1:       xor    %ecx,%ecx
    0.00 :   ffffffff948558d3:       xor    %edi,%edi
    0.00 :   ffffffff948558d5:       ret
    0.00 :   ffffffff948558d6:       int3
    0.00 :   ffffffff948558d7:       int3
    0.00 :   ffffffff948558d8:       int3
    0.00 :   ffffffff948558d9:       int3
    0.00 :   ffffffff948558da:       call   0xffffffff945ae9b0
    0.00 :   ffffffff948558df:       mov    0x10(%r12),%rax
    0.00 :   ffffffff948558e4:       test   $0x3,%al
    0.00 :   ffffffff948558e6:       jne    0xffffffff94855911
    0.00 :   ffffffff948558e8:       incq   %gs:(%rax)
    0.00 :   ffffffff948558ec:       call   0xffffffff945b5a30
    0.00 :   ffffffff948558f1:       jmp    0xffffffff948558c3
    0.00 :   ffffffff948558f3:       mov    0x21b1ba6(%rip),%r12        # 0xffffffff96a074a0
    0.00 :   ffffffff948558fa:       jmp    0xffffffff948558bb
    0.00 :   ffffffff948558fc:       xor    %r12d,%r12d
    0.00 :   ffffffff948558ff:       pop    %rbx
    0.00 :   ffffffff94855900:       mov    %r12,%rax
    0.00 :   ffffffff94855903:       pop    %r12
    0.00 :   ffffffff94855905:       pop    %rbp
    0.00 :   ffffffff94855906:       xor    %edx,%edx
    0.00 :   ffffffff94855908:       xor    %ecx,%ecx
    0.00 :   ffffffff9485590a:       xor    %edi,%edi
    0.00 :   ffffffff9485590c:       ret
    0.00 :   ffffffff9485590d:       int3
    0.00 :   ffffffff9485590e:       int3
    0.00 :   ffffffff9485590f:       int3
    0.00 :   ffffffff94855910:       int3
    0.00 :   ffffffff94855911:       mov    0x18(%r12),%rdx
    0.00 :   ffffffff94855916:       mov    (%rdx),%rax
    0.00 :   ffffffff94855919:       test   %rax,%rax
    0.00 :   ffffffff9485591c:       je     0xffffffff94855935
    0.00 :   ffffffff9485591e:       lea    0x1(%rax),%rcx
    0.00 :   ffffffff94855922:       lock cmpxchg %rcx,(%rdx)
    0.00 :   ffffffff94855927:       jne    0xffffffff94855930
    0.00 :   ffffffff94855929:       call   0xffffffff945b5a30
    0.00 :   ffffffff9485592e:       jmp    0xffffffff948558c3
    0.00 :   ffffffff94855930:       test   %rax,%rax
    0.00 :   ffffffff94855933:       jne    0xffffffff9485591e
    0.00 :   ffffffff94855935:       call   0xffffffff945b5a30
    0.00 :   ffffffff9485593a:       jmp    0xffffffff9485589f
    0.00 :   ffffffff9485593f:       mov    %gs:0x6b7dbf02(%rip),%eax        # 0x31848
    0.00 :   ffffffff94855946:       test   $0xff0100,%eax
    0.00 :   ffffffff9485594b:       jne    0xffffffff94855987
    0.00 :   ffffffff9485594d:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff94855956:       mov    0x13e8(%rax),%r12
    0.00 :   ffffffff9485595d:       test   %r12,%r12
    0.00 :   ffffffff94855960:       jne    0xffffffff94855991
    0.00 :   ffffffff94855962:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff9485596b:       mov    0x920(%rax),%rbx
    0.00 :   ffffffff94855972:       mov    0x21b1b27(%rip),%r12        # 0xffffffff96a074a0
    0.00 :   ffffffff94855979:       test   %rbx,%rbx
    0.00 :   ffffffff9485597c:       jne    0xffffffff9485589a
    0.00 :   ffffffff94855982:       jmp    0xffffffff948558c8
    0.00 :   ffffffff94855987:       mov    %gs:0x6b7d8fd1(%rip),%r12        # 0x2e960
    0.00 :   ffffffff9485598f:       jmp    0xffffffff9485595d
    0.00 :   ffffffff94855991:       testb  $0x1,0x54(%r12)
    0.00 :   ffffffff94855997:       jne    0xffffffff948558c8
    0.00 :   ffffffff9485599d:       call   0xffffffff945ae9b0
    0.00 :   ffffffff948559a2:       mov    0x10(%r12),%rax
    0.00 :   ffffffff948559a7:       test   $0x3,%al
    0.00 :   ffffffff948559a9:       jne    0xffffffff948559b4
    0.00 :   ffffffff948559ab:       incq   %gs:(%rax)
    0.00 :   ffffffff948559af:       jmp    0xffffffff948558c3
    0.00 :   ffffffff948559b4:       mov    0x18(%r12),%rax
    0.00 :   ffffffff948559b9:       lock addq $0x1,(%rax)
    0.00 :   ffffffff948559be:       jmp    0xffffffff948558c3
    0.00 :   ffffffff948559c3:       data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   ffffffff948559ce:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94772f20 <load0>:
    0.00 :   ffffffff94772f20:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94772f25:       push   %rbp
  100.00 :   ffffffff94772f26:       mov    %rsp,%rbp
    0.00 :   ffffffff94772f29:       xchg   %ax,%ax
    0.00 :   ffffffff94772f2b:       lock incl 0x34(%rdi)
    0.00 :   ffffffff94772f2f:       incl   %gs:0x6b8be912(%rip)        # 0x31848
    0.00 :   ffffffff94772f36:       mov    $0x2dd60,%r8
    0.00 :   ffffffff94772f3d:       add    %gs:0x6b8a6a9b(%rip),%r8        # 0x199e0
    0.00 :   ffffffff94772f45:       movzbl (%r8),%eax
    0.00 :   ffffffff94772f49:       lea    0x1(%rax),%edx
    0.00 :   ffffffff94772f4c:       mov    %dl,(%r8)
    0.00 :   ffffffff94772f4f:       mov    %rdi,0x8(%r8,%rax,8)
    0.00 :   ffffffff94772f54:       cmp    $0xf,%dl
    0.00 :   ffffffff94772f57:       je     0xffffffff94772f63
    0.00 :   ffffffff94772f59:       mov    (%rdi),%rax
    0.00 :   ffffffff94772f5c:       test   $0x10000,%eax
    0.00 :   ffffffff94772f61:       je     0xffffffff94772fbb
    0.00 :   ffffffff94772f63:       mov    $0xffffffff94771db0,%rsi
    0.00 :   ffffffff94772f6a:       mov    %r8,%rdi
    0.00 :   ffffffff94772f6d:       call   0xffffffff94772db0
    0.00 :   ffffffff94772f72:       decl   %gs:0x6b8be8cf(%rip)        # 0x31848
    0.00 :   ffffffff94772f79:       je     0xffffffff94772fc7
    0.00 :   ffffffff94772f7b:       pop    %rbp
    0.00 :   ffffffff94772f7c:       xor    %eax,%eax
    0.00 :   ffffffff94772f7e:       xor    %edx,%edx
    0.00 :   ffffffff94772f80:       xor    %esi,%esi
    0.00 :   ffffffff94772f82:       xor    %edi,%edi
    0.00 :   ffffffff94772f84:       xor    %r8d,%r8d
    0.00 :   ffffffff94772f87:       ret
    0.00 :   ffffffff94772f88:       int3
    0.00 :   ffffffff94772f89:       int3
    0.00 :   ffffffff94772f8a:       int3
    0.00 :   ffffffff94772f8b:       int3
    0.00 :   ffffffff94772f8c:       mov    (%rdi),%rax
    0.00 :   ffffffff94772f8f:       test   $0x100000,%eax
    0.00 :   ffffffff94772f94:       jne    0xffffffff94772f2b
    0.00 :   ffffffff94772f96:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff94772f9f:       testb  $0x20,0x950(%rax)
    0.00 :   ffffffff94772fa6:       je     0xffffffff94772f2b
    0.00 :   ffffffff94772fa8:       testb  $0x8,0x2d(%rax)
    0.00 :   ffffffff94772fac:       jne    0xffffffff94772f2b
    0.00 :   ffffffff94772fb2:       lock orb $0x20,(%rdi)
    0.00 :   ffffffff94772fb6:       jmp    0xffffffff94772f2b
    0.00 :   ffffffff94772fbb:       mov    0x34cc83f(%rip),%eax        # 0xffffffff97c3f800
    0.00 :   ffffffff94772fc1:       test   %eax,%eax
    0.00 :   ffffffff94772fc3:       jne    0xffffffff94772f63
    0.00 :   ffffffff94772fc5:       jmp    0xffffffff94772f72
    0.00 :   ffffffff94772fc7:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94772fcc:       pop    %rbp
    0.00 :   ffffffff94772fcd:       xor    %eax,%eax
    0.00 :   ffffffff94772fcf:       xor    %edx,%edx
    0.00 :   ffffffff94772fd1:       xor    %esi,%esi
    0.00 :   ffffffff94772fd3:       xor    %edi,%edi
    0.00 :   ffffffff94772fd5:       xor    %r8d,%r8d
    0.00 :   ffffffff94772fd8:       ret
    0.00 :   ffffffff94772fd9:       int3
    0.00 :   ffffffff94772fda:       int3
    0.00 :   ffffffff94772fdb:       int3
    0.00 :   ffffffff94772fdc:       int3
 Percent |	Source code & Disassembly of kcore for cycles (3 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95601170 <load0>:
    0.00 :   ffffffff95601170:       xchg   %ax,%ax
    0.00 :   ffffffff95601172:       mov    $0x48,%ecx
    0.00 :   ffffffff95601177:       mov    %gs:0x1fb70,%rdx
    0.00 :   ffffffff95601180:       and    $0xfffffffe,%edx
    0.00 :   ffffffff95601183:       mov    %edx,%eax
    0.00 :   ffffffff95601185:       shr    $0x20,%rdx
    0.00 :   ffffffff95601189:       wrmsr
    0.00 :   ffffffff9560118b:       nopl   0x0(%rax,%rax,1)
   46.05 :   ffffffff95601190:       pop    %r15
    0.00 :   ffffffff95601192:       pop    %r14
    0.00 :   ffffffff95601194:       pop    %r13
    0.00 :   ffffffff95601196:       pop    %r12
    0.00 :   ffffffff95601198:       pop    %rbp
    0.00 :   ffffffff95601199:       pop    %rbx
    0.00 :   ffffffff9560119a:       pop    %r11
    0.00 :   ffffffff9560119c:       pop    %r10
    0.00 :   ffffffff9560119e:       pop    %r9
    0.00 :   ffffffff956011a0:       pop    %r8
    0.00 :   ffffffff956011a2:       pop    %rax
    0.00 :   ffffffff956011a3:       pop    %rcx
    0.00 :   ffffffff956011a4:       pop    %rdx
    0.00 :   ffffffff956011a5:       pop    %rsi
    0.00 :   ffffffff956011a6:       mov    %rsp,%rdi
    0.00 :   ffffffff956011a9:       mov    %gs:0x6004,%rsp
    0.00 :   ffffffff956011b2:       push   0x30(%rdi)
    0.00 :   ffffffff956011b5:       push   0x28(%rdi)
    0.00 :   ffffffff956011b8:       push   0x20(%rdi)
    0.00 :   ffffffff956011bb:       push   0x18(%rdi)
    0.00 :   ffffffff956011be:       push   0x10(%rdi)
    0.00 :   ffffffff956011c1:       push   (%rdi)
    0.00 :   ffffffff956011c3:       push   %rax
    0.00 :   ffffffff956011c4:       xchg   %ax,%ax
    0.00 :   ffffffff956011c6:       mov    %cr3,%rdi
    0.00 :   ffffffff956011c9:       xchg   %ax,%ax
    0.00 :   ffffffff956011cb:       mov    %rdi,%rax
    0.00 :   ffffffff956011ce:       and    $0x7ff,%rdi
   46.32 :   ffffffff956011d5:       bt     %rdi,%gs:0x318d6
    0.00 :   ffffffff956011df:       jae    0xffffffff956011f0
    0.00 :   ffffffff956011e1:       btr    %rdi,%gs:0x318d6
    0.00 :   ffffffff956011eb:       mov    %rax,%rdi
    0.00 :   ffffffff956011ee:       jmp    0xffffffff956011f8
    0.00 :   ffffffff956011f0:       mov    %rax,%rdi
    0.00 :   ffffffff956011f3:       bts    $0x3f,%rdi
    0.00 :   ffffffff956011f8:       or     $0x800,%rdi
    0.00 :   ffffffff956011ff:       or     $0x1000,%rdi
    7.63 :   ffffffff95601206:       mov    %rdi,%cr3
    0.00 :   ffffffff95601209:       pop    %rax
    0.00 :   ffffffff9560120a:       pop    %rdi
    0.00 :   ffffffff9560120b:       swapgs
    0.00 :   ffffffff9560120e:       jmp    0xffffffff95601230
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94560310 <load0>:
    0.00 :   ffffffff94560310:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94560315:       push   %rbp
    0.00 :   ffffffff94560316:       mov    %rsp,%rbp
    0.00 :   ffffffff94560319:       push   %r15
    0.00 :   ffffffff9456031b:       push   %r14
    0.00 :   ffffffff9456031d:       push   %r13
    0.00 :   ffffffff9456031f:       push   %r12
    0.00 :   ffffffff94560321:       mov    %rsi,%r12
    0.00 :   ffffffff94560324:       push   %rbx
    0.00 :   ffffffff94560325:       and    $0xfffffffffffffff0,%rsp
    0.00 :   ffffffff94560329:       sub    $0x40,%rsp
   49.88 :   ffffffff9456032d:       mov    (%rsi),%rbx
    0.00 :   ffffffff94560330:       mov    0x50(%rsi),%rcx
    0.00 :   ffffffff94560334:       mov    0x14(%rsi),%r14d
    0.00 :   ffffffff94560338:       test   %rbx,%rbx
    0.00 :   ffffffff9456033b:       je     0xffffffff9456034d
    0.00 :   ffffffff9456033d:       shr    $0xa,%rbx
    0.00 :   ffffffff94560341:       mov    $0x2,%eax
    0.00 :   ffffffff94560346:       cmp    %rax,%rbx
    0.00 :   ffffffff94560349:       cmovb  %rax,%rbx
    0.00 :   ffffffff9456034d:       mov    0x80(%r12),%rdx
    0.00 :   ffffffff94560355:       mov    %rdi,%rax
    0.00 :   ffffffff94560358:       sub    %rdx,%rax
    0.00 :   ffffffff9456035b:       js     0xffffffff945603e2
    0.00 :   ffffffff94560361:       mov    %rax,%rsi
    0.00 :   ffffffff94560364:       shr    $0xa,%rsi
    0.00 :   ffffffff94560368:       je     0xffffffff945603b9
    0.00 :   ffffffff9456036a:       and    $0xfffffffffffffc00,%rax
    0.00 :   ffffffff94560370:       mov    %esi,%r15d
    0.00 :   ffffffff94560373:       add    %rdx,%rax
    0.00 :   ffffffff94560376:       mov    0x9c(%r12),%edx
    0.00 :   ffffffff9456037e:       mov    %rax,0x80(%r12)
    0.00 :   ffffffff94560386:       mov    %rdx,%r9
    0.00 :   ffffffff94560389:       add    %rsi,%rdx
    0.00 :   ffffffff9456038c:       mov    %rdx,%r8
    0.00 :   ffffffff9456038f:       shr    $0xa,%r8
    0.00 :   ffffffff94560393:       test   %rbx,%rbx
    0.00 :   ffffffff94560396:       jne    0xffffffff94560413
    0.00 :   ffffffff94560398:       cmp    $0x3ff,%rdx
    0.00 :   ffffffff9456039f:       ja     0xffffffff945604f7
    0.00 :   ffffffff945603a5:       mov    %edx,0x9c(%r12)
    0.00 :   ffffffff945603ad:       mov    %edx,%r13d
    0.00 :   ffffffff945603b0:       test   %r8d,%r8d
    0.00 :   ffffffff945603b3:       jne    0xffffffff94560481
    0.00 :   ffffffff945603b9:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff945603bd:       xor    %eax,%eax
    0.00 :   ffffffff945603bf:       pop    %rbx
    0.00 :   ffffffff945603c0:       pop    %r12
    0.00 :   ffffffff945603c2:       pop    %r13
    0.00 :   ffffffff945603c4:       pop    %r14
    0.00 :   ffffffff945603c6:       pop    %r15
    0.00 :   ffffffff945603c8:       pop    %rbp
    0.00 :   ffffffff945603c9:       xor    %edx,%edx
    0.00 :   ffffffff945603cb:       xor    %ecx,%ecx
    0.00 :   ffffffff945603cd:       xor    %esi,%esi
    0.00 :   ffffffff945603cf:       xor    %edi,%edi
    0.00 :   ffffffff945603d1:       xor    %r8d,%r8d
    0.00 :   ffffffff945603d4:       xor    %r9d,%r9d
    0.00 :   ffffffff945603d7:       xor    %r10d,%r10d
    0.00 :   ffffffff945603da:       xor    %r11d,%r11d
    0.00 :   ffffffff945603dd:       ret
    0.00 :   ffffffff945603de:       int3
    0.00 :   ffffffff945603df:       int3
    0.00 :   ffffffff945603e0:       int3
    0.00 :   ffffffff945603e1:       int3
    0.00 :   ffffffff945603e2:       mov    %rdi,0x80(%r12)
    0.00 :   ffffffff945603ea:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff945603ee:       xor    %eax,%eax
    0.00 :   ffffffff945603f0:       pop    %rbx
    0.00 :   ffffffff945603f1:       pop    %r12
    0.00 :   ffffffff945603f3:       pop    %r13
    0.00 :   ffffffff945603f5:       pop    %r14
    0.00 :   ffffffff945603f7:       pop    %r15
    0.00 :   ffffffff945603f9:       pop    %rbp
    0.00 :   ffffffff945603fa:       xor    %edx,%edx
    0.00 :   ffffffff945603fc:       xor    %ecx,%ecx
    0.00 :   ffffffff945603fe:       xor    %esi,%esi
    0.00 :   ffffffff94560400:       xor    %edi,%edi
    0.00 :   ffffffff94560402:       xor    %r8d,%r8d
    0.00 :   ffffffff94560405:       xor    %r9d,%r9d
    0.00 :   ffffffff94560408:       xor    %r10d,%r10d
    0.00 :   ffffffff9456040b:       xor    %r11d,%r11d
    0.00 :   ffffffff9456040e:       ret
    0.00 :   ffffffff9456040f:       int3
    0.00 :   ffffffff94560410:       int3
    0.00 :   ffffffff94560411:       int3
    0.00 :   ffffffff94560412:       int3
    0.00 :   ffffffff94560413:       xor    %r10d,%r10d
    0.00 :   ffffffff94560416:       test   %rcx,%rcx
    0.00 :   ffffffff94560419:       setne  %r10b
    0.00 :   ffffffff9456041d:       cmp    $0x3ff,%rdx
    0.00 :   ffffffff94560424:       ja     0xffffffff945605ac
    0.00 :   ffffffff9456042a:       mov    0x88(%r12),%rsi
    0.00 :   ffffffff94560432:       mov    %edx,%r13d
    0.00 :   ffffffff94560435:       mov    %r15d,%eax
    0.00 :   ffffffff94560438:       mov    %r13d,0x9c(%r12)
    0.00 :   ffffffff94560440:       imul   %rbx,%rax
    0.00 :   ffffffff94560444:       add    %rsi,%rax
    0.00 :   ffffffff94560447:       mov    %rax,0x88(%r12)
    0.00 :   ffffffff9456044f:       test   %r14,%r14
    0.00 :   ffffffff94560452:       je     0xffffffff94560467
    0.00 :   ffffffff94560454:       mov    %r15d,%eax
    0.00 :   ffffffff94560457:       imul   %r14,%rax
    0.00 :   ffffffff9456045b:       shl    $0xa,%rax
    0.00 :   ffffffff9456045f:       add    %rax,0x90(%r12)
    0.00 :   ffffffff94560467:       test   %r10d,%r10d
    0.00 :   ffffffff9456046a:       je     0xffffffff94560478
    0.00 :   ffffffff9456046c:       shl    $0xa,%r15d
   50.12 :   ffffffff94560470:       add    %r15d,0x98(%r12)
    0.00 :   ffffffff94560478:       test   %r8d,%r8d
    0.00 :   ffffffff9456047b:       je     0xffffffff945603b9
    0.00 :   ffffffff94560481:       mov    0x88(%r12),%rax
    0.00 :   ffffffff94560489:       lea    0xb67e(%r13),%ecx
    0.00 :   ffffffff94560490:       xor    %edx,%edx
    0.00 :   ffffffff94560492:       div    %rcx
    0.00 :   ffffffff94560495:       xor    %edx,%edx
    0.00 :   ffffffff94560497:       mov    %rax,0xa0(%r12)
    0.00 :   ffffffff9456049f:       mov    0x90(%r12),%rax
    0.00 :   ffffffff945604a7:       div    %rcx
    0.00 :   ffffffff945604aa:       xor    %edx,%edx
    0.00 :   ffffffff945604ac:       mov    %rax,0xa8(%r12)
    0.00 :   ffffffff945604b4:       mov    0x98(%r12),%eax
    0.00 :   ffffffff945604bc:       div    %ecx
    0.00 :   ffffffff945604be:       mov    %rax,0xb0(%r12)
    0.00 :   ffffffff945604c6:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945604cb:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff945604cf:       mov    $0x1,%eax
    0.00 :   ffffffff945604d4:       pop    %rbx
    0.00 :   ffffffff945604d5:       pop    %r12
    0.00 :   ffffffff945604d7:       pop    %r13
    0.00 :   ffffffff945604d9:       pop    %r14
    0.00 :   ffffffff945604db:       pop    %r15
    0.00 :   ffffffff945604dd:       pop    %rbp
    0.00 :   ffffffff945604de:       xor    %edx,%edx
    0.00 :   ffffffff945604e0:       xor    %ecx,%ecx
    0.00 :   ffffffff945604e2:       xor    %esi,%esi
    0.00 :   ffffffff945604e4:       xor    %edi,%edi
    0.00 :   ffffffff945604e6:       xor    %r8d,%r8d
    0.00 :   ffffffff945604e9:       xor    %r9d,%r9d
    0.00 :   ffffffff945604ec:       xor    %r10d,%r10d
    0.00 :   ffffffff945604ef:       xor    %r11d,%r11d
    0.00 :   ffffffff945604f2:       ret
    0.00 :   ffffffff945604f3:       int3
    0.00 :   ffffffff945604f4:       int3
    0.00 :   ffffffff945604f5:       int3
    0.00 :   ffffffff945604f6:       int3
    0.00 :   ffffffff945604f7:       mov    %edx,%r13d
    0.00 :   ffffffff945604fa:       mov    0x88(%r12),%rax
    0.00 :   ffffffff94560502:       and    $0x3ff,%r13d
    0.00 :   ffffffff94560509:       cmp    $0x7e0,%r8
    0.00 :   ffffffff94560510:       ja     0xffffffff9456074b
    0.00 :   ffffffff94560516:       xor    %r14d,%r14d
    0.00 :   ffffffff94560519:       xor    %r10d,%r10d
    0.00 :   ffffffff9456051c:       cmp    $0x1f,%r8
    0.00 :   ffffffff94560520:       ja     0xffffffff94560694
    0.00 :   ffffffff94560526:       mov    %r8d,%esi
    0.00 :   ffffffff94560529:       cmp    $0x1f,%r8d
    0.00 :   ffffffff9456052d:       ja     0xffffffff94560808
    0.00 :   ffffffff94560533:       mov    -0x6a7d9620(,%rsi,4),%ecx
    0.00 :   ffffffff9456053a:       mul    %rcx
    0.00 :   ffffffff9456053d:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff94560542:       mov    %rax,0x88(%r12)
    0.00 :   ffffffff9456054a:       mov    0x90(%r12),%rax
    0.00 :   ffffffff94560552:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560556:       ja     0xffffffff945607bb
    0.00 :   ffffffff9456055c:       mul    %rcx
    0.00 :   ffffffff9456055f:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff94560564:       mov    %rax,0x90(%r12)
    0.00 :   ffffffff9456056c:       mov    0x98(%r12),%eax
    0.00 :   ffffffff94560574:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560578:       ja     0xffffffff9456077a
    0.00 :   ffffffff9456057e:       mov    -0x6a7d9620(,%rsi,4),%r11d
    0.00 :   ffffffff94560586:       mul    %r11
    0.00 :   ffffffff94560589:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff9456058e:       mov    %eax,0x98(%r12)
    0.00 :   ffffffff94560596:       test   %rbx,%rbx
    0.00 :   ffffffff94560599:       jne    0xffffffff94560645
    0.00 :   ffffffff9456059f:       mov    %r13d,0x9c(%r12)
    0.00 :   ffffffff945605a7:       jmp    0xffffffff9456044f
    0.00 :   ffffffff945605ac:       and    $0x3ff,%edx
    0.00 :   ffffffff945605b2:       mov    0x88(%r12),%rax
    0.00 :   ffffffff945605ba:       mov    %edx,%r13d
    0.00 :   ffffffff945605bd:       cmp    $0x7e0,%r8
    0.00 :   ffffffff945605c4:       jbe    0xffffffff9456051c
    0.00 :   ffffffff945605ca:       movq   $0x0,0x90(%r12)
    0.00 :   ffffffff945605d6:       mov    %edx,%ecx
    0.00 :   ffffffff945605d8:       xor    %esi,%esi
    0.00 :   ffffffff945605da:       xor    %eax,%eax
    0.00 :   ffffffff945605dc:       movl   $0x0,0x98(%r12)
    0.00 :   ffffffff945605e8:       lea    0xb67e(%rcx),%edx
    0.00 :   ffffffff945605ee:       sub    %eax,%edx
    0.00 :   ffffffff945605f0:       mov    %edx,%r15d
    0.00 :   ffffffff945605f3:       jmp    0xffffffff94560435
    0.00 :   ffffffff945605f8:       mov    %gs:0x6bad124d(%rip),%eax        # 0x3184c
    0.00 :   ffffffff945605ff:       mov    %eax,%eax
    0.00 :   ffffffff94560601:       bt     %rax,0x24a0517(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff94560609:       jae    0xffffffff945604cb
    0.00 :   ffffffff9456060f:       incl   %gs:0x6bad1232(%rip)        # 0x31848
    0.00 :   ffffffff94560616:       mov    0x2455463(%rip),%rax        # 0xffffffff969b5a80
    0.00 :   ffffffff9456061d:       test   %rax,%rax
    0.00 :   ffffffff94560620:       je     0xffffffff9456062e
    0.00 :   ffffffff94560622:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff94560626:       mov    %r12,%rsi
    0.00 :   ffffffff94560629:       call   0xffffffff9452bc70
    0.00 :   ffffffff9456062e:       decl   %gs:0x6bad1213(%rip)        # 0x31848
    0.00 :   ffffffff94560635:       jne    0xffffffff945604cb
    0.00 :   ffffffff9456063b:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94560640:       jmp    0xffffffff945604cb
    0.00 :   ffffffff94560645:       mov    $0x400,%r15d
    0.00 :   ffffffff9456064b:       sub    %r9d,%r15d
    0.00 :   ffffffff9456064e:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560652:       ja     0xffffffff9456091c
    0.00 :   ffffffff94560658:       mov    -0x6a7d9620(,%rsi,4),%eax
    0.00 :   ffffffff9456065f:       mov    %r8d,%esi
    0.00 :   ffffffff94560662:       mul    %r15
    0.00 :   ffffffff94560665:       shr    $0x20,%rax
    0.00 :   ffffffff94560669:       mov    %rax,%r15
    0.00 :   ffffffff9456066c:       mov    $0xba7e,%eax
    0.00 :   ffffffff94560671:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560675:       ja     0xffffffff945608e3
    0.00 :   ffffffff9456067b:       mul    %r11
    0.00 :   ffffffff9456067e:       mov    0x88(%r12),%rsi
    0.00 :   ffffffff94560686:       lea    0x0(%r13,%r15,1),%ecx
    0.00 :   ffffffff9456068b:       shr    $0x20,%rax
    0.00 :   ffffffff9456068f:       jmp    0xffffffff945605e8
    0.00 :   ffffffff94560694:       mov    %r8,%rsi
    0.00 :   ffffffff94560697:       mov    %r8d,%ecx
    0.00 :   ffffffff9456069a:       and    $0x1f,%esi
    0.00 :   ffffffff9456069d:       shr    $0x5,%ecx
    0.00 :   ffffffff945606a0:       mov    -0x6a7d9620(,%rsi,4),%r11d
    0.00 :   ffffffff945606a8:       shr    %cl,%rax
    0.00 :   ffffffff945606ab:       mul    %r11
    0.00 :   ffffffff945606ae:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff945606b3:       mov    %rax,0x88(%r12)
    0.00 :   ffffffff945606bb:       mov    0x90(%r12),%rax
    0.00 :   ffffffff945606c3:       shr    %cl,%rax
    0.00 :   ffffffff945606c6:       cmp    $0x1f,%rsi
    0.00 :   ffffffff945606ca:       ja     0xffffffff9456088e
    0.00 :   ffffffff945606d0:       mul    %r11
    0.00 :   ffffffff945606d3:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff945606d8:       mov    %rax,0x90(%r12)
    0.00 :   ffffffff945606e0:       mov    0x98(%r12),%eax
    0.00 :   ffffffff945606e8:       shr    %cl,%rax
    0.00 :   ffffffff945606eb:       cmp    $0x1f,%rsi
    0.00 :   ffffffff945606ef:       ja     0xffffffff9456084b
    0.00 :   ffffffff945606f5:       mov    -0x6a7d9620(,%rsi,4),%r11d
    0.00 :   ffffffff945606fd:       mul    %r11
    0.00 :   ffffffff94560700:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff94560705:       mov    %eax,0x98(%r12)
    0.00 :   ffffffff9456070d:       test   %rbx,%rbx
    0.00 :   ffffffff94560710:       je     0xffffffff9456059f
    0.00 :   ffffffff94560716:       mov    %r8,%rdx
    0.00 :   ffffffff94560719:       mov    %r8d,%ecx
    0.00 :   ffffffff9456071c:       mov    $0x400,%eax
    0.00 :   ffffffff94560721:       and    $0x1f,%edx
    0.00 :   ffffffff94560724:       shr    $0x5,%ecx
    0.00 :   ffffffff94560727:       sub    %r9d,%eax
    0.00 :   ffffffff9456072a:       mov    -0x6a7d9620(,%rdx,4),%edx
    0.00 :   ffffffff94560731:       shr    %cl,%rax
    0.00 :   ffffffff94560734:       mul    %rdx
    0.00 :   ffffffff94560737:       shr    $0x20,%rax
    0.00 :   ffffffff9456073b:       mov    %rax,%r15
    0.00 :   ffffffff9456073e:       mov    $0xba7e,%eax
    0.00 :   ffffffff94560743:       shr    %cl,%rax
    0.00 :   ffffffff94560746:       jmp    0xffffffff94560671
    0.00 :   ffffffff9456074b:       movq   $0x0,0x88(%r12)
    0.00 :   ffffffff94560757:       xor    %r14d,%r14d
    0.00 :   ffffffff9456075a:       xor    %r10d,%r10d
    0.00 :   ffffffff9456075d:       movq   $0x0,0x90(%r12)
    0.00 :   ffffffff94560769:       movl   $0x0,0x98(%r12)
    0.00 :   ffffffff94560775:       jmp    0xffffffff9456059f
    0.00 :   ffffffff9456077a:       mov    $0xffffffff96694ee0,%rdi
    0.00 :   ffffffff94560781:       mov    %eax,0x18(%rsp)
    0.00 :   ffffffff94560785:       mov    %r9d,0x20(%rsp)
    0.00 :   ffffffff9456078a:       mov    %r10d,0x28(%rsp)
    0.00 :   ffffffff9456078f:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560794:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff94560799:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9456079e:       mov    0x18(%rsp),%eax
    0.00 :   ffffffff945607a2:       mov    0x20(%rsp),%r9d
    0.00 :   ffffffff945607a7:       mov    0x28(%rsp),%r10d
    0.00 :   ffffffff945607ac:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff945607b1:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff945607b6:       jmp    0xffffffff9456057e
    0.00 :   ffffffff945607bb:       mov    $0xffffffff96694f00,%rdi
    0.00 :   ffffffff945607c2:       mov    %rcx,0x10(%rsp)
    0.00 :   ffffffff945607c7:       mov    %r9d,0x18(%rsp)
    0.00 :   ffffffff945607cc:       mov    %r10d,0x20(%rsp)
    0.00 :   ffffffff945607d1:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff945607d6:       mov    %rax,0x30(%rsp)
    0.00 :   ffffffff945607db:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff945607e0:       call   0xffffffff94c77aa0
    0.00 :   ffffffff945607e5:       mov    0x10(%rsp),%rcx
    0.00 :   ffffffff945607ea:       mov    0x18(%rsp),%r9d
    0.00 :   ffffffff945607ef:       mov    0x20(%rsp),%r10d
    0.00 :   ffffffff945607f4:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff945607f9:       mov    0x30(%rsp),%rax
    0.00 :   ffffffff945607fe:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff94560803:       jmp    0xffffffff9456055c
    0.00 :   ffffffff94560808:       mov    $0xffffffff96694f20,%rdi
    0.00 :   ffffffff9456080f:       mov    %rax,0x18(%rsp)
    0.00 :   ffffffff94560814:       mov    %r9d,0x20(%rsp)
    0.00 :   ffffffff94560819:       mov    %r10d,0x28(%rsp)
    0.00 :   ffffffff9456081e:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560823:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff94560828:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9456082d:       mov    0x18(%rsp),%rax
    0.00 :   ffffffff94560832:       mov    0x20(%rsp),%r9d
    0.00 :   ffffffff94560837:       mov    0x28(%rsp),%r10d
    0.00 :   ffffffff9456083c:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff94560841:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff94560846:       jmp    0xffffffff94560533
    0.00 :   ffffffff9456084b:       mov    $0xffffffff96694f60,%rdi
    0.00 :   ffffffff94560852:       mov    %r9d,0x18(%rsp)
    0.00 :   ffffffff94560857:       mov    %r10d,0x20(%rsp)
    0.00 :   ffffffff9456085c:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff94560861:       mov    %rax,0x30(%rsp)
    0.00 :   ffffffff94560866:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff9456086b:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560870:       mov    0x18(%rsp),%r9d
    0.00 :   ffffffff94560875:       mov    0x20(%rsp),%r10d
    0.00 :   ffffffff9456087a:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff9456087f:       mov    0x30(%rsp),%rax
    0.00 :   ffffffff94560884:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff94560889:       jmp    0xffffffff945606f5
    0.00 :   ffffffff9456088e:       mov    $0xffffffff96694f80,%rdi
    0.00 :   ffffffff94560895:       mov    %r11,0x8(%rsp)
    0.00 :   ffffffff9456089a:       mov    %r9d,0x10(%rsp)
    0.00 :   ffffffff9456089f:       mov    %ecx,0x18(%rsp)
    0.00 :   ffffffff945608a3:       mov    %r10d,0x20(%rsp)
    0.00 :   ffffffff945608a8:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff945608ad:       mov    %rax,0x30(%rsp)
    0.00 :   ffffffff945608b2:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff945608b7:       call   0xffffffff94c77aa0
    0.00 :   ffffffff945608bc:       mov    0x8(%rsp),%r11
    0.00 :   ffffffff945608c1:       mov    0x10(%rsp),%r9d
    0.00 :   ffffffff945608c6:       mov    0x18(%rsp),%ecx
    0.00 :   ffffffff945608ca:       mov    0x20(%rsp),%r10d
    0.00 :   ffffffff945608cf:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff945608d4:       mov    0x30(%rsp),%rax
    0.00 :   ffffffff945608d9:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff945608de:       jmp    0xffffffff945606d0
    0.00 :   ffffffff945608e3:       mov    $0xffffffff96694f40,%rdi
    0.00 :   ffffffff945608ea:       mov    %rax,0x20(%rsp)
    0.00 :   ffffffff945608ef:       mov    %r11,0x28(%rsp)
    0.00 :   ffffffff945608f4:       mov    %r10d,0x30(%rsp)
    0.00 :   ffffffff945608f9:       mov    %r8,0x38(%rsp)
    0.00 :   ffffffff945608fe:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560903:       mov    0x20(%rsp),%rax
    0.00 :   ffffffff94560908:       mov    0x28(%rsp),%r11
    0.00 :   ffffffff9456090d:       mov    0x30(%rsp),%r10d
    0.00 :   ffffffff94560912:       mov    0x38(%rsp),%r8
    0.00 :   ffffffff94560917:       jmp    0xffffffff9456067b
    0.00 :   ffffffff9456091c:       mov    $0xffffffff96694ea0,%rdi
    0.00 :   ffffffff94560923:       mov    %r11,0x20(%rsp)
    0.00 :   ffffffff94560928:       mov    %r10d,0x28(%rsp)
    0.00 :   ffffffff9456092d:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560932:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff94560937:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9456093c:       mov    0x20(%rsp),%r11
    0.00 :   ffffffff94560941:       mov    0x28(%rsp),%r10d
    0.00 :   ffffffff94560946:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff9456094b:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff94560950:       jmp    0xffffffff94560658
 Percent |	Source code & Disassembly of kcore for cycles (3 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff950a6110 <load0>:
    0.00 :   ffffffff950a6110:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff950a6115:       push   %rbp
    0.00 :   ffffffff950a6116:       mov    %esi,%esi
    0.00 :   ffffffff950a6118:       add    0x18(%rdi),%rsi
    0.00 :   ffffffff950a611c:       mov    %rsp,%rbp
  100.00 :   ffffffff950a611f:       mov    (%rsi),%eax
    0.00 :   ffffffff950a6121:       mov    %eax,(%rdx)
    0.00 :   ffffffff950a6123:       pop    %rbp
    0.00 :   ffffffff950a6124:       xor    %eax,%eax
    0.00 :   ffffffff950a6126:       xor    %edx,%edx
    0.00 :   ffffffff950a6128:       xor    %esi,%esi
    0.00 :   ffffffff950a612a:       xor    %edi,%edi
    0.00 :   ffffffff950a612c:       ret
    0.00 :   ffffffff950a612d:       int3
    0.00 :   ffffffff950a612e:       int3
    0.00 :   ffffffff950a612f:       int3
    0.00 :   ffffffff950a6130:       int3
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9457cd00 <load0>:
    0.00 :   ffffffff9457cd00:       push   %rbp
    0.00 :   ffffffff9457cd01:       mov    %rsp,%rbp
    0.00 :   ffffffff9457cd04:       push   %r12
    0.00 :   ffffffff9457cd06:       push   %rbx
    0.00 :   ffffffff9457cd07:       mov    %rdi,%rbx
    0.00 :   ffffffff9457cd0a:       pushf
    0.00 :   ffffffff9457cd0b:       pop    %rax
    0.00 :   ffffffff9457cd0c:       nopl   0x0(%rax)
    0.00 :   ffffffff9457cd10:       mov    %rax,%r12
    0.00 :   ffffffff9457cd13:       cli
    0.00 :   ffffffff9457cd14:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9457cd19:       incl   %gs:0x6bab4b28(%rip)        # 0x31848
    0.00 :   ffffffff9457cd20:       xor    %eax,%eax
    0.00 :   ffffffff9457cd22:       mov    $0x1,%edx
  100.00 :   ffffffff9457cd27:       lock cmpxchg %edx,(%rbx)
    0.00 :   ffffffff9457cd2b:       jne    0xffffffff9457cd4d
    0.00 :   ffffffff9457cd2d:       mov    %r12,%rax
    0.00 :   ffffffff9457cd30:       pop    %rbx
    0.00 :   ffffffff9457cd31:       pop    %r12
    0.00 :   ffffffff9457cd33:       pop    %rbp
    0.00 :   ffffffff9457cd34:       xor    %edx,%edx
    0.00 :   ffffffff9457cd36:       xor    %ecx,%ecx
    0.00 :   ffffffff9457cd38:       xor    %esi,%esi
    0.00 :   ffffffff9457cd3a:       xor    %edi,%edi
    0.00 :   ffffffff9457cd3c:       xor    %r8d,%r8d
    0.00 :   ffffffff9457cd3f:       xor    %r9d,%r9d
    0.00 :   ffffffff9457cd42:       xor    %r10d,%r10d
    0.00 :   ffffffff9457cd45:       xor    %r11d,%r11d
    0.00 :   ffffffff9457cd48:       ret
    0.00 :   ffffffff9457cd49:       int3
    0.00 :   ffffffff9457cd4a:       int3
    0.00 :   ffffffff9457cd4b:       int3
    0.00 :   ffffffff9457cd4c:       int3
    0.00 :   ffffffff9457cd4d:       mov    %eax,%esi
    0.00 :   ffffffff9457cd4f:       mov    %rbx,%rdi
    0.00 :   ffffffff9457cd52:       call   0xffffffff954ac810
    0.00 :   ffffffff9457cd57:       nop
    0.00 :   ffffffff9457cd58:       mov    %r12,%rax
    0.00 :   ffffffff9457cd5b:       pop    %rbx
    0.00 :   ffffffff9457cd5c:       pop    %r12
    0.00 :   ffffffff9457cd5e:       pop    %rbp
    0.00 :   ffffffff9457cd5f:       xor    %edx,%edx
    0.00 :   ffffffff9457cd61:       xor    %ecx,%ecx
    0.00 :   ffffffff9457cd63:       xor    %esi,%esi
    0.00 :   ffffffff9457cd65:       xor    %edi,%edi
    0.00 :   ffffffff9457cd67:       xor    %r8d,%r8d
    0.00 :   ffffffff9457cd6a:       xor    %r9d,%r9d
    0.00 :   ffffffff9457cd6d:       xor    %r10d,%r10d
    0.00 :   ffffffff9457cd70:       xor    %r11d,%r11d
    0.00 :   ffffffff9457cd73:       ret
    0.00 :   ffffffff9457cd74:       int3
    0.00 :   ffffffff9457cd75:       int3
    0.00 :   ffffffff9457cd76:       int3
    0.00 :   ffffffff9457cd77:       int3
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9454b560 <load0>:
   50.33 :   ffffffff9454b560:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9454b565:       push   %rbp
    0.00 :   ffffffff9454b566:       lea    0x80(%rsi),%rax
    0.00 :   ffffffff9454b56d:       mov    %rsp,%rbp
    0.00 :   ffffffff9454b570:       push   %r15
    0.00 :   ffffffff9454b572:       push   %r14
    0.00 :   ffffffff9454b574:       mov    %rdi,%r14
    0.00 :   ffffffff9454b577:       push   %r13
    0.00 :   ffffffff9454b579:       mov    %rsi,%r13
    0.00 :   ffffffff9454b57c:       push   %r12
   49.67 :   ffffffff9454b57e:       mov    %edx,%r12d
    0.00 :   ffffffff9454b581:       push   %rbx
    0.00 :   ffffffff9454b582:       mov    %rax,%rbx
    0.00 :   ffffffff9454b585:       sub    $0x48,%rsp
    0.00 :   ffffffff9454b589:       mov    %rax,-0x30(%rbp)
    0.00 :   ffffffff9454b58d:       test   %rax,%rax
    0.00 :   ffffffff9454b590:       jne    0xffffffff9454b5a4
    0.00 :   ffffffff9454b592:       jmp    0xffffffff9454b656
    0.00 :   ffffffff9454b597:       mov    0x70(%rbx),%rbx
    0.00 :   ffffffff9454b59b:       test   %rbx,%rbx
    0.00 :   ffffffff9454b59e:       je     0xffffffff9454b656
    0.00 :   ffffffff9454b5a4:       mov    0x78(%rbx),%r15
    0.00 :   ffffffff9454b5a8:       mov    %r15,%rdi
    0.00 :   ffffffff9454b5ab:       call   0xffffffff9454ac60
    0.00 :   ffffffff9454b5b0:       mov    %r15,%rdi
    0.00 :   ffffffff9454b5b3:       mov    $0x1,%edx
    0.00 :   ffffffff9454b5b8:       mov    %rbx,%rsi
    0.00 :   ffffffff9454b5bb:       call   0xffffffff94547aa0
    0.00 :   ffffffff9454b5c0:       mov    %rbx,%rdi
    0.00 :   ffffffff9454b5c3:       call   0xffffffff9454b040
    0.00 :   ffffffff9454b5c8:       test   %r12d,%r12d
    0.00 :   ffffffff9454b5cb:       jne    0xffffffff9454b63d
    0.00 :   ffffffff9454b5cd:       xchg   %ax,%ax
    0.00 :   ffffffff9454b5cf:       mov    0x130(%r15),%rax
    0.00 :   ffffffff9454b5d6:       lea    0xc40(%rax),%rdi
    0.00 :   ffffffff9454b5dd:       call   0xffffffff945d72e0
    0.00 :   ffffffff9454b5e2:       test   %al,%al
    0.00 :   ffffffff9454b5e4:       jne    0xffffffff9454b597
    0.00 :   ffffffff9454b5e6:       cmpl   $0x1,0x10(%r15)
    0.00 :   ffffffff9454b5eb:       jbe    0xffffffff9454b597
    0.00 :   ffffffff9454b5ed:       mov    %rbx,%rsi
    0.00 :   ffffffff9454b5f0:       mov    %r15,%rdi
    0.00 :   ffffffff9454b5f3:       call   0xffffffff94548f90
    0.00 :   ffffffff9454b5f8:       mov    0x48(%rbx),%rdx
    0.00 :   ffffffff9454b5fc:       sub    0x58(%rbx),%rdx
    0.00 :   ffffffff9454b600:       cmp    %rdx,%rax
    0.00 :   ffffffff9454b603:       jb     0xffffffff9454b901
    0.00 :   ffffffff9454b609:       mov    0x214908d(%rip),%ecx        # 0xffffffff9669469c
    0.00 :   ffffffff9454b60f:       cmp    %rcx,%rdx
    0.00 :   ffffffff9454b612:       jb     0xffffffff9454b597
    0.00 :   ffffffff9454b614:       mov    0x48(%r15),%rdx
    0.00 :   ffffffff9454b618:       lea    -0x10(%rdx),%rcx
    0.00 :   ffffffff9454b61c:       test   %rdx,%rdx
    0.00 :   ffffffff9454b61f:       cmovne %rcx,%rdx
    0.00 :   ffffffff9454b623:       mov    0x50(%rbx),%rcx
    0.00 :   ffffffff9454b627:       sub    0x50(%rdx),%rcx
    0.00 :   ffffffff9454b62b:       cmp    %rcx,%rax
    0.00 :   ffffffff9454b62e:       jae    0xffffffff9454b597
    0.00 :   ffffffff9454b634:       test   %rcx,%rcx
    0.00 :   ffffffff9454b637:       js     0xffffffff9454b597
    0.00 :   ffffffff9454b63d:       mov    0x130(%r15),%rdi
    0.00 :   ffffffff9454b644:       call   0xffffffff94536b40
    0.00 :   ffffffff9454b649:       mov    0x70(%rbx),%rbx
    0.00 :   ffffffff9454b64d:       test   %rbx,%rbx
    0.00 :   ffffffff9454b650:       jne    0xffffffff9454b5a4
    0.00 :   ffffffff9454b656:       xchg   %ax,%ax
    0.00 :   ffffffff9454b658:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9454b65d:       mov    $0x31fc0,%rdx
    0.00 :   ffffffff9454b664:       mov    0x14(%r13),%r12d
    0.00 :   ffffffff9454b668:       mov    %rdx,%rbx
    0.00 :   ffffffff9454b66b:       cmp    $0x1fff,%r12d
    0.00 :   ffffffff9454b672:       ja     0xffffffff9454bb09
    0.00 :   ffffffff9454b678:       add    -0x6a1a1540(,%r12,8),%rbx
    0.00 :   ffffffff9454b680:       mov    0xa80(%rbx),%rcx
    0.00 :   ffffffff9454b687:       mov    0x2c(%rcx),%eax
    0.00 :   ffffffff9454b68a:       test   %eax,%eax
    0.00 :   ffffffff9454b68c:       je     0xffffffff9454b91d
    0.00 :   ffffffff9454b692:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9454b697:       add    $0x48,%rsp
    0.00 :   ffffffff9454b69b:       pop    %rbx
    0.00 :   ffffffff9454b69c:       pop    %r12
    0.00 :   ffffffff9454b69e:       pop    %r13
    0.00 :   ffffffff9454b6a0:       pop    %r14
    0.00 :   ffffffff9454b6a2:       pop    %r15
    0.00 :   ffffffff9454b6a4:       pop    %rbp
    0.00 :   ffffffff9454b6a5:       xor    %eax,%eax
    0.00 :   ffffffff9454b6a7:       xor    %edx,%edx
    0.00 :   ffffffff9454b6a9:       xor    %ecx,%ecx
    0.00 :   ffffffff9454b6ab:       xor    %esi,%esi
    0.00 :   ffffffff9454b6ad:       xor    %edi,%edi
    0.00 :   ffffffff9454b6af:       xor    %r8d,%r8d
    0.00 :   ffffffff9454b6b2:       xor    %r9d,%r9d
    0.00 :   ffffffff9454b6b5:       xor    %r10d,%r10d
    0.00 :   ffffffff9454b6b8:       xor    %r11d,%r11d
    0.00 :   ffffffff9454b6bb:       ret
    0.00 :   ffffffff9454b6bc:       int3
    0.00 :   ffffffff9454b6bd:       int3
    0.00 :   ffffffff9454b6be:       int3
    0.00 :   ffffffff9454b6bf:       int3
    0.00 :   ffffffff9454b6c0:       mov    0x920(%r13),%rax
    0.00 :   ffffffff9454b6c7:       test   %rax,%rax
    0.00 :   ffffffff9454b6ca:       je     0xffffffff9454b658
    0.00 :   ffffffff9454b6cc:       testl  $0x200004,0x2c(%r13)
    0.00 :   ffffffff9454b6d4:       jne    0xffffffff9454b658
    0.00 :   ffffffff9454b6d6:       lea    0xef0(%r13),%r12
    0.00 :   ffffffff9454b6dd:       cmp    0xef0(%r13),%r12
    0.00 :   ffffffff9454b6e4:       jne    0xffffffff9454b658
    0.00 :   ffffffff9454b6ea:       mov    0xec0(%r13),%ebx
    0.00 :   ffffffff9454b6f1:       mov    0xed8(%r13),%rdx
    0.00 :   ffffffff9454b6f8:       imul   $0xf4240,%rbx,%rbx
    0.00 :   ffffffff9454b6ff:       add    %rdx,%rbx
    0.00 :   ffffffff9454b702:       cmp    %rbx,0xc8(%r13)
    0.00 :   ffffffff9454b709:       jbe    0xffffffff9454b658
    0.00 :   ffffffff9454b70f:       test   %rdx,%rdx
    0.00 :   ffffffff9454b712:       je     0xffffffff9454bae7
    0.00 :   ffffffff9454b718:       mov    %rbx,0xed8(%r13)
    0.00 :   ffffffff9454b71f:       mov    0x20bc29a(%rip),%rdx        # 0xffffffff966079c0
    0.00 :   ffffffff9454b726:       cmp    0x430(%rax),%rdx
    0.00 :   ffffffff9454b72d:       js     0xffffffff9454b658
    0.00 :   ffffffff9454b733:       mov    $0x1,%edx
    0.00 :   ffffffff9454b738:       mov    %r12,%rsi
    0.00 :   ffffffff9454b73b:       mov    %r13,%rdi
    0.00 :   ffffffff9454b73e:       call   0xffffffff94518ce0
    0.00 :   ffffffff9454b743:       jmp    0xffffffff9454b658
    0.00 :   ffffffff9454b748:       mov    0xd18(%r14),%edx
    0.00 :   ffffffff9454b74f:       test   %edx,%edx
    0.00 :   ffffffff9454b751:       je     0xffffffff9454b697
    0.00 :   ffffffff9454b757:       mov    0xd08(%r14),%rax
    0.00 :   ffffffff9454b75e:       mov    0xd38(%rax),%eax
    0.00 :   ffffffff9454b764:       test   %eax,%eax
    0.00 :   ffffffff9454b766:       je     0xffffffff9454b697
    0.00 :   ffffffff9454b76c:       cmpl   $0x1,0x110(%r14)
    0.00 :   ffffffff9454b774:       jne    0xffffffff9454b697
    0.00 :   ffffffff9454b77a:       mov    0xf8(%r13),%rdi
    0.00 :   ffffffff9454b781:       mov    -0x30(%rbp),%rsi
    0.00 :   ffffffff9454b785:       call   0xffffffff94548f90
    0.00 :   ffffffff9454b78a:       mov    %rax,%r8
    0.00 :   ffffffff9454b78d:       mov    0xc8(%r13),%rax
    0.00 :   ffffffff9454b794:       sub    0xd8(%r13),%rax
    0.00 :   ffffffff9454b79b:       add    %rax,%rax
    0.00 :   ffffffff9454b79e:       cmp    %rax,%r8
    0.00 :   ffffffff9454b7a1:       jae    0xffffffff9454b697
    0.00 :   ffffffff9454b7a7:       mov    %r14,%rdi
    0.00 :   ffffffff9454b7aa:       call   0xffffffff94536b40
    0.00 :   ffffffff9454b7af:       jmp    0xffffffff9454b697
    0.00 :   ffffffff9454b7b4:       test   %r13,%r13
    0.00 :   ffffffff9454b7b7:       je     0xffffffff9454ba79
    0.00 :   ffffffff9454b7bd:       cmpl   $0x1,0x410(%r13)
    0.00 :   ffffffff9454b7c5:       je     0xffffffff9454ba79
    0.00 :   ffffffff9454b7cb:       xor    %esi,%esi
    0.00 :   ffffffff9454b7cd:       mov    %r13,%rdi
    0.00 :   ffffffff9454b7d0:       mov    0xaf8(%r14),%ebx
    0.00 :   ffffffff9454b7d7:       call   0xffffffff94539450
    0.00 :   ffffffff9454b7dc:       mov    $0x1,%esi
    0.00 :   ffffffff9454b7e1:       mov    %r13,%rdi
    0.00 :   ffffffff9454b7e4:       mov    %rax,%r12
    0.00 :   ffffffff9454b7e7:       call   0xffffffff94539450
    0.00 :   ffffffff9454b7ec:       mov    0x170(%r13),%rcx
    0.00 :   ffffffff9454b7f3:       movslq %ebx,%r9
    0.00 :   ffffffff9454b7f6:       mov    0x178(%r13),%rdx
    0.00 :   ffffffff9454b7fd:       mov    %rax,%r8
    0.00 :   ffffffff9454b800:       mov    %edx,%eax
    0.00 :   ffffffff9454b802:       shr    $0x20,%rdx
    0.00 :   ffffffff9454b806:       and    $0x7fffffff,%eax
    0.00 :   ffffffff9454b80b:       cmp    %edx,%eax
    0.00 :   ffffffff9454b80d:       cmovb  %edx,%eax
    0.00 :   ffffffff9454b810:       mov    $0x31fc0,%rdx
    0.00 :   ffffffff9454b817:       mov    %eax,%eax
    0.00 :   ffffffff9454b819:       cmp    %rcx,%rax
    0.00 :   ffffffff9454b81c:       cmovb  %rcx,%rax
    0.00 :   ffffffff9454b820:       mov    %rdx,%rcx
    0.00 :   ffffffff9454b823:       cmp    $0x1fff,%r9
    0.00 :   ffffffff9454b82a:       ja     0xffffffff9454bccb
    0.00 :   ffffffff9454b830:       mov    -0x6a1a1540(,%r9,8),%r10
    0.00 :   ffffffff9454b838:       lea    (%rax,%rax,4),%rsi
    0.00 :   ffffffff9454b83c:       shl    $0x8,%rsi
    0.00 :   ffffffff9454b840:       mov    0xa90(%r10,%rcx,1),%rcx
    0.00 :   ffffffff9454b848:       shl    $0xa,%rcx
    0.00 :   ffffffff9454b84c:       cmp    %rcx,%rsi
    0.00 :   ffffffff9454b84f:       setb   %bl
    0.00 :   ffffffff9454b852:       jmp    0xffffffff9454badf
    0.00 :   ffffffff9454b857:       mov    %rdx,%rcx
    0.00 :   ffffffff9454b85a:       cmp    $0x1fff,%r9
    0.00 :   ffffffff9454b861:       ja     0xffffffff9454bb25
    0.00 :   ffffffff9454b867:       mov    0xaa0(%r10,%rcx,1),%rsi
    0.00 :   ffffffff9454b86f:       test   %rsi,%rsi
    0.00 :   ffffffff9454b872:       jne    0xffffffff9454b88c
    0.00 :   ffffffff9454b874:       mov    %rdx,%rcx
    0.00 :   ffffffff9454b877:       cmp    $0x1fff,%r9
    0.00 :   ffffffff9454b87e:       ja     0xffffffff9454bb69
    0.00 :   ffffffff9454b884:       mov    0xa98(%r10,%rcx,1),%rsi
    0.00 :   ffffffff9454b88c:       cmp    $0x400,%rsi
    0.00 :   ffffffff9454b893:       sete   %cl
    0.00 :   ffffffff9454b896:       cmp    $0x400,%r8
    0.00 :   ffffffff9454b89d:       sete   %dil
    0.00 :   ffffffff9454b8a1:       and    %edi,%ecx
    0.00 :   ffffffff9454b8a3:       xor    $0x1,%ecx
    0.00 :   ffffffff9454b8a6:       cmp    %rsi,%r8
    0.00 :   ffffffff9454b8a9:       setbe  %dil
    0.00 :   ffffffff9454b8ad:       and    %edi,%ecx
    0.00 :   ffffffff9454b8af:       or     %ebx,%ecx
    0.00 :   ffffffff9454b8b1:       cmp    %r8,%r12
    0.00 :   ffffffff9454b8b4:       cmova  %r8,%r12
    0.00 :   ffffffff9454b8b8:       cmp    %r12,%rax
    0.00 :   ffffffff9454b8bb:       jae    0xffffffff9454b8ce
    0.00 :   ffffffff9454b8bd:       cmp    $0x400,%rsi
    0.00 :   ffffffff9454b8c4:       je     0xffffffff9454b8ce
    0.00 :   ffffffff9454b8c6:       cmp    %r12,%rsi
    0.00 :   ffffffff9454b8c9:       setae  %al
    0.00 :   ffffffff9454b8cc:       and    %eax,%ecx
    0.00 :   ffffffff9454b8ce:       movzbl %cl,%eax
    0.00 :   ffffffff9454b8d1:       test   %eax,%eax
    0.00 :   ffffffff9454b8d3:       jne    0xffffffff9454ba80
    0.00 :   ffffffff9454b8d9:       mov    %r13,%rdi
    0.00 :   ffffffff9454b8dc:       mov    %rdx,-0x38(%rbp)
    0.00 :   ffffffff9454b8e0:       call   0xffffffff945414c0
    0.00 :   ffffffff9454b8e5:       mov    $0x1,%ecx
    0.00 :   ffffffff9454b8ea:       mov    -0x38(%rbp),%rdx
    0.00 :   ffffffff9454b8ee:       test   %rax,%rax
    0.00 :   ffffffff9454b8f1:       cmove  %rcx,%rax
    0.00 :   ffffffff9454b8f5:       mov    %rax,0xab8(%r14)
    0.00 :   ffffffff9454b8fc:       jmp    0xffffffff9454b664
    0.00 :   ffffffff9454b901:       mov    0x130(%r15),%rdi
    0.00 :   ffffffff9454b908:       call   0xffffffff94536b40
    0.00 :   ffffffff9454b90d:       mov    %rbx,%rsi
    0.00 :   ffffffff9454b910:       mov    %r15,%rdi
    0.00 :   ffffffff9454b913:       call   0xffffffff945413c0
    0.00 :   ffffffff9454b918:       jmp    0xffffffff9454b597
    0.00 :   ffffffff9454b91d:       movslq 0xaf8(%rbx),%rsi
    0.00 :   ffffffff9454b924:       mov    %rdx,%r12
    0.00 :   ffffffff9454b927:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b92e:       ja     0xffffffff9454bd81
    0.00 :   ffffffff9454b934:       mov    -0x6a1a1540(,%rsi,8),%rax
    0.00 :   ffffffff9454b93c:       add    %rax,%r12
    0.00 :   ffffffff9454b93f:       mov    0x80(%r12),%r8d
    0.00 :   ffffffff9454b947:       mov    %rdx,%r12
    0.00 :   ffffffff9454b94a:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b951:       ja     0xffffffff9454bd07
    0.00 :   ffffffff9454b957:       add    %rax,%r12
    0.00 :   ffffffff9454b95a:       mov    0xb0(%r12),%r10d
    0.00 :   ffffffff9454b962:       mov    %rdx,%r12
    0.00 :   ffffffff9454b965:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b96c:       ja     0xffffffff9454bd40
    0.00 :   ffffffff9454b972:       lea    (%rax,%r12,1),%rdi
    0.00 :   ffffffff9454b976:       mov    0x1b0(%rdi),%r12
    0.00 :   ffffffff9454b97d:       xchg   %ax,%ax
    0.00 :   ffffffff9454b97f:       mov    0x1b8(%rdi),%edi
    0.00 :   ffffffff9454b985:       cmp    %rdi,%r12
    0.00 :   ffffffff9454b988:       cmovb  %rdi,%r12
    0.00 :   ffffffff9454b98c:       mov    %rdx,%r9
    0.00 :   ffffffff9454b98f:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b996:       ja     0xffffffff9454bbe7
    0.00 :   ffffffff9454b99c:       mov    0xa98(%rax,%r9,1),%rdi
    0.00 :   ffffffff9454b9a4:       mov    %rdx,%r9
    0.00 :   ffffffff9454b9a7:       cmp    %rdi,%r12
    0.00 :   ffffffff9454b9aa:       cmova  %rdi,%r12
    0.00 :   ffffffff9454b9ae:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b9b5:       ja     0xffffffff9454bc82
    0.00 :   ffffffff9454b9bb:       mov    0xa90(%rax,%r9,1),%rdi
    0.00 :   ffffffff9454b9c3:       lea    (%r12,%r12,4),%r11
    0.00 :   ffffffff9454b9c7:       shl    $0x8,%r11
    0.00 :   ffffffff9454b9cb:       shl    $0xa,%rdi
    0.00 :   ffffffff9454b9cf:       cmp    %rdi,%r11
    0.00 :   ffffffff9454b9d2:       setb   %r11b
    0.00 :   ffffffff9454b9d6:       jmp    0xffffffff9454ba73
    0.00 :   ffffffff9454b9db:       mov    %rdx,%r9
    0.00 :   ffffffff9454b9de:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b9e5:       ja     0xffffffff9454bc30
    0.00 :   ffffffff9454b9eb:       mov    0xaa0(%rax,%r9,1),%rdi
    0.00 :   ffffffff9454b9f3:       test   %rdi,%rdi
    0.00 :   ffffffff9454b9f6:       jne    0xffffffff9454ba0d
    0.00 :   ffffffff9454b9f8:       cmp    $0x1fff,%rsi
    0.00 :   ffffffff9454b9ff:       ja     0xffffffff9454bba5
    0.00 :   ffffffff9454ba05:       mov    0xa98(%rax,%rdx,1),%rdi
    0.00 :   ffffffff9454ba0d:       cmp    $0x400,%rdi
    0.00 :   ffffffff9454ba14:       mov    %r10d,%edx
    0.00 :   ffffffff9454ba17:       sete   %al
    0.00 :   ffffffff9454ba1a:       cmp    $0x400,%r10d
    0.00 :   ffffffff9454ba21:       sete   %sil
    0.00 :   ffffffff9454ba25:       and    %esi,%eax
    0.00 :   ffffffff9454ba27:       xor    $0x1,%eax
    0.00 :   ffffffff9454ba2a:       cmp    %rdi,%rdx
    0.00 :   ffffffff9454ba2d:       setbe  %sil
    0.00 :   ffffffff9454ba31:       and    %esi,%eax
    0.00 :   ffffffff9454ba33:       or     %r11d,%eax
    0.00 :   ffffffff9454ba36:       cmp    %rdx,%r8
    0.00 :   ffffffff9454ba39:       cmova  %rdx,%r8
    0.00 :   ffffffff9454ba3d:       cmp    %r12,%r8
    0.00 :   ffffffff9454ba40:       jbe    0xffffffff9454ba53
    0.00 :   ffffffff9454ba42:       cmp    $0x400,%rdi
    0.00 :   ffffffff9454ba49:       je     0xffffffff9454ba53
    0.00 :   ffffffff9454ba4b:       cmp    %r8,%rdi
    0.00 :   ffffffff9454ba4e:       setae  %dl
    0.00 :   ffffffff9454ba51:       and    %edx,%eax
    0.00 :   ffffffff9454ba53:       movzbl %al,%eax
    0.00 :   ffffffff9454ba56:       test   %eax,%eax
    0.00 :   ffffffff9454ba58:       jne    0xffffffff9454b692
    0.00 :   ffffffff9454ba5e:       movl   $0x2,0x2c(%rcx)
    0.00 :   ffffffff9454ba65:       mov    0xa80(%rbx),%rsi
    0.00 :   ffffffff9454ba6c:       xchg   %ax,%ax
    0.00 :   ffffffff9454ba6e:       jmp    0xffffffff9454b692
    0.00 :   ffffffff9454ba73:       movzbl %r11b,%eax
    0.00 :   ffffffff9454ba77:       jmp    0xffffffff9454ba56
    0.00 :   ffffffff9454ba79:       mov    $0x31fc0,%rdx
    0.00 :   ffffffff9454ba80:       movq   $0x0,0xab8(%r14)
    0.00 :   ffffffff9454ba8b:       jmp    0xffffffff9454b664
    0.00 :   ffffffff9454ba90:       mov    %gs:0x6bae5db5(%rip),%eax        # 0x3184c
    0.00 :   ffffffff9454ba97:       mov    %eax,%eax
    0.00 :   ffffffff9454ba99:       bt     %rax,0x24b507f(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff9454baa1:       jae    0xffffffff9454b692
    0.00 :   ffffffff9454baa7:       incl   %gs:0x6bae5d9a(%rip)        # 0x31848
    0.00 :   ffffffff9454baae:       mov    0x2469d2b(%rip),%rax        # 0xffffffff969b57e0
    0.00 :   ffffffff9454bab5:       test   %rax,%rax
    0.00 :   ffffffff9454bab8:       je     0xffffffff9454bac8
    0.00 :   ffffffff9454baba:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff9454babe:       mov    $0x1,%edx
    0.00 :   ffffffff9454bac3:       call   0xffffffff9452bf10
    0.00 :   ffffffff9454bac8:       decl   %gs:0x6bae5d79(%rip)        # 0x31848
    0.00 :   ffffffff9454bacf:       jne    0xffffffff9454b692
    0.00 :   ffffffff9454bad5:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9454bada:       jmp    0xffffffff9454b692
    0.00 :   ffffffff9454badf:       movzbl %bl,%eax
    0.00 :   ffffffff9454bae2:       jmp    0xffffffff9454b8d1
    0.00 :   ffffffff9454bae7:       mov    %r13,%rdi
    0.00 :   ffffffff9454baea:       call   0xffffffff945425e0
    0.00 :   ffffffff9454baef:       add    0xed8(%r13),%rbx
    0.00 :   ffffffff9454baf6:       mov    %eax,0xec0(%r13)
    0.00 :   ffffffff9454bafd:       mov    0x920(%r13),%rax
    0.00 :   ffffffff9454bb04:       jmp    0xffffffff9454b718
    0.00 :   ffffffff9454bb09:       mov    %r12,%rsi
    0.00 :   ffffffff9454bb0c:       mov    $0xffffffff966937a0,%rdi
    0.00 :   ffffffff9454bb13:       mov    %rdx,-0x38(%rbp)
    0.00 :   ffffffff9454bb17:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bb1c:       mov    -0x38(%rbp),%rdx
    0.00 :   ffffffff9454bb20:       jmp    0xffffffff9454b678
    0.00 :   ffffffff9454bb25:       mov    %r9,%rsi
    0.00 :   ffffffff9454bb28:       mov    $0xffffffff966937e0,%rdi
    0.00 :   ffffffff9454bb2f:       mov    %rdx,-0x60(%rbp)
    0.00 :   ffffffff9454bb33:       mov    %rcx,-0x58(%rbp)
    0.00 :   ffffffff9454bb37:       mov    %r10,-0x50(%rbp)
    0.00 :   ffffffff9454bb3b:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bb3f:       mov    %r8,-0x40(%rbp)
    0.00 :   ffffffff9454bb43:       mov    %r9,-0x38(%rbp)
    0.00 :   ffffffff9454bb47:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bb4c:       mov    -0x60(%rbp),%rdx
    0.00 :   ffffffff9454bb50:       mov    -0x58(%rbp),%rcx
    0.00 :   ffffffff9454bb54:       mov    -0x50(%rbp),%r10
    0.00 :   ffffffff9454bb58:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bb5c:       mov    -0x40(%rbp),%r8
    0.00 :   ffffffff9454bb60:       mov    -0x38(%rbp),%r9
    0.00 :   ffffffff9454bb64:       jmp    0xffffffff9454b867
    0.00 :   ffffffff9454bb69:       mov    %r9,%rsi
    0.00 :   ffffffff9454bb6c:       mov    $0xffffffff966937c0,%rdi
    0.00 :   ffffffff9454bb73:       mov    %rdx,-0x58(%rbp)
    0.00 :   ffffffff9454bb77:       mov    %rcx,-0x50(%rbp)
    0.00 :   ffffffff9454bb7b:       mov    %r10,-0x48(%rbp)
    0.00 :   ffffffff9454bb7f:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff9454bb83:       mov    %r8,-0x38(%rbp)
    0.00 :   ffffffff9454bb87:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bb8c:       mov    -0x58(%rbp),%rdx
    0.00 :   ffffffff9454bb90:       mov    -0x50(%rbp),%rcx
    0.00 :   ffffffff9454bb94:       mov    -0x48(%rbp),%r10
    0.00 :   ffffffff9454bb98:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff9454bb9c:       mov    -0x38(%rbp),%r8
    0.00 :   ffffffff9454bba0:       jmp    0xffffffff9454b884
    0.00 :   ffffffff9454bba5:       mov    $0xffffffff966936c0,%rdi
    0.00 :   ffffffff9454bbac:       mov    %rdx,-0x60(%rbp)
    0.00 :   ffffffff9454bbb0:       mov    %r11b,-0x58(%rbp)
    0.00 :   ffffffff9454bbb4:       mov    %r10d,-0x50(%rbp)
    0.00 :   ffffffff9454bbb8:       mov    %r8d,-0x48(%rbp)
    0.00 :   ffffffff9454bbbc:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff9454bbc0:       mov    %rcx,-0x38(%rbp)
    0.00 :   ffffffff9454bbc4:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bbc9:       mov    -0x60(%rbp),%rdx
    0.00 :   ffffffff9454bbcd:       movzbl -0x58(%rbp),%r11d
    0.00 :   ffffffff9454bbd2:       mov    -0x50(%rbp),%r10d
    0.00 :   ffffffff9454bbd6:       mov    -0x48(%rbp),%r8d
    0.00 :   ffffffff9454bbda:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff9454bbde:       mov    -0x38(%rbp),%rcx
    0.00 :   ffffffff9454bbe2:       jmp    0xffffffff9454ba05
    0.00 :   ffffffff9454bbe7:       mov    $0xffffffff96693720,%rdi
    0.00 :   ffffffff9454bbee:       mov    %rdx,-0x68(%rbp)
    0.00 :   ffffffff9454bbf2:       mov    %r9,-0x60(%rbp)
    0.00 :   ffffffff9454bbf6:       mov    %r10d,-0x58(%rbp)
    0.00 :   ffffffff9454bbfa:       mov    %r8d,-0x50(%rbp)
    0.00 :   ffffffff9454bbfe:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bc02:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bc06:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bc0a:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bc0f:       mov    -0x68(%rbp),%rdx
    0.00 :   ffffffff9454bc13:       mov    -0x60(%rbp),%r9
    0.00 :   ffffffff9454bc17:       mov    -0x58(%rbp),%r10d
    0.00 :   ffffffff9454bc1b:       mov    -0x50(%rbp),%r8d
    0.00 :   ffffffff9454bc1f:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bc23:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bc27:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bc2b:       jmp    0xffffffff9454b99c
    0.00 :   ffffffff9454bc30:       mov    $0xffffffff966936e0,%rdi
    0.00 :   ffffffff9454bc37:       mov    %rdx,-0x70(%rbp)
    0.00 :   ffffffff9454bc3b:       mov    %r9,-0x68(%rbp)
    0.00 :   ffffffff9454bc3f:       mov    %r11b,-0x60(%rbp)
    0.00 :   ffffffff9454bc43:       mov    %r10d,-0x58(%rbp)
    0.00 :   ffffffff9454bc47:       mov    %r8d,-0x50(%rbp)
    0.00 :   ffffffff9454bc4b:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bc4f:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bc53:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bc57:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bc5c:       mov    -0x70(%rbp),%rdx
    0.00 :   ffffffff9454bc60:       mov    -0x68(%rbp),%r9
    0.00 :   ffffffff9454bc64:       movzbl -0x60(%rbp),%r11d
    0.00 :   ffffffff9454bc69:       mov    -0x58(%rbp),%r10d
    0.00 :   ffffffff9454bc6d:       mov    -0x50(%rbp),%r8d
    0.00 :   ffffffff9454bc71:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bc75:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bc79:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bc7d:       jmp    0xffffffff9454b9eb
    0.00 :   ffffffff9454bc82:       mov    $0xffffffff96693700,%rdi
    0.00 :   ffffffff9454bc89:       mov    %rdx,-0x68(%rbp)
    0.00 :   ffffffff9454bc8d:       mov    %r9,-0x60(%rbp)
    0.00 :   ffffffff9454bc91:       mov    %r10d,-0x58(%rbp)
    0.00 :   ffffffff9454bc95:       mov    %r8d,-0x50(%rbp)
    0.00 :   ffffffff9454bc99:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bc9d:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bca1:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bca5:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bcaa:       mov    -0x68(%rbp),%rdx
    0.00 :   ffffffff9454bcae:       mov    -0x60(%rbp),%r9
    0.00 :   ffffffff9454bcb2:       mov    -0x58(%rbp),%r10d
    0.00 :   ffffffff9454bcb6:       mov    -0x50(%rbp),%r8d
    0.00 :   ffffffff9454bcba:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bcbe:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bcc2:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bcc6:       jmp    0xffffffff9454b9bb
    0.00 :   ffffffff9454bccb:       mov    %r9,%rsi
    0.00 :   ffffffff9454bcce:       mov    $0xffffffff96693800,%rdi
    0.00 :   ffffffff9454bcd5:       mov    %rdx,-0x58(%rbp)
    0.00 :   ffffffff9454bcd9:       mov    %rcx,-0x50(%rbp)
    0.00 :   ffffffff9454bcdd:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bce1:       mov    %r8,-0x40(%rbp)
    0.00 :   ffffffff9454bce5:       mov    %r9,-0x38(%rbp)
    0.00 :   ffffffff9454bce9:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bcee:       mov    -0x58(%rbp),%rdx
    0.00 :   ffffffff9454bcf2:       mov    -0x50(%rbp),%rcx
    0.00 :   ffffffff9454bcf6:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bcfa:       mov    -0x40(%rbp),%r8
    0.00 :   ffffffff9454bcfe:       mov    -0x38(%rbp),%r9
    0.00 :   ffffffff9454bd02:       jmp    0xffffffff9454b830
    0.00 :   ffffffff9454bd07:       mov    $0xffffffff96693760,%rdi
    0.00 :   ffffffff9454bd0e:       mov    %rdx,-0x58(%rbp)
    0.00 :   ffffffff9454bd12:       mov    %r8d,-0x50(%rbp)
    0.00 :   ffffffff9454bd16:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bd1a:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bd1e:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bd22:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bd27:       mov    -0x58(%rbp),%rdx
    0.00 :   ffffffff9454bd2b:       mov    -0x50(%rbp),%r8d
    0.00 :   ffffffff9454bd2f:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bd33:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bd37:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bd3b:       jmp    0xffffffff9454b957
    0.00 :   ffffffff9454bd40:       mov    $0xffffffff96693740,%rdi
    0.00 :   ffffffff9454bd47:       mov    %rdx,-0x60(%rbp)
    0.00 :   ffffffff9454bd4b:       mov    %r10d,-0x58(%rbp)
    0.00 :   ffffffff9454bd4f:       mov    %r8d,-0x50(%rbp)
    0.00 :   ffffffff9454bd53:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff9454bd57:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bd5b:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bd5f:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bd64:       mov    -0x60(%rbp),%rdx
    0.00 :   ffffffff9454bd68:       mov    -0x58(%rbp),%r10d
    0.00 :   ffffffff9454bd6c:       mov    -0x50(%rbp),%r8d
    0.00 :   ffffffff9454bd70:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9454bd74:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bd78:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bd7c:       jmp    0xffffffff9454b972
    0.00 :   ffffffff9454bd81:       mov    $0xffffffff96693780,%rdi
    0.00 :   ffffffff9454bd88:       mov    %rdx,-0x48(%rbp)
    0.00 :   ffffffff9454bd8c:       mov    %rcx,-0x40(%rbp)
    0.00 :   ffffffff9454bd90:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454bd94:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9454bd99:       mov    -0x48(%rbp),%rdx
    0.00 :   ffffffff9454bd9d:       mov    -0x40(%rbp),%rcx
    0.00 :   ffffffff9454bda1:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff9454bda5:       jmp    0xffffffff9454b934
 Percent |	Source code & Disassembly of libc.so.6 for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000075030 <__vfprintf_internal>:
         : 6     __vfprintf_internal():
         : 7     ./stdio-common/vfprintf-internal.c:1180
    0.00 :   75030:  endbr64
    0.00 :   75034:  push   %r15
    0.00 :   75036:  push   %r14
    0.00 :   75038:  push   %r13
    0.00 :   7503a:  push   %r12
    0.00 :   7503c:  push   %rbp
    0.00 :   7503d:  mov    %rdi,%rbp
    0.00 :   75040:  push   %rbx
    0.00 :   75041:  sub    $0x538,%rsp
    0.00 :   75048:  mov    %rsi,0x8(%rsp)
    0.00 :   7504d:  mov    %rdx,0x20(%rsp)
    0.00 :   75052:  mov    %ecx,0x7c(%rsp)
         : 20    ./stdio-common/vfprintf-internal.c:1210
    0.00 :   75056:  mov    %fs:0x28,%rax
    0.00 :   7505f:  mov    %rax,0x528(%rsp)
    0.00 :   75067:  mov    0x1a3da2(%rip),%rax        # 218e10 <_DYNAMIC+0x250>
    0.00 :   7506e:  mov    %fs:(%rax),%eax
    0.00 :   75071:  mov    %eax,0x90(%rsp)
         : 26    ./stdio-common/vfprintf-internal.c:1218
    0.00 :   75078:  mov    0xc0(%rdi),%eax
    0.00 :   7507e:  test   %eax,%eax
    0.00 :   75080:  jne    75500 <__vfprintf_internal+0x4d0>
         : 30    ./stdio-common/vfprintf-internal.c:1218 (discriminator 3)
    0.00 :   75086:  movl   $0xffffffff,0xc0(%rdi)
         : 32    ./stdio-common/vfprintf-internal.c:1222
    0.00 :   75090:  mov    0x0(%rbp),%ebx
    0.00 :   75093:  test   $0x8,%bl
    0.00 :   75096:  jne    77380 <__vfprintf_internal+0x2350>
         : 36    ./stdio-common/vfprintf-internal.c:1222 (discriminator 2)
    0.00 :   7509c:  cmpq   $0x0,0x8(%rsp)
    0.00 :   750a2:  je     77440 <__vfprintf_internal+0x2410>
         : 39    ./stdio-common/vfprintf-internal.c:1233
    0.00 :   750a8:  test   $0x2,%bl
    0.00 :   750ab:  jne    76620 <__vfprintf_internal+0x15f0>
         : 42    ./stdio-common/vfprintf-internal.c:1244
    0.00 :   750b1:  mov    0x20(%rsp),%rax
         : 44    __find_specmb():
         : 45    ./stdio-common/printf-parse.h:111
    0.00 :   750b6:  mov    0x8(%rsp),%rdi
    0.00 :   750bb:  mov    $0x25,%esi
         : 48    __vfprintf_internal():
         : 49    ./stdio-common/vfprintf-internal.c:1244
    0.00 :   750c0:  movdqu (%rax),%xmm1
    0.00 :   750c4:  movups %xmm1,0x118(%rsp)
    0.00 :   750cc:  mov    0x10(%rax),%rax
    0.00 :   750d0:  movaps %xmm1,0x10(%rsp)
    0.00 :   750d5:  mov    %rax,0x128(%rsp)
         : 55    __find_specmb():
         : 56    ./stdio-common/printf-parse.h:111
    0.00 :   750dd:  call   284d0 <*ABS*+0xab010@plt>
         : 58    __vfprintf_internal():
         : 59    ./stdio-common/vfprintf-internal.c:1259
    0.00 :   750e2:  mov    %rbp,0xf8(%rsp)
         : 61    __find_specmb():
         : 62    ./stdio-common/printf-parse.h:111
    0.00 :   750ea:  mov    %rax,0x68(%rsp)
         : 64    __vfprintf_internal():
         : 65    ./stdio-common/vfprintf-internal.c:1259
    0.00 :   750ef:  movb   $0x0,0xa6(%rsp)
    0.00 :   750f7:  and    $0x80,%bh
    0.00 :   750fa:  je     75518 <__vfprintf_internal+0x4e8>
         : 69    outstring_func():
         : 70    ./stdio-common/vfprintf-internal.c:239 (discriminator 12)
    0.00 :   75100:  mov    0xd8(%rbp),%r12
         : 72    IO_validate_vtable():
         : 73    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   75107:  lea    0x1a165a(%rip),%rax        # 216768 <__stop___libc_IO_vtables>
         : 75    __vfprintf_internal():
         : 76    ./stdio-common/vfprintf-internal.c:1263 (discriminator 12)
    0.00 :   7510e:  mov    0x68(%rsp),%rbx
         : 78    IO_validate_vtable():
         : 79    ./stdio-common/../libio/libioP.h:942 (discriminator 12)
    0.00 :   75113:  lea    0x1a08e6(%rip),%rcx        # 215a00 <_IO_helper_jumps>
         : 81    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   7511a:  sub    0x1a26f7(%rip),%rax        # 217818 <tryfunc.0+0x18>
         : 83    __vfprintf_internal():
         : 84    ./stdio-common/vfprintf-internal.c:1263 (discriminator 12)
    0.00 :   75121:  sub    0x8(%rsp),%rbx
         : 86    IO_validate_vtable():
         : 87    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   75126:  mov    %rax,0x30(%rsp)
    0.00 :   7512b:  mov    %rax,%rdi
         : 90    ./stdio-common/../libio/libioP.h:942 (discriminator 12)
    0.00 :   7512e:  mov    %r12,%rax
    0.00 :   75131:  sub    %rcx,%rax
         : 93    ./stdio-common/../libio/libioP.h:943 (discriminator 12)
    0.00 :   75134:  cmp    %rax,%rdi
    0.00 :   75137:  jbe    769d0 <__vfprintf_internal+0x19a0>
         : 96    outstring_func():
         : 97    ./stdio-common/vfprintf-internal.c:239
    0.00 :   7513d:  mov    0x8(%rsp),%rsi
    0.00 :   75142:  mov    %rbx,%rdx
    0.00 :   75145:  mov    %rbp,%rdi
    0.00 :   75148:  call   *0x38(%r12)
    0.00 :   7514d:  cmp    %rax,%rbx
    0.00 :   75150:  jne    76728 <__vfprintf_internal+0x16f8>
         : 104   done_add_func():
         : 105   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75156:  movslq %ebx,%rdx
    0.00 :   75159:  mov    %rbx,%rax
    0.00 :   7515c:  mov    %ebx,%r12d
    0.00 :   7515f:  shr    $0x3f,%rax
    0.00 :   75163:  cmp    %rdx,%rbx
    0.00 :   75166:  mov    $0x1,%edx
    0.00 :   7516b:  cmovne %edx,%eax
    0.00 :   7516e:  test   %eax,%eax
    0.00 :   75170:  jne    75860 <__vfprintf_internal+0x830>
         : 115   __vfprintf_internal():
         : 116   ./stdio-common/vfprintf-internal.c:1263
    0.00 :   75176:  test   %ebx,%ebx
    0.00 :   75178:  js     7533d <__vfprintf_internal+0x30d>
         : 119   ./stdio-common/vfprintf-internal.c:1267 (discriminator 2)
    0.00 :   7517e:  mov    0x68(%rsp),%r13
    0.00 :   75183:  cmpb   $0x0,0x0(%r13)
    0.00 :   75188:  je     7533d <__vfprintf_internal+0x30d>
         : 123   ./stdio-common/vfprintf-internal.c:1271
    0.00 :   7518e:  mov    0x1a6833(%rip),%rbx        # 21b9c8 <__printf_function_table>
    0.00 :   75195:  mov    %rbx,0x98(%rsp)
    0.00 :   7519d:  test   %rbx,%rbx
    0.00 :   751a0:  jne    77128 <__vfprintf_internal+0x20f8>
         : 128   ./stdio-common/vfprintf-internal.c:1271 (discriminator 2)
    0.00 :   751a6:  cmpq   $0x0,0x1a682a(%rip)        # 21b9d8 <__printf_modifier_table>
    0.00 :   751ae:  jne    752c8 <__vfprintf_internal+0x298>
         : 131   ./stdio-common/vfprintf-internal.c:1271
    0.00 :   751b4:  cmpq   $0x0,0x1a56fc(%rip)        # 21a8b8 <__printf_va_arg_table>
    0.00 :   751bc:  jne    752c8 <__vfprintf_internal+0x298>
         : 134   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   751c2:  mov    0x7c(%rsp),%eax
         : 136   ./stdio-common/vfprintf-internal.c:1214
    0.00 :   751c6:  movl   $0x0,0xa0(%rsp)
         : 138   ./stdio-common/vfprintf-internal.c:1248
    0.00 :   751d1:  movl   $0x0,0x78(%rsp)
         : 140   ./stdio-common/vfprintf-internal.c:1240
    0.00 :   751d9:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 142   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   751e5:  mov    %eax,%ebx
    0.00 :   751e7:  and    $0x1,%ebx
    0.00 :   751ea:  mov    %bl,0xa7(%rsp)
         : 146   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   751f1:  mov    %eax,%ebx
         : 148   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   751f3:  and    $0x2,%eax
         : 150   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   751f6:  and    $0x8,%ebx
         : 152   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   751f9:  mov    %eax,0xa8(%rsp)
         : 154   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   75200:  mov    %ebx,0xac(%rsp)
    0.00 :   75207:  nopw   0x0(%rax,%rax,1)
         : 157   ./stdio-common/vfprintf-internal.c:1313
    0.00 :   75210:  lea    0x1(%r13),%rbx
    0.00 :   75214:  movzbl 0x1(%r13),%r13d
    0.00 :   75219:  lea    0x550(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75220:  lea    -0x20(%r13),%eax
    0.00 :   75224:  cmp    $0x5a,%al
    0.00 :   75226:  ja     75251 <__vfprintf_internal+0x221>
         : 164   ./stdio-common/vfprintf-internal.c:1313 (discriminator 1)
    0.00 :   75228:  movsbl %r13b,%eax
    0.00 :   7522c:  lea    0x15c4ad(%rip),%rdx        # 1d16e0 <jump_table>
    0.00 :   75233:  lea    0x15c426(%rip),%rdi        # 1d1660 <step0_jumps.9>
    0.00 :   7523a:  sub    $0x20,%eax
    0.00 :   7523d:  cltq
    0.00 :   7523f:  movzbl (%rdx,%rax,1),%eax
    0.00 :   75243:  movslq (%rdi,%rax,4),%rsi
    0.00 :   75247:  lea    0x522(%rip),%rax        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7524e:  add    %rax,%rsi
         : 174   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
    0.00 :   75251:  mov    0x1a3d18(%rip),%rax        # 218f70 <_DYNAMIC+0x3b0>
         : 176   ./stdio-common/vfprintf-internal.c:1301 (discriminator 4)
    0.00 :   75258:  xor    %r11d,%r11d
         : 178   ./stdio-common/vfprintf-internal.c:1300 (discriminator 4)
    0.00 :   7525b:  xor    %r10d,%r10d
         : 180   ./stdio-common/vfprintf-internal.c:1299 (discriminator 4)
    0.00 :   7525e:  xor    %r15d,%r15d
         : 182   ./stdio-common/vfprintf-internal.c:1298 (discriminator 4)
    0.00 :   75261:  xor    %edx,%edx
         : 184   ./stdio-common/vfprintf-internal.c:1303 (discriminator 4)
    0.00 :   75263:  mov    $0xffffffff,%r14d
         : 186   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   75269:  lea    0x15c1f0(%rip),%r8        # 1d1460 <step4_jumps.5>
         : 188   read_int():
         : 189   ./stdio-common/printf-parse.h:88 (discriminator 4)
    0.00 :   75270:  mov    $0x7fffffff,%r9d
         : 191   __vfprintf_internal():
         : 192   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
   49.73 :   75276:  mov    %fs:(%rax),%rax
         : 194   ./stdio-common/vfprintf-internal.c:1306 (discriminator 4)
    0.00 :   7527a:  movl   $0x0,0x5c(%rsp)
         : 196   ./stdio-common/vfprintf-internal.c:1302 (discriminator 4)
    0.00 :   75282:  movl   $0x0,0x10(%rsp)
         : 198   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
    0.00 :   7528a:  mov    %rax,0x60(%rsp)
         : 200   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   7528f:  lea    0x15c44a(%rip),%rax        # 1d16e0 <jump_table>
         : 202   ./stdio-common/vfprintf-internal.c:1295 (discriminator 4)
    0.00 :   75296:  movl   $0x0,0x50(%rsp)
         : 204   ./stdio-common/vfprintf-internal.c:1294 (discriminator 4)
    0.00 :   7529e:  movl   $0x0,0x40(%rsp)
         : 206   ./stdio-common/vfprintf-internal.c:1293 (discriminator 4)
    0.00 :   752a6:  movl   $0x0,0x28(%rsp)
         : 208   ./stdio-common/vfprintf-internal.c:1292 (discriminator 4)
    0.00 :   752ae:  movl   $0x0,0x58(%rsp)
         : 210   ./stdio-common/vfprintf-internal.c:1291 (discriminator 4)
    0.00 :   752b6:  movl   $0x0,0x4c(%rsp)
         : 212   ./stdio-common/vfprintf-internal.c:1307 (discriminator 4)
    0.00 :   752be:  movb   $0x20,0x38(%rsp)
    0.00 :   752c3:  jmp    *%rsi
    0.00 :   752c5:  nopl   (%rax)
         : 216   ./stdio-common/vfprintf-internal.c:1214
    0.00 :   752c8:  movl   $0x0,0xa0(%rsp)
         : 218   ./stdio-common/vfprintf-internal.c:1240
    0.00 :   752d3:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 220   ./stdio-common/vfprintf-internal.c:1602
    0.00 :   752df:  sub    $0x8,%rsp
    0.00 :   752e3:  mov    %r12d,%r9d
    0.00 :   752e6:  mov    %rbp,%rdi
    0.00 :   752e9:  mov    0x84(%rsp),%ebx
    0.00 :   752f0:  push   %rbx
    0.00 :   752f1:  push   0xa8(%rsp)
    0.00 :   752f8:  push   0x98(%rsp)
    0.00 :   752ff:  mov    0xb0(%rsp),%ebx
    0.00 :   75306:  push   %rbx
    0.00 :   75307:  lea    0x168(%rsp),%rdx
    0.00 :   7530f:  push   %rdx
    0.00 :   75310:  push   0x98(%rsp)
    0.00 :   75317:  push   %rax
    0.00 :   75318:  mov    0x60(%rsp),%rcx
    0.00 :   7531d:  mov    0xe0(%rsp),%edx
    0.00 :   75324:  mov    0x48(%rsp),%rsi
    0.00 :   75329:  lea    0x158(%rsp),%r8
    0.00 :   75331:  call   72b40 <printf_positional>
    0.00 :   75336:  add    $0x40,%rsp
    0.00 :   7533a:  mov    %eax,%r12d
         : 241   ./stdio-common/vfprintf-internal.c:1608
    0.00 :   7533d:  testl  $0x8000,0x0(%rbp)
    0.00 :   75344:  je     75380 <__vfprintf_internal+0x350>
         : 244   ./stdio-common/vfprintf-internal.c:1609 (discriminator 23)
    0.00 :   75346:  cmpb   $0x0,0xa6(%rsp)
    0.00 :   7534e:  jne    75588 <__vfprintf_internal+0x558>
         : 247   ./stdio-common/vfprintf-internal.c:1612
    0.00 :   75354:  mov    0x528(%rsp),%rax
    0.00 :   7535c:  sub    %fs:0x28,%rax
    0.00 :   75365:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   7536b:  add    $0x538,%rsp
    0.00 :   75372:  mov    %r12d,%eax
    0.00 :   75375:  pop    %rbx
    0.00 :   75376:  pop    %rbp
    0.00 :   75377:  pop    %r12
    0.00 :   75379:  pop    %r13
    0.00 :   7537b:  pop    %r14
    0.00 :   7537d:  pop    %r15
    0.00 :   7537f:  ret
         : 260   ./stdio-common/vfprintf-internal.c:1608 (discriminator 1)
    0.00 :   75380:  mov    0x88(%rbp),%rdi
    0.00 :   75387:  mov    0x4(%rdi),%eax
    0.00 :   7538a:  sub    $0x1,%eax
    0.00 :   7538d:  mov    %eax,0x4(%rdi)
    0.00 :   75390:  jne    75346 <__vfprintf_internal+0x316>
         : 266   ./stdio-common/vfprintf-internal.c:1608 (discriminator 3)
    0.00 :   75392:  movq   $0x0,0x8(%rdi)
    0.00 :   7539a:  xchg   %eax,(%rdi)
    0.00 :   7539c:  cmp    $0x1,%eax
    0.00 :   7539f:  jle    75346 <__vfprintf_internal+0x316>
         : 271   ./stdio-common/vfprintf-internal.c:1608 (discriminator 20)
    0.00 :   753a1:  call   91300 <__lll_lock_wake_private>
    0.00 :   753a6:  jmp    75346 <__vfprintf_internal+0x316>
    0.00 :   753a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   753b0:  endbr64
         : 276   ./stdio-common/vfprintf-internal.c:1496
    0.00 :   753b4:  endbr64
         : 278   ./stdio-common/vfprintf-internal.c:1501
    0.00 :   753b8:  movzbl 0x1(%rbx),%r13d
    0.00 :   753bd:  lea    0x1(%rbx),%rdx
    0.00 :   753c1:  lea    0x3a8(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   753c8:  lea    -0x20(%r13),%ecx
    0.00 :   753cc:  cmp    $0x5a,%cl
    0.00 :   753cf:  ja     755a0 <__vfprintf_internal+0x570>
         : 285   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753d5:  movsbl %r13b,%ecx
         : 287   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   753d9:  lea    0x390(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
         : 289   ./stdio-common/vfprintf-internal.c:1500 (discriminator 1)
    0.00 :   753e0:  mov    $0x1,%r10d
         : 291   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753e6:  sub    $0x20,%ecx
    0.00 :   753e9:  movslq %ecx,%rcx
    0.00 :   753ec:  movzbl (%rax,%rcx,1),%ecx
         : 295   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   753f0:  movslq (%r8,%rcx,4),%rsi
    0.00 :   753f4:  add    %rbx,%rsi
         : 298   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753f7:  mov    %rdx,%rbx
         : 300   ./stdio-common/vfprintf-internal.c:1499 (discriminator 1)
    0.00 :   753fa:  xor    %edx,%edx
    0.00 :   753fc:  jmp    *%rsi
    0.00 :   753fe:  xchg   %ax,%ax
    0.00 :   75400:  endbr64
    0.00 :   75404:  endbr64
         : 306   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   75408:  cmpb   $0x0,0xa7(%rsp)
    0.00 :   75410:  jne    771e5 <__vfprintf_internal+0x21b5>
         : 309   ./stdio-common/vfprintf-internal.c:1535
    0.00 :   75416:  mov    %edx,%ecx
    0.00 :   75418:  and    $0x1,%ecx
    0.00 :   7541b:  mov    0x10(%rsp),%eax
    0.00 :   7541f:  movzbl %cl,%ecx
    0.00 :   75422:  movsbl %r13b,%r13d
    0.00 :   75426:  movl   $0x0,0xdc(%rsp)
    0.00 :   75431:  mov    %r14d,0xd0(%rsp)
    0.00 :   75439:  mov    %eax,0xd4(%rsp)
    0.00 :   75440:  lea    (%r15,%r15,1),%eax
    0.00 :   75444:  or     %ecx,%eax
    0.00 :   75446:  lea    0x0(,%r10,4),%ecx
    0.00 :   7544e:  mov    %r13d,0xd8(%rsp)
    0.00 :   75456:  or     %ecx,%eax
    0.00 :   75458:  movzwl 0x4c(%rsp),%ecx
    0.00 :   7545d:  shl    $0x3,%ecx
    0.00 :   75460:  or     %ecx,%eax
    0.00 :   75462:  movzwl 0x58(%rsp),%ecx
    0.00 :   75467:  shl    $0x4,%ecx
    0.00 :   7546a:  or     %ecx,%eax
    0.00 :   7546c:  movzwl 0x28(%rsp),%ecx
    0.00 :   75471:  shl    $0x5,%ecx
    0.00 :   75474:  or     %ecx,%eax
    0.00 :   75476:  movzwl 0x40(%rsp),%ecx
    0.00 :   7547b:  shl    $0x6,%ecx
    0.00 :   7547e:  or     %ecx,%eax
    0.00 :   75480:  movzwl 0x50(%rsp),%ecx
    0.00 :   75485:  shl    $0x7,%ecx
    0.00 :   75488:  or     %ecx,%eax
    0.00 :   7548a:  movzwl 0x5c(%rsp),%ecx
    0.00 :   7548f:  shl    $0xb,%ecx
    0.00 :   75492:  or     %ecx,%eax
    0.00 :   75494:  mov    %ax,0xdc(%rsp)
    0.00 :   7549c:  movzbl 0x38(%rsp),%eax
    0.00 :   754a1:  mov    %eax,0xe0(%rsp)
         : 344   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   754a8:  test   %edx,%edx
    0.00 :   754aa:  je     755b0 <__vfprintf_internal+0x580>
         : 347   ./stdio-common/vfprintf-internal.c:1555 (discriminator 1)
    0.00 :   754b0:  mov    0xac(%rsp),%esi
    0.00 :   754b7:  test   %esi,%esi
    0.00 :   754b9:  je     768a0 <__vfprintf_internal+0x1870>
         : 351   ./stdio-common/vfprintf-internal.c:1555 (discriminator 3)
    0.00 :   754bf:  mov    0x20(%rsp),%rcx
    0.00 :   754c4:  orb    $0x10,0xdd(%rsp)
    0.00 :   754cc:  mov    0x4(%rcx),%edx
    0.00 :   754cf:  cmp    $0xaf,%edx
    0.00 :   754d5:  ja     76d80 <__vfprintf_internal+0x1d50>
         : 357   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   754db:  mov    %edx,%eax
    0.00 :   754dd:  add    $0x10,%edx
    0.00 :   754e0:  add    0x10(%rcx),%rax
    0.00 :   754e4:  mov    %edx,0x4(%rcx)
    0.00 :   754e7:  movdqa (%rax),%xmm3
    0.00 :   754eb:  movaps %xmm3,0xc0(%rsp)
    0.00 :   754f3:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   754f8:  nopl   0x0(%rax,%rax,1)
         : 366   ./stdio-common/vfprintf-internal.c:1218 (discriminator 5)
    0.00 :   75500:  cmp    $0xffffffff,%eax
    0.00 :   75503:  je     75090 <__vfprintf_internal+0x60>
         : 369   ./stdio-common/vfprintf-internal.c:1218
    0.00 :   75509:  mov    $0xffffffff,%r12d
    0.00 :   7550f:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   75514:  nopl   0x0(%rax)
         : 373   ./stdio-common/vfprintf-internal.c:1259 (discriminator 1)
    0.00 :   75518:  mov    0x1a3a21(%rip),%rax        # 218f40 <_IO_funlockfile@@GLIBC_2.2.5+0x1b6ef0>
    0.00 :   7551f:  lea    0xf0(%rsp),%rdi
    0.00 :   75527:  mov    %rax,0xf0(%rsp)
    0.00 :   7552f:  call   911c0 <__GI___libc_cleanup_push_defer>
         : 378   ./stdio-common/vfprintf-internal.c:1260 (discriminator 1)
    0.00 :   75534:  mov    0x0(%rbp),%eax
    0.00 :   75537:  and    $0x8000,%eax
    0.00 :   7553c:  jne    77590 <__vfprintf_internal+0x2560>
    0.00 :   75542:  mov    %fs:0x10,%rbx
    0.00 :   7554b:  mov    0x88(%rbp),%rdi
    0.00 :   75552:  cmp    %rbx,0x8(%rdi)
    0.00 :   75556:  je     75572 <__vfprintf_internal+0x542>
         : 386   ./stdio-common/vfprintf-internal.c:1260 (discriminator 3)
    0.00 :   75558:  mov    $0x1,%edx
   50.27 :   7555d:  lock cmpxchg %edx,(%rdi)
    0.00 :   75561:  jne    76ee0 <__vfprintf_internal+0x1eb0>
         : 390   ./stdio-common/vfprintf-internal.c:1260 (discriminator 10)
    0.00 :   75567:  mov    0x88(%rbp),%rdi
    0.00 :   7556e:  mov    %rbx,0x8(%rdi)
         : 393   ./stdio-common/vfprintf-internal.c:1260 (discriminator 11)
    0.00 :   75572:  addl   $0x1,0x4(%rdi)
         : 395   ./stdio-common/vfprintf-internal.c:1259 (discriminator 11)
    0.00 :   75576:  movb   $0x1,0xa6(%rsp)
    0.00 :   7557e:  jmp    75100 <__vfprintf_internal+0xd0>
    0.00 :   75583:  nopl   0x0(%rax,%rax,1)
         : 399   ./stdio-common/vfprintf-internal.c:1609 (discriminator 1)
    0.00 :   75588:  lea    0xf0(%rsp),%rdi
    0.00 :   75590:  call   91200 <__GI___libc_cleanup_pop_restore>
         : 402   ./stdio-common/vfprintf-internal.c:1611 (discriminator 1)
    0.00 :   75595:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7559a:  nopw   0x0(%rax,%rax,1)
         : 405   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   755a0:  mov    %rdx,%rbx
         : 407   ./stdio-common/vfprintf-internal.c:1500 (discriminator 4)
    0.00 :   755a3:  mov    $0x1,%r10d
         : 409   ./stdio-common/vfprintf-internal.c:1499 (discriminator 4)
    0.00 :   755a9:  xor    %edx,%edx
    0.00 :   755ab:  jmp    *%rsi
    0.00 :   755ad:  nopl   (%rax)
         : 413   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   755b0:  mov    0x20(%rsp),%rsi
    0.00 :   755b5:  mov    0x4(%rsi),%eax
    0.00 :   755b8:  cmp    $0xaf,%eax
    0.00 :   755bd:  ja     76d00 <__vfprintf_internal+0x1cd0>
    0.00 :   755c3:  mov    %eax,%edx
    0.00 :   755c5:  add    $0x10,%eax
    0.00 :   755c8:  add    0x10(%rsi),%rdx
    0.00 :   755cc:  mov    %eax,0x4(%rsi)
    0.00 :   755cf:  movsd  (%rdx),%xmm0
    0.00 :   755d3:  movsd  %xmm0,0xc0(%rsp)
    0.00 :   755dc:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   755e1:  nopl   0x0(%rax)
    0.00 :   755e8:  endbr64
         : 427   ./stdio-common/vfprintf-internal.c:1517 (discriminator 3)
    0.00 :   755ec:  mov    0x20(%rsp),%rsi
    0.00 :   755f1:  lea    0x110(%rsp),%rdx
    0.00 :   755f9:  movq   $0x0,0x110(%rsp)
    0.00 :   75605:  mov    (%rsi),%eax
    0.00 :   75607:  cmp    $0x2f,%eax
    0.00 :   7560a:  ja     769e0 <__vfprintf_internal+0x19b0>
         : 434   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75610:  mov    %eax,%ecx
    0.00 :   75612:  add    $0x8,%eax
    0.00 :   75615:  add    0x10(%rsi),%rcx
    0.00 :   75619:  mov    %eax,(%rsi)
    0.00 :   7561b:  mov    (%rcx),%esi
    0.00 :   7561d:  lea    0x130(%rsp),%r15
    0.00 :   75625:  mov    %r15,%rdi
    0.00 :   75628:  call   c61e0 <wcrtomb>
    0.00 :   7562d:  mov    %rax,%r14
    0.00 :   75630:  cmp    $0xffffffffffffffff,%rax
    0.00 :   75634:  je     76728 <__vfprintf_internal+0x16f8>
         : 446   ./stdio-common/vfprintf-internal.c:1517 (discriminator 20)
    0.00 :   7563a:  mov    0x10(%rsp),%r13d
    0.00 :   7563f:  mov    0x28(%rsp),%r10d
    0.00 :   75644:  sub    %eax,%r13d
    0.00 :   75647:  test   %r10d,%r10d
    0.00 :   7564a:  jne    75655 <__vfprintf_internal+0x625>
         : 452   pad_func():
         : 453   ./stdio-common/vfprintf-internal.c:192
    0.00 :   7564c:  test   %r13d,%r13d
    0.00 :   7564f:  jg     76d39 <__vfprintf_internal+0x1d09>
         : 456   outstring_func():
         : 457   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75655:  mov    0xd8(%rbp),%rax
         : 459   IO_validate_vtable():
         : 460   ./stdio-common/../libio/libioP.h:942
    0.00 :   7565c:  lea    0x1a039d(%rip),%rcx        # 215a00 <_IO_helper_jumps>
    0.00 :   75663:  mov    %rax,%rdx
    0.00 :   75666:  sub    %rcx,%rdx
         : 464   ./stdio-common/../libio/libioP.h:943
    0.00 :   75669:  cmp    %rdx,0x30(%rsp)
    0.00 :   7566e:  jbe    77251 <__vfprintf_internal+0x2221>
         : 467   outstring_func():
         : 468   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75674:  mov    %r14,%rdx
    0.00 :   75677:  mov    %r15,%rsi
    0.00 :   7567a:  mov    %rbp,%rdi
    0.00 :   7567d:  call   *0x38(%rax)
    0.00 :   75680:  cmp    %rax,%r14
    0.00 :   75683:  jne    76728 <__vfprintf_internal+0x16f8>
         : 475   done_add_func():
         : 476   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75689:  movslq %r12d,%rax
    0.00 :   7568c:  xor    %edx,%edx
    0.00 :   7568e:  add    %r14,%rax
    0.00 :   75691:  js     7757c <__vfprintf_internal+0x254c>
    0.00 :   75697:  cmp    %r14,%rax
    0.00 :   7569a:  jb     7757c <__vfprintf_internal+0x254c>
    0.00 :   756a0:  movslq %eax,%rcx
    0.00 :   756a3:  mov    %eax,%r12d
    0.00 :   756a6:  cmp    %rcx,%rax
    0.00 :   756a9:  mov    $0x1,%ecx
    0.00 :   756ae:  cmovne %ecx,%edx
    0.00 :   756b1:  test   %edx,%edx
    0.00 :   756b3:  jne    75860 <__vfprintf_internal+0x830>
         : 490   __vfprintf_internal():
         : 491   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   756b9:  test   %eax,%eax
    0.00 :   756bb:  js     7533d <__vfprintf_internal+0x30d>
         : 494   ./stdio-common/vfprintf-internal.c:1517 (discriminator 28)
    0.00 :   756c1:  mov    0x28(%rsp),%r9d
    0.00 :   756c6:  test   %r9d,%r9d
    0.00 :   756c9:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   756cf:  nop
         : 499   pad_func():
         : 500   ./stdio-common/vfprintf-internal.c:192
    0.00 :   756d0:  test   %r13d,%r13d
    0.00 :   756d3:  jle    75f80 <__vfprintf_internal+0xf50>
         : 503   ./stdio-common/vfprintf-internal.c:196
    0.00 :   756d9:  movslq %r13d,%r13
    0.00 :   756dc:  mov    $0x20,%esi
    0.00 :   756e1:  mov    %rbp,%rdi
    0.00 :   756e4:  mov    %r13,%rdx
    0.00 :   756e7:  call   806a0 <_IO_padn>
         : 509   ./stdio-common/vfprintf-internal.c:200
    0.00 :   756ec:  cmp    %rax,%r13
    0.00 :   756ef:  jne    76728 <__vfprintf_internal+0x16f8>
         : 512   done_add_func():
         : 513   ./stdio-common/vfprintf-internal.c:127
    0.00 :   756f5:  add    %r12d,%r13d
    0.00 :   756f8:  mov    %r13d,%r12d
    0.00 :   756fb:  jo     75860 <__vfprintf_internal+0x830>
         : 517   __vfprintf_internal():
         : 518   ./stdio-common/vfprintf-internal.c:1564
    0.00 :   75701:  test   %r12d,%r12d
    0.00 :   75704:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   7570a:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7570f:  nop
    0.00 :   75710:  endbr64
         : 524   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75714:  mov    0x20(%rsp),%rdi
    0.00 :   75719:  mov    (%rdi),%eax
    0.00 :   7571b:  cmp    $0x2f,%eax
    0.00 :   7571e:  ja     76c18 <__vfprintf_internal+0x1be8>
    0.00 :   75724:  mov    %eax,%edx
    0.00 :   75726:  add    $0x8,%eax
    0.00 :   75729:  add    0x10(%rdi),%rdx
    0.00 :   7572d:  mov    %eax,(%rdi)
    0.00 :   7572f:  mov    (%rdx),%r15
    0.00 :   75732:  mov    %r10d,%eax
    0.00 :   75735:  xor    $0x1,%eax
    0.00 :   75738:  test   %r15,%r15
    0.00 :   7573b:  jne    758af <__vfprintf_internal+0x87f>
         : 538   ./stdio-common/vfprintf-internal.c:1517 (discriminator 36)
    0.00 :   75741:  cmp    $0xffffffff,%r14d
    0.00 :   75745:  je     76f38 <__vfprintf_internal+0x1f08>
    0.00 :   7574b:  cmp    $0x5,%r14d
    0.00 :   7574f:  jg     76f38 <__vfprintf_internal+0x1f08>
         : 543   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75755:  xor    %eax,%eax
    0.00 :   75757:  xor    %r14d,%r14d
    0.00 :   7575a:  lea    0x162d0e(%rip),%r15        # 1d846f <dir_suffix+0x16e>
    0.00 :   75761:  jmp    758d9 <__vfprintf_internal+0x8a9>
    0.00 :   75766:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   75770:  endbr64
         : 550   ./stdio-common/vfprintf-internal.c:1569
    0.00 :   75774:  test   %r13b,%r13b
    0.00 :   75777:  jne    76a88 <__vfprintf_internal+0x1a58>
         : 553   ./stdio-common/vfprintf-internal.c:1572
    0.00 :   7577d:  mov    0x1a368c(%rip),%rax        # 218e10 <_DYNAMIC+0x250>
         : 555   ./stdio-common/vfprintf-internal.c:1573
    0.00 :   75784:  mov    $0xffffffff,%r12d
         : 557   ./stdio-common/vfprintf-internal.c:1572
    0.00 :   7578a:  movl   $0x16,%fs:(%rax)
         : 559   ./stdio-common/vfprintf-internal.c:1574
    0.00 :   75791:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75796:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   757a0:  endbr64
         : 563   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   757a4:  test   %r10d,%r10d
    0.00 :   757a7:  jne    755e8 <__vfprintf_internal+0x5b8>
         : 566   ./stdio-common/vfprintf-internal.c:1517 (discriminator 2)
    0.00 :   757ad:  mov    0x10(%rsp),%r13d
    0.00 :   757b2:  mov    0x28(%rsp),%r14d
    0.00 :   757b7:  sub    $0x1,%r13d
    0.00 :   757bb:  test   %r14d,%r14d
    0.00 :   757be:  je     76e97 <__vfprintf_internal+0x1e67>
         : 572   ./stdio-common/vfprintf-internal.c:1517 (discriminator 7)
    0.00 :   757c4:  mov    0x20(%rsp),%rdi
    0.00 :   757c9:  mov    (%rdi),%eax
    0.00 :   757cb:  cmp    $0x2f,%eax
    0.00 :   757ce:  ja     76d18 <__vfprintf_internal+0x1ce8>
         : 577   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   757d4:  mov    %eax,%edx
    0.00 :   757d6:  add    $0x8,%eax
    0.00 :   757d9:  add    0x10(%rdi),%rdx
    0.00 :   757dd:  mov    %eax,(%rdi)
    0.00 :   757df:  mov    (%rdx),%edx
    0.00 :   757e1:  mov    0x28(%rbp),%rax
    0.00 :   757e5:  cmp    0x30(%rbp),%rax
    0.00 :   757e9:  jae    773d1 <__vfprintf_internal+0x23a1>
         : 586   ./stdio-common/vfprintf-internal.c:1517 (discriminator 9)
    0.00 :   757ef:  lea    0x1(%rax),%rcx
    0.00 :   757f3:  mov    %rcx,0x28(%rbp)
    0.00 :   757f7:  mov    %dl,(%rax)
         : 590   ./stdio-common/vfprintf-internal.c:1517 (discriminator 12)
    0.00 :   757f9:  cmp    $0x7fffffff,%r12d
    0.00 :   75800:  je     76728 <__vfprintf_internal+0x16f8>
         : 593   ./stdio-common/vfprintf-internal.c:1517 (discriminator 14)
    0.00 :   75806:  mov    0x28(%rsp),%r11d
    0.00 :   7580b:  add    $0x1,%r12d
    0.00 :   7580f:  test   %r11d,%r11d
    0.00 :   75812:  je     75f80 <__vfprintf_internal+0xf50>
         : 598   pad_func():
         : 599   ./stdio-common/vfprintf-internal.c:192
    0.00 :   75818:  test   %r13d,%r13d
    0.00 :   7581b:  jle    75f80 <__vfprintf_internal+0xf50>
         : 602   ./stdio-common/vfprintf-internal.c:196
    0.00 :   75821:  movslq %r13d,%r14
    0.00 :   75824:  mov    $0x20,%esi
    0.00 :   75829:  mov    %rbp,%rdi
    0.00 :   7582c:  mov    %r14,%rdx
    0.00 :   7582f:  call   806a0 <_IO_padn>
         : 608   ./stdio-common/vfprintf-internal.c:200
    0.00 :   75834:  cmp    %rax,%r14
    0.00 :   75837:  jne    76728 <__vfprintf_internal+0x16f8>
         : 611   done_add_func():
         : 612   ./stdio-common/vfprintf-internal.c:127
    0.00 :   7583d:  xor    %eax,%eax
    0.00 :   7583f:  add    %r13d,%r12d
    0.00 :   75842:  js     77572 <__vfprintf_internal+0x2542>
    0.00 :   75848:  cmp    %r13d,%r12d
    0.00 :   7584b:  jb     77572 <__vfprintf_internal+0x2542>
    0.00 :   75851:  test   %eax,%eax
    0.00 :   75853:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   75859:  nopl   0x0(%rax)
         : 621   ./stdio-common/vfprintf-internal.c:129
    0.00 :   75860:  mov    0x1a35a9(%rip),%rax        # 218e10 <_DYNAMIC+0x250>
         : 623   ./stdio-common/vfprintf-internal.c:130
    0.00 :   75867:  mov    $0xffffffff,%r12d
         : 625   ./stdio-common/vfprintf-internal.c:129
    0.00 :   7586d:  movl   $0x4b,%fs:(%rax)
         : 627   __vfprintf_internal():
         : 628   ./stdio-common/vfprintf-internal.c:1564
    0.00 :   75874:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75879:  nopl   0x0(%rax)
    0.00 :   75880:  endbr64
         : 632   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75884:  mov    0x4c(%rsp),%r15d
    0.00 :   75889:  test   %r15d,%r15d
    0.00 :   7588c:  je     76bf0 <__vfprintf_internal+0x1bc0>
         : 636   ./stdio-common/vfprintf-internal.c:1516 (discriminator 243)
    0.00 :   75892:  mov    0x90(%rsp),%edi
    0.00 :   75899:  call   7d2c0 <__get_errname>
    0.00 :   7589e:  mov    %rax,%r15
         : 640   ./stdio-common/vfprintf-internal.c:1516 (discriminator 246)
    0.00 :   758a1:  mov    $0x1,%eax
    0.00 :   758a6:  test   %r15,%r15
    0.00 :   758a9:  je     77150 <__vfprintf_internal+0x2120>
         : 644   ./stdio-common/vfprintf-internal.c:1517 (discriminator 37)
    0.00 :   758af:  cmp    $0x53,%r13b
    0.00 :   758b3:  je     76ca0 <__vfprintf_internal+0x1c70>
    0.00 :   758b9:  test   %al,%al
    0.00 :   758bb:  je     76ca0 <__vfprintf_internal+0x1c70>
         : 649   ./stdio-common/vfprintf-internal.c:1517 (discriminator 40)
    0.00 :   758c1:  cmp    $0xffffffff,%r14d
    0.00 :   758c5:  je     76d29 <__vfprintf_internal+0x1cf9>
         : 652   ./stdio-common/vfprintf-internal.c:1517 (discriminator 42)
    0.00 :   758cb:  movslq %r14d,%rsi
    0.00 :   758ce:  mov    %r15,%rdi
    0.00 :   758d1:  call   28390 <*ABS*+0xa8720@plt>
    0.00 :   758d6:  mov    %rax,%r14
         : 657   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   758d9:  mov    0x10(%rsp),%r13d
    0.00 :   758de:  sub    %eax,%r13d
    0.00 :   758e1:  js     76fe0 <__vfprintf_internal+0x1fb0>
         : 661   ./stdio-common/vfprintf-internal.c:1517 (discriminator 47)
    0.00 :   758e7:  mov    0x28(%rsp),%r8d
    0.00 :   758ec:  test   %r8d,%r8d
    0.00 :   758ef:  jne    758fa <__vfprintf_internal+0x8ca>
         : 665   pad_func():
         : 666   ./stdio-common/vfprintf-internal.c:192
    0.00 :   758f1:  test   %r13d,%r13d
    0.00 :   758f4:  jne    76dfd <__vfprintf_internal+0x1dcd>
         : 669   outstring_func():
         : 670   ./stdio-common/vfprintf-internal.c:239
    0.00 :   758fa:  mov    0xd8(%rbp),%rax
         : 672   IO_validate_vtable():
         : 673   ./stdio-common/../libio/libioP.h:942
    0.00 :   75901:  lea    0x1a00f8(%rip),%rcx        # 215a00 <_IO_helper_jumps>
    0.00 :   75908:  mov    %rax,%rdx
    0.00 :   7590b:  sub    %rcx,%rdx
         : 677   ./stdio-common/../libio/libioP.h:943
    0.00 :   7590e:  cmp    %rdx,0x30(%rsp)
    0.00 :   75913:  jbe    7729c <__vfprintf_internal+0x226c>
         : 680   outstring_func():
         : 681   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75919:  mov    %r14,%rdx
    0.00 :   7591c:  mov    %r15,%rsi
    0.00 :   7591f:  mov    %rbp,%rdi
    0.00 :   75922:  call   *0x38(%rax)
    0.00 :   75925:  cmp    %r14,%rax
    0.00 :   75928:  jne    76728 <__vfprintf_internal+0x16f8>
         : 688   done_add_func():
         : 689   ./stdio-common/vfprintf-internal.c:127
    0.00 :   7592e:  movslq %r12d,%rax
    0.00 :   75931:  xor    %edx,%edx
    0.00 :   75933:  add    %r14,%rax
    0.00 :   75936:  js     77537 <__vfprintf_internal+0x2507>
    0.00 :   7593c:  cmp    %r14,%rax
    0.00 :   7593f:  jb     77537 <__vfprintf_internal+0x2507>
    0.00 :   75945:  movslq %eax,%rcx
    0.00 :   75948:  mov    %eax,%r12d
    0.00 :   7594b:  cmp    %rcx,%rax
    0.00 :   7594e:  mov    $0x1,%ecx
    0.00 :   75953:  cmovne %ecx,%edx
    0.00 :   75956:  test   %edx,%edx
    0.00 :   75958:  jne    75860 <__vfprintf_internal+0x830>
         : 703   __vfprintf_internal():
         : 704   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   7595e:  test   %eax,%eax
    0.00 :   75960:  js     7533d <__vfprintf_internal+0x30d>
         : 707   ./stdio-common/vfprintf-internal.c:1517 (discriminator 55)
    0.00 :   75966:  mov    0x28(%rsp),%edi
    0.00 :   7596a:  test   %edi,%edi
    0.00 :   7596c:  je     75f80 <__vfprintf_internal+0xf50>
         : 711   pad_func():
         : 712   ./stdio-common/vfprintf-internal.c:192
    0.00 :   75972:  test   %r13d,%r13d
    0.00 :   75975:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   7597b:  jmp    756d9 <__vfprintf_internal+0x6a9>
    0.00 :   75980:  endbr64
         : 717   __vfprintf_internal():
         : 718   ./stdio-common/vfprintf-internal.c:1486
    0.00 :   75984:  movzbl 0x1(%rbx),%r13d
    0.00 :   75989:  lea    0x1(%rbx),%rdx
    0.00 :   7598d:  lea    -0x224(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75994:  lea    -0x20(%r13),%ecx
    0.00 :   75998:  cmp    $0x5a,%cl
    0.00 :   7599b:  ja     76b60 <__vfprintf_internal+0x1b30>
         : 725   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759a1:  movsbl %r13b,%ecx
         : 727   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   759a5:  lea    -0x23c(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
         : 729   ./stdio-common/vfprintf-internal.c:1485 (discriminator 1)
    0.00 :   759ac:  mov    $0x1,%r10d
         : 731   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759b2:  sub    $0x20,%ecx
    0.00 :   759b5:  movslq %ecx,%rcx
    0.00 :   759b8:  movzbl (%rax,%rcx,1),%ecx
         : 735   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   759bc:  movslq (%r8,%rcx,4),%rsi
    0.00 :   759c0:  add    %rbx,%rsi
         : 738   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759c3:  mov    %rdx,%rbx
         : 740   ./stdio-common/vfprintf-internal.c:1484 (discriminator 1)
    0.00 :   759c6:  mov    $0x1,%edx
    0.00 :   759cb:  jmp    *%rsi
    0.00 :   759cd:  nopl   (%rax)
    0.00 :   759d0:  endbr64
         : 745   ./stdio-common/vfprintf-internal.c:1479
    0.00 :   759d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   759d9:  lea    0x1(%rbx),%rcx
    0.00 :   759dd:  lea    -0x274(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   759e4:  lea    -0x20(%r13),%edi
    0.00 :   759e8:  cmp    $0x5a,%dil
    0.00 :   759ec:  ja     76ba8 <__vfprintf_internal+0x1b78>
         : 752   ./stdio-common/vfprintf-internal.c:1479 (discriminator 1)
    0.00 :   759f2:  movsbl %r13b,%esi
    0.00 :   759f6:  lea    0x15b9e3(%rip),%rbx        # 1d13e0 <step3b_jumps.4>
         : 755   ./stdio-common/vfprintf-internal.c:1478 (discriminator 1)
    0.00 :   759fd:  mov    $0x1,%r10d
         : 757   ./stdio-common/vfprintf-internal.c:1479 (discriminator 1)
    0.00 :   75a03:  sub    $0x20,%esi
    0.00 :   75a06:  movslq %esi,%rsi
    0.00 :   75a09:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75a0d:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75a11:  lea    -0x2a8(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75a18:  add    %rbx,%rsi
    0.00 :   75a1b:  mov    %rcx,%rbx
    0.00 :   75a1e:  jmp    *%rsi
    0.00 :   75a20:  endbr64
         : 767   ./stdio-common/vfprintf-internal.c:1516 (discriminator 33)
    0.00 :   75a24:  movl   $0x2,0x60(%rsp)
         : 769   ./stdio-common/vfprintf-internal.c:1392 (discriminator 30)
    0.00 :   75a2c:  mov    0x20(%rsp),%rdi
    0.00 :   75a31:  mov    (%rdi),%eax
         : 772   ./stdio-common/vfprintf-internal.c:1516 (discriminator 30)
    0.00 :   75a33:  test   %r10d,%r10d
    0.00 :   75a36:  je     7604c <__vfprintf_internal+0x101c>
         : 775   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75a3c:  cmp    $0x2f,%eax
    0.00 :   75a3f:  ja     76850 <__vfprintf_internal+0x1820>
    0.00 :   75a45:  mov    %eax,%edx
    0.00 :   75a47:  add    $0x8,%eax
    0.00 :   75a4a:  add    0x10(%rdi),%rdx
    0.00 :   75a4e:  mov    %eax,(%rdi)
    0.00 :   75a50:  movl   $0x0,0x40(%rsp)
    0.00 :   75a58:  mov    (%rdx),%r11
    0.00 :   75a5b:  xor    %r10d,%r10d
    0.00 :   75a5e:  movl   $0x0,0x58(%rsp)
         : 786   ./stdio-common/vfprintf-internal.c:1516 (discriminator 252)
    0.00 :   75a66:  cmp    $0xffffffff,%r14d
    0.00 :   75a6a:  je     76090 <__vfprintf_internal+0x1060>
         : 789   ./stdio-common/vfprintf-internal.c:1516 (discriminator 66)
    0.00 :   75a70:  test   %r14d,%r14d
    0.00 :   75a73:  je     76560 <__vfprintf_internal+0x1530>
         : 792   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75a79:  movslq %r14d,%rax
    0.00 :   75a7c:  movb   $0x20,0x38(%rsp)
    0.00 :   75a81:  mov    %rax,0x70(%rsp)
         : 796   ./stdio-common/vfprintf-internal.c:1516 (discriminator 70)
    0.00 :   75a86:  xor    %ecx,%ecx
    0.00 :   75a88:  mov    0x60(%rsp),%edx
    0.00 :   75a8c:  cmp    $0x58,%r13b
    0.00 :   75a90:  mov    %r11,%rdi
    0.00 :   75a93:  lea    0x528(%rsp),%r14
    0.00 :   75a9b:  sete   %cl
    0.00 :   75a9e:  mov    %r10d,0x94(%rsp)
    0.00 :   75aa6:  lea    0x140(%rsp),%r15
    0.00 :   75aae:  mov    %r14,%rsi
    0.00 :   75ab1:  mov    %r11,0x88(%rsp)
    0.00 :   75ab9:  call   5a230 <_itoa_word>
    0.00 :   75abe:  mov    0x80(%rsp),%rcx
    0.00 :   75ac6:  mov    0x88(%rsp),%r11
    0.00 :   75ace:  mov    0x94(%rsp),%r10d
    0.00 :   75ad6:  mov    %rax,%r9
    0.00 :   75ad9:  test   %rcx,%rcx
    0.00 :   75adc:  je     75b19 <__vfprintf_internal+0xae9>
    0.00 :   75ade:  mov    0x50(%rsp),%eax
    0.00 :   75ae2:  test   %eax,%eax
    0.00 :   75ae4:  je     75b19 <__vfprintf_internal+0xae9>
         : 817   ./stdio-common/vfprintf-internal.c:1516 (discriminator 72)
    0.00 :   75ae6:  mov    %r9,%rsi
    0.00 :   75ae9:  mov    %r14,%rdx
    0.00 :   75aec:  mov    %r15,%rdi
    0.00 :   75aef:  mov    %r11,0x50(%rsp)
    0.00 :   75af4:  mov    0x98(%rsp),%r8
    0.00 :   75afc:  mov    %r10d,0x88(%rsp)
    0.00 :   75b04:  call   72140 <group_number>
    0.00 :   75b09:  mov    0x88(%rsp),%r10d
    0.00 :   75b11:  mov    0x50(%rsp),%r11
    0.00 :   75b16:  mov    %rax,%r9
         : 828   ./stdio-common/vfprintf-internal.c:1516 (discriminator 74)
    0.00 :   75b19:  cmpl   $0xa,0x60(%rsp)
    0.00 :   75b1e:  jne    75b4d <__vfprintf_internal+0xb1d>
    0.00 :   75b20:  mov    0x5c(%rsp),%eax
    0.00 :   75b24:  test   %eax,%eax
    0.00 :   75b26:  je     75b4d <__vfprintf_internal+0xb1d>
         : 834   ./stdio-common/vfprintf-internal.c:1516 (discriminator 75)
    0.00 :   75b28:  mov    %r9,%rdi
    0.00 :   75b2b:  mov    %r14,%rdx
    0.00 :   75b2e:  mov    %r14,%rsi
    0.00 :   75b31:  mov    %r10d,0x5c(%rsp)
    0.00 :   75b36:  mov    %r11,0x50(%rsp)
    0.00 :   75b3b:  call   72340 <_i18n_number_rewrite>
    0.00 :   75b40:  mov    0x5c(%rsp),%r10d
    0.00 :   75b45:  mov    0x50(%rsp),%r11
    0.00 :   75b4a:  mov    %rax,%r9
         : 844   ./stdio-common/vfprintf-internal.c:1516 (discriminator 77)
    0.00 :   75b4d:  mov    %r14,%r15
    0.00 :   75b50:  sub    %r9,%r15
    0.00 :   75b53:  cmp    0x70(%rsp),%r15
    0.00 :   75b58:  jge    765c0 <__vfprintf_internal+0x1590>
         : 849   ./stdio-common/vfprintf-internal.c:1516 (discriminator 84)
    0.00 :   75b5e:  mov    0x70(%rsp),%rdx
    0.00 :   75b63:  mov    $0x0,%eax
    0.00 :   75b68:  mov    0x28(%rsp),%r8d
    0.00 :   75b6d:  sub    %r15,%rdx
    0.00 :   75b70:  cmovs  %rax,%rdx
    0.00 :   75b74:  mov    %edx,%r14d
    0.00 :   75b77:  test   %r8d,%r8d
    0.00 :   75b7a:  jne    76440 <__vfprintf_internal+0x1410>
         : 858   ./stdio-common/vfprintf-internal.c:1516 (discriminator 85)
    0.00 :   75b80:  mov    0x10(%rsp),%r8d
    0.00 :   75b85:  sub    %r15d,%r8d
    0.00 :   75b88:  sub    %edx,%r8d
    0.00 :   75b8b:  test   %r11,%r11
    0.00 :   75b8e:  je     75baf <__vfprintf_internal+0xb7f>
         : 864   ./stdio-common/vfprintf-internal.c:1516 (discriminator 87)
    0.00 :   75b90:  mov    0x4c(%rsp),%edi
    0.00 :   75b94:  test   %edi,%edi
    0.00 :   75b96:  je     75baf <__vfprintf_internal+0xb7f>
         : 868   ./stdio-common/vfprintf-internal.c:1516 (discriminator 89)
    0.00 :   75b98:  movzbl 0x60(%rsp),%ecx
    0.00 :   75b9d:  mov    $0x10004,%eax
    0.00 :   75ba2:  lea    -0x2(%r8),%edx
    0.00 :   75ba6:  shr    %cl,%rax
    0.00 :   75ba9:  test   $0x1,%al
    0.00 :   75bab:  cmovne %edx,%r8d
         : 875   ./stdio-common/vfprintf-internal.c:1516 (discriminator 93)
    0.00 :   75baf:  mov    0x58(%rsp),%eax
    0.00 :   75bb3:  or     %r10d,%eax
    0.00 :   75bb6:  or     0x40(%rsp),%eax
    0.00 :   75bba:  je     76660 <__vfprintf_internal+0x1630>
         : 880   ./stdio-common/vfprintf-internal.c:1516 (discriminator 94)
    0.00 :   75bc0:  sub    $0x1,%r8d
    0.00 :   75bc4:  cmpb   $0x20,0x38(%rsp)
    0.00 :   75bc9:  je     77561 <__vfprintf_internal+0x2531>
         : 884   ./stdio-common/vfprintf-internal.c:1516 (discriminator 101)
    0.00 :   75bcf:  test   %r10d,%r10d
    0.00 :   75bd2:  je     767d0 <__vfprintf_internal+0x17a0>
         : 887   ./stdio-common/vfprintf-internal.c:1516 (discriminator 102)
    0.00 :   75bd8:  mov    0x28(%rbp),%rax
    0.00 :   75bdc:  cmp    0x30(%rbp),%rax
    0.00 :   75be0:  jae    771fe <__vfprintf_internal+0x21ce>
         : 891   ./stdio-common/vfprintf-internal.c:1516 (discriminator 105)
    0.00 :   75be6:  lea    0x1(%rax),%rdx
    0.00 :   75bea:  mov    %rdx,0x28(%rbp)
    0.00 :   75bee:  movb   $0x2d,(%rax)
         : 895   ./stdio-common/vfprintf-internal.c:1516 (discriminator 128)
    0.00 :   75bf1:  cmp    $0x7fffffff,%r12d
    0.00 :   75bf8:  je     76728 <__vfprintf_internal+0x16f8>
         : 898   ./stdio-common/vfprintf-internal.c:1516 (discriminator 130)
    0.00 :   75bfe:  add    $0x1,%r12d
         : 900   ./stdio-common/vfprintf-internal.c:1516 (discriminator 131)
    0.00 :   75c02:  test   %r11,%r11
    0.00 :   75c05:  je     75c70 <__vfprintf_internal+0xc40>
    0.00 :   75c07:  mov    0x4c(%rsp),%edx
    0.00 :   75c0b:  test   %edx,%edx
    0.00 :   75c0d:  je     75c70 <__vfprintf_internal+0xc40>
         : 906   ./stdio-common/vfprintf-internal.c:1516 (discriminator 134)
    0.00 :   75c0f:  mov    0x60(%rsp),%edx
    0.00 :   75c13:  mov    $0x10004,%eax
    0.00 :   75c18:  bt     %rdx,%rax
    0.00 :   75c1c:  jae    75c70 <__vfprintf_internal+0xc40>
         : 911   ./stdio-common/vfprintf-internal.c:1516 (discriminator 136)
    0.00 :   75c1e:  mov    0x28(%rbp),%rax
    0.00 :   75c22:  cmp    0x30(%rbp),%rax
    0.00 :   75c26:  jae    76f4f <__vfprintf_internal+0x1f1f>
         : 915   ./stdio-common/vfprintf-internal.c:1516 (discriminator 139)
    0.00 :   75c2c:  lea    0x1(%rax),%rdx
    0.00 :   75c30:  mov    %rdx,0x28(%rbp)
    0.00 :   75c34:  movb   $0x30,(%rax)
         : 919   ./stdio-common/vfprintf-internal.c:1516 (discriminator 142)
    0.00 :   75c37:  cmp    $0x7fffffff,%r12d
    0.00 :   75c3e:  je     76728 <__vfprintf_internal+0x16f8>
         : 922   ./stdio-common/vfprintf-internal.c:1516 (discriminator 144)
    0.00 :   75c44:  mov    0x28(%rbp),%rax
    0.00 :   75c48:  cmp    0x30(%rbp),%rax
    0.00 :   75c4c:  jae    77412 <__vfprintf_internal+0x23e2>
         : 926   ./stdio-common/vfprintf-internal.c:1516 (discriminator 146)
    0.00 :   75c52:  lea    0x1(%rax),%rdx
    0.00 :   75c56:  mov    %rdx,0x28(%rbp)
    0.00 :   75c5a:  mov    %r13b,(%rax)
         : 930   ./stdio-common/vfprintf-internal.c:1516 (discriminator 149)
    0.00 :   75c5d:  cmp    $0x7ffffffe,%r12d
    0.00 :   75c64:  je     76728 <__vfprintf_internal+0x16f8>
         : 933   ./stdio-common/vfprintf-internal.c:1516 (discriminator 151)
    0.00 :   75c6a:  add    $0x2,%r12d
    0.00 :   75c6e:  xchg   %ax,%ax
         : 936   ./stdio-common/vfprintf-internal.c:1516 (discriminator 152)
    0.00 :   75c70:  lea    (%r8,%r14,1),%r13d
         : 938   pad_func():
         : 939   ./stdio-common/vfprintf-internal.c:192 (discriminator 152)
    0.00 :   75c74:  test   %r13d,%r13d
    0.00 :   75c77:  jg     76780 <__vfprintf_internal+0x1750>
         : 942   outstring_func():
         : 943   ./stdio-common/vfprintf-internal.c:239 (discriminator 154)
    0.00 :   75c7d:  mov    0xd8(%rbp),%r13
         : 945   IO_validate_vtable():
         : 946   ./stdio-common/../libio/libioP.h:942 (discriminator 154)
    0.00 :   75c84:  lea    0x19fd75(%rip),%rsi        # 215a00 <_IO_helper_jumps>
    0.00 :   75c8b:  mov    %r13,%rax
    0.00 :   75c8e:  sub    %rsi,%rax
         : 950   ./stdio-common/../libio/libioP.h:943 (discriminator 154)
    0.00 :   75c91:  cmp    %rax,0x30(%rsp)
    0.00 :   75c96:  jbe    771d1 <__vfprintf_internal+0x21a1>
         : 953   outstring_func():
         : 954   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75c9c:  mov    %r15,%rdx
    0.00 :   75c9f:  mov    %r9,%rsi
    0.00 :   75ca2:  mov    %rbp,%rdi
    0.00 :   75ca5:  call   *0x38(%r13)
    0.00 :   75ca9:  cmp    %rax,%r15
    0.00 :   75cac:  jne    76728 <__vfprintf_internal+0x16f8>
         : 961   done_add_func():
         : 962   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75cb2:  movslq %r12d,%rax
    0.00 :   75cb5:  xor    %edx,%edx
    0.00 :   75cb7:  add    %r15,%rax
    0.00 :   75cba:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc0:  cmp    %r15,%rax
    0.00 :   75cc3:  jb     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc9:  movslq %eax,%rcx
    0.00 :   75ccc:  mov    %eax,%r12d
    0.00 :   75ccf:  cmp    %rcx,%rax
    0.00 :   75cd2:  mov    $0x1,%ecx
    0.00 :   75cd7:  cmovne %ecx,%edx
    0.00 :   75cda:  test   %edx,%edx
    0.00 :   75cdc:  jne    75860 <__vfprintf_internal+0x830>
         : 976   __vfprintf_internal():
         : 977   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75ce2:  test   %eax,%eax
    0.00 :   75ce4:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75cea:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75cef:  nop
    0.00 :   75cf0:  endbr64
         : 983   ./stdio-common/vfprintf-internal.c:1346
    0.00 :   75cf4:  cmpq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   75cfd:  je     7717a <__vfprintf_internal+0x214a>
         : 986   ./stdio-common/vfprintf-internal.c:1365
    0.00 :   75d03:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d08:  lea    0x1(%rbx),%rcx
    0.00 :   75d0c:  lea    -0x5a3(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d13:  lea    -0x20(%r13),%edi
    0.00 :   75d17:  cmp    $0x5a,%dil
    0.00 :   75d1b:  ja     76b88 <__vfprintf_internal+0x1b58>
         : 993   ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d21:  movsbl %r13b,%esi
         : 995   ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d25:  lea    0x15b934(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 997   ./stdio-common/vfprintf-internal.c:1344 (discriminator 1)
    0.00 :   75d2c:  movl   $0x1,0x50(%rsp)
         : 999   ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d34:  sub    $0x20,%esi
    0.00 :   75d37:  movslq %esi,%rsi
    0.00 :   75d3a:  movzbl (%rax,%rsi,1),%esi
         : 1003  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d3e:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d42:  lea    -0x5d9(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d49:  add    %rbx,%rsi
         : 1007  ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d4c:  mov    %rcx,%rbx
    0.00 :   75d4f:  jmp    *%rsi
    0.00 :   75d51:  nopl   0x0(%rax)
    0.00 :   75d58:  endbr64
         : 1012  ./stdio-common/vfprintf-internal.c:1334
    0.00 :   75d5c:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d61:  lea    0x1(%rbx),%rcx
    0.00 :   75d65:  lea    -0x5fc(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d6c:  lea    -0x20(%r13),%edi
    0.00 :   75d70:  cmp    $0x5a,%dil
    0.00 :   75d74:  ja     76b98 <__vfprintf_internal+0x1b68>
         : 1019  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75d7a:  movsbl %r13b,%esi
         : 1021  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d7e:  lea    0x15b8db(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1023  ./stdio-common/vfprintf-internal.c:1333 (discriminator 1)
    0.00 :   75d85:  movl   $0x1,0x4c(%rsp)
         : 1025  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75d8d:  sub    $0x20,%esi
    0.00 :   75d90:  movslq %esi,%rsi
    0.00 :   75d93:  movzbl (%rax,%rsi,1),%esi
         : 1029  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d97:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d9b:  lea    -0x632(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75da2:  add    %rbx,%rsi
         : 1033  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75da5:  mov    %rcx,%rbx
    0.00 :   75da8:  jmp    *%rsi
    0.00 :   75daa:  nopw   0x0(%rax,%rax,1)
    0.00 :   75db0:  endbr64
         : 1038  ./stdio-common/vfprintf-internal.c:1329
    0.00 :   75db4:  movzbl 0x1(%rbx),%r13d
    0.00 :   75db9:  lea    0x1(%rbx),%rcx
    0.00 :   75dbd:  lea    -0x654(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dc4:  lea    -0x20(%r13),%edi
    0.00 :   75dc8:  cmp    $0x5a,%dil
    0.00 :   75dcc:  ja     75df1 <__vfprintf_internal+0xdc1>
         : 1045  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75dce:  movsbl %r13b,%esi
    0.00 :   75dd2:  lea    0x15b887(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   75dd9:  sub    $0x20,%esi
    0.00 :   75ddc:  movslq %esi,%rsi
    0.00 :   75ddf:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75de3:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75de7:  lea    -0x67e(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dee:  add    %rbx,%rsi
         : 1054  ./stdio-common/vfprintf-internal.c:1328 (discriminator 4)
    0.00 :   75df1:  movb   $0x20,0x38(%rsp)
         : 1056  ./stdio-common/vfprintf-internal.c:1329 (discriminator 4)
    0.00 :   75df6:  mov    %rcx,%rbx
         : 1058  ./stdio-common/vfprintf-internal.c:1327 (discriminator 4)
    0.00 :   75df9:  movl   $0x1,0x28(%rsp)
    0.00 :   75e01:  jmp    *%rsi
    0.00 :   75e03:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e08:  endbr64
         : 1063  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e0c:  mov    0xa8(%rsp),%eax
    0.00 :   75e13:  test   %eax,%eax
    0.00 :   75e15:  je     75e26 <__vfprintf_internal+0xdf6>
         : 1067  ./stdio-common/vfprintf-internal.c:1516 (discriminator 223)
    0.00 :   75e17:  mov    0xa0(%rsp),%eax
    0.00 :   75e1e:  test   %eax,%eax
    0.00 :   75e20:  je     76eea <__vfprintf_internal+0x1eba>
         : 1071  ./stdio-common/vfprintf-internal.c:1516 (discriminator 229)
    0.00 :   75e26:  mov    0x20(%rsp),%rsi
    0.00 :   75e2b:  mov    (%rsi),%eax
    0.00 :   75e2d:  cmp    $0x2f,%eax
    0.00 :   75e30:  ja     76c50 <__vfprintf_internal+0x1c20>
         : 1076  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e36:  mov    %eax,%edx
    0.00 :   75e38:  add    $0x8,%eax
    0.00 :   75e3b:  add    0x10(%rsi),%rdx
    0.00 :   75e3f:  mov    %eax,(%rsi)
    0.00 :   75e41:  mov    (%rdx),%rax
    0.00 :   75e44:  test   %r10d,%r10d
    0.00 :   75e47:  je     76c30 <__vfprintf_internal+0x1c00>
         : 1084  ./stdio-common/vfprintf-internal.c:1516 (discriminator 233)
    0.00 :   75e4d:  movslq %r12d,%rdx
    0.00 :   75e50:  mov    %rdx,(%rax)
    0.00 :   75e53:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75e58:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e60:  endbr64
         : 1090  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e64:  mov    0x20(%rsp),%rdi
    0.00 :   75e69:  mov    (%rdi),%eax
    0.00 :   75e6b:  cmp    $0x2f,%eax
    0.00 :   75e6e:  ja     76bc8 <__vfprintf_internal+0x1b98>
    0.00 :   75e74:  mov    %eax,%edx
    0.00 :   75e76:  add    $0x8,%eax
    0.00 :   75e79:  add    0x10(%rdi),%rdx
    0.00 :   75e7d:  mov    %eax,(%rdi)
    0.00 :   75e7f:  mov    (%rdx),%r10
    0.00 :   75e82:  test   %r10,%r10
    0.00 :   75e85:  je     76c83 <__vfprintf_internal+0x1c53>
         : 1102  ./stdio-common/vfprintf-internal.c:1516 (discriminator 217)
    0.00 :   75e8b:  mov    %r10,%r11
    0.00 :   75e8e:  movl   $0x0,0x50(%rsp)
    0.00 :   75e96:  xor    %r10d,%r10d
    0.00 :   75e99:  mov    $0x78,%r13d
    0.00 :   75e9f:  movl   $0x1,0x4c(%rsp)
    0.00 :   75ea7:  movl   $0x10,0x60(%rsp)
    0.00 :   75eaf:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   75eb4:  nopl   0x0(%rax)
    0.00 :   75eb8:  endbr64
         : 1112  ./stdio-common/vfprintf-internal.c:1422
    0.00 :   75ebc:  movzbl 0x1(%rbx),%esi
         : 1114  ./stdio-common/vfprintf-internal.c:1421
    0.00 :   75ec0:  lea    0x1(%rbx),%rcx
         : 1116  ./stdio-common/vfprintf-internal.c:1422
    0.00 :   75ec4:  cmp    $0x2a,%sil
    0.00 :   75ec8:  je     77088 <__vfprintf_internal+0x2058>
         : 1119  ./stdio-common/vfprintf-internal.c:1448
    0.00 :   75ece:  lea    -0x30(%rsi),%r14d
    0.00 :   75ed2:  cmp    $0x9,%r14d
    0.00 :   75ed6:  jbe    76e40 <__vfprintf_internal+0x1e10>
         : 1123  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   75edc:  movzbl (%rcx),%r13d
    0.00 :   75ee0:  mov    %rcx,%rbx
         : 1126  ./stdio-common/vfprintf-internal.c:1462
    0.00 :   75ee3:  xor    %r14d,%r14d
         : 1128  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   75ee6:  lea    -0x20(%r13),%ecx
    0.00 :   75eea:  cmp    $0x5a,%cl
    0.00 :   75eed:  ja     75770 <__vfprintf_internal+0x740>
         : 1132  ./stdio-common/vfprintf-internal.c:1463 (discriminator 1)
    0.00 :   75ef3:  movsbl %r13b,%ecx
    0.00 :   75ef7:  lea    0x15b662(%rip),%rsi        # 1d1560 <step2_jumps.7>
    0.00 :   75efe:  sub    $0x20,%ecx
    0.00 :   75f01:  movslq %ecx,%rcx
    0.00 :   75f04:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   75f08:  movslq (%rsi,%rcx,4),%rsi
    0.00 :   75f0c:  lea    -0x7a3(%rip),%rcx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75f13:  add    %rcx,%rsi
    0.00 :   75f16:  jmp    *%rsi
    0.00 :   75f18:  nopl   0x0(%rax,%rax,1)
    0.00 :   75f20:  endbr64
         : 1144  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75f24:  test   %r10d,%r10d
    0.00 :   75f27:  je     76aa8 <__vfprintf_internal+0x1a78>
    0.00 :   75f2d:  mov    0x20(%rsp),%rdi
    0.00 :   75f32:  mov    (%rdi),%eax
    0.00 :   75f34:  cmp    $0x2f,%eax
    0.00 :   75f37:  ja     76da6 <__vfprintf_internal+0x1d76>
    0.00 :   75f3d:  mov    %eax,%edx
    0.00 :   75f3f:  add    $0x8,%eax
    0.00 :   75f42:  add    0x10(%rdi),%rdx
    0.00 :   75f46:  mov    %eax,(%rdi)
    0.00 :   75f48:  mov    (%rdx),%r10
    0.00 :   75f4b:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   75f50:  endbr64
    0.00 :   75f54:  mov    0x28(%rbp),%rax
    0.00 :   75f58:  cmp    0x30(%rbp),%rax
    0.00 :   75f5c:  jae    77360 <__vfprintf_internal+0x2330>
         : 1161  ./stdio-common/vfprintf-internal.c:1516 (discriminator 2)
    0.00 :   75f62:  lea    0x1(%rax),%rdx
    0.00 :   75f66:  mov    %rdx,0x28(%rbp)
    0.00 :   75f6a:  movb   $0x25,(%rax)
         : 1165  ./stdio-common/vfprintf-internal.c:1516 (discriminator 5)
    0.00 :   75f6d:  cmp    $0x7fffffff,%r12d
    0.00 :   75f74:  je     76728 <__vfprintf_internal+0x16f8>
         : 1168  ./stdio-common/vfprintf-internal.c:1516 (discriminator 7)
    0.00 :   75f7a:  add    $0x1,%r12d
    0.00 :   75f7e:  xchg   %ax,%ax
         : 1171  ./stdio-common/vfprintf-internal.c:1589
    0.00 :   75f80:  lea    0x1(%rbx),%r15
         : 1173  __find_specmb():
         : 1174  ./stdio-common/printf-parse.h:111
    0.00 :   75f84:  mov    $0x25,%esi
         : 1176  __vfprintf_internal():
         : 1177  ./stdio-common/vfprintf-internal.c:1583
    0.00 :   75f89:  addl   $0x1,0x78(%rsp)
         : 1179  __find_specmb():
         : 1180  ./stdio-common/printf-parse.h:111
    0.00 :   75f8e:  mov    %r15,%rdi
    0.00 :   75f91:  call   284d0 <*ABS*+0xab010@plt>
         : 1183  outstring_func():
         : 1184  ./stdio-common/vfprintf-internal.c:239
    0.00 :   75f96:  mov    0xd8(%rbp),%rbx
         : 1186  IO_validate_vtable():
         : 1187  ./stdio-common/../libio/libioP.h:942
    0.00 :   75f9d:  lea    0x19fa5c(%rip),%rdi        # 215a00 <_IO_helper_jumps>
         : 1189  __vfprintf_internal():
         : 1190  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   75fa4:  mov    %rax,%r14
         : 1192  __find_specmb():
         : 1193  ./stdio-common/printf-parse.h:111
    0.00 :   75fa7:  mov    %rax,%r13
         : 1195  IO_validate_vtable():
         : 1196  ./stdio-common/../libio/libioP.h:942
    0.00 :   75faa:  mov    %rbx,%rax
         : 1198  __vfprintf_internal():
         : 1199  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   75fad:  sub    %r15,%r14
         : 1201  IO_validate_vtable():
         : 1202  ./stdio-common/../libio/libioP.h:942
    0.00 :   75fb0:  sub    %rdi,%rax
         : 1204  ./stdio-common/../libio/libioP.h:943
    0.00 :   75fb3:  cmp    %rax,0x30(%rsp)
    0.00 :   75fb8:  jbe    76770 <__vfprintf_internal+0x1740>
         : 1207  outstring_func():
         : 1208  ./stdio-common/vfprintf-internal.c:239
    0.00 :   75fbe:  mov    %r14,%rdx
    0.00 :   75fc1:  mov    %r15,%rsi
    0.00 :   75fc4:  mov    %rbp,%rdi
    0.00 :   75fc7:  call   *0x38(%rbx)
    0.00 :   75fca:  cmp    %r14,%rax
    0.00 :   75fcd:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1215  done_add_func():
         : 1216  ./stdio-common/vfprintf-internal.c:127
    0.00 :   75fd3:  movslq %r12d,%rax
    0.00 :   75fd6:  xor    %edx,%edx
    0.00 :   75fd8:  add    %r14,%rax
    0.00 :   75fdb:  js     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fe1:  cmp    %r14,%rax
    0.00 :   75fe4:  jb     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fea:  movslq %eax,%rcx
    0.00 :   75fed:  mov    %eax,%r12d
    0.00 :   75ff0:  cmp    %rcx,%rax
    0.00 :   75ff3:  mov    $0x1,%ecx
    0.00 :   75ff8:  cmovne %ecx,%edx
    0.00 :   75ffb:  test   %edx,%edx
    0.00 :   75ffd:  jne    75860 <__vfprintf_internal+0x830>
         : 1230  __vfprintf_internal():
         : 1231  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   76003:  test   %eax,%eax
    0.00 :   76005:  js     7533d <__vfprintf_internal+0x30d>
         : 1234  ./stdio-common/vfprintf-internal.c:1595 (discriminator 2)
    0.00 :   7600b:  cmpb   $0x0,0x0(%r13)
    0.00 :   76010:  jne    75210 <__vfprintf_internal+0x1e0>
    0.00 :   76016:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7601b:  nopl   0x0(%rax,%rax,1)
    0.00 :   76020:  endbr64
         : 1240  ./stdio-common/vfprintf-internal.c:1491
    0.00 :   76024:  jmp    753b4 <__vfprintf_internal+0x384>
    0.00 :   76029:  nopl   0x0(%rax)
    0.00 :   76030:  endbr64
         : 1244  ./stdio-common/vfprintf-internal.c:1392 (discriminator 31)
    0.00 :   76034:  mov    0x20(%rsp),%rdi
         : 1246  ./stdio-common/vfprintf-internal.c:1516 (discriminator 31)
    0.00 :   76039:  movl   $0x8,0x60(%rsp)
         : 1248  ./stdio-common/vfprintf-internal.c:1392 (discriminator 31)
    0.00 :   76041:  mov    (%rdi),%eax
         : 1250  ./stdio-common/vfprintf-internal.c:1516 (discriminator 31)
    0.00 :   76043:  test   %r10d,%r10d
    0.00 :   76046:  jne    75a3c <__vfprintf_internal+0xa0c>
         : 1253  ./stdio-common/vfprintf-internal.c:1516 (discriminator 54)
    0.00 :   7604c:  test   %r11d,%r11d
    0.00 :   7604f:  je     76818 <__vfprintf_internal+0x17e8>
         : 1256  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76055:  cmp    $0x2f,%eax
    0.00 :   76058:  ja     76b70 <__vfprintf_internal+0x1b40>
    0.00 :   7605e:  mov    %eax,%edx
    0.00 :   76060:  add    $0x8,%eax
    0.00 :   76063:  add    0x10(%rdi),%rdx
    0.00 :   76067:  mov    %eax,(%rdi)
    0.00 :   76069:  movl   $0x0,0x40(%rsp)
    0.00 :   76071:  movzbl (%rdx),%r11d
    0.00 :   76075:  movl   $0x0,0x58(%rsp)
    0.00 :   7607d:  cmp    $0xffffffff,%r14d
    0.00 :   76081:  jne    75a70 <__vfprintf_internal+0xa40>
    0.00 :   76087:  nopw   0x0(%rax,%rax,1)
    0.00 :   76090:  movq   $0x1,0x70(%rsp)
    0.00 :   76099:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   7609e:  xchg   %ax,%ax
    0.00 :   760a0:  endbr64
    0.00 :   760a4:  movl   $0xa,0x60(%rsp)
    0.00 :   760ac:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760b1:  nopl   0x0(%rax)
    0.00 :   760b8:  endbr64
         : 1277  ./stdio-common/vfprintf-internal.c:1516 (discriminator 32)
    0.00 :   760bc:  movl   $0x10,0x60(%rsp)
    0.00 :   760c4:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760c9:  nopl   0x0(%rax)
    0.00 :   760d0:  endbr64
         : 1282  ./stdio-common/vfprintf-internal.c:1323
    0.00 :   760d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   760d9:  lea    0x1(%rbx),%rcx
    0.00 :   760dd:  lea    -0x974(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   760e4:  lea    -0x20(%r13),%edi
    0.00 :   760e8:  cmp    $0x5a,%dil
    0.00 :   760ec:  ja     76bb8 <__vfprintf_internal+0x1b88>
         : 1289  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   760f2:  movsbl %r13b,%esi
         : 1291  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   760f6:  lea    0x15b563(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1293  ./stdio-common/vfprintf-internal.c:1322 (discriminator 1)
    0.00 :   760fd:  movl   $0x1,0x40(%rsp)
         : 1295  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   76105:  sub    $0x20,%esi
    0.00 :   76108:  movslq %esi,%rsi
    0.00 :   7610b:  movzbl (%rax,%rsi,1),%esi
         : 1299  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   7610f:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76113:  lea    -0x9aa(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7611a:  add    %rbx,%rsi
         : 1303  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   7611d:  mov    %rcx,%rbx
    0.00 :   76120:  jmp    *%rsi
    0.00 :   76122:  nopw   0x0(%rax,%rax,1)
    0.00 :   76128:  endbr64
         : 1308  ./stdio-common/vfprintf-internal.c:1318
    0.00 :   7612c:  movzbl 0x1(%rbx),%r13d
    0.00 :   76131:  lea    0x1(%rbx),%rcx
    0.00 :   76135:  lea    -0x20(%r13),%esi
    0.00 :   76139:  cmp    $0x5a,%sil
    0.00 :   7613d:  jbe    76b28 <__vfprintf_internal+0x1af8>
    0.00 :   76143:  lea    -0x9da(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
         : 1315  ./stdio-common/vfprintf-internal.c:1317
    0.00 :   7614a:  movl   $0x1,0x58(%rsp)
         : 1317  ./stdio-common/vfprintf-internal.c:1318
    0.00 :   76152:  mov    %rcx,%rbx
    0.00 :   76155:  jmp    *%rsi
    0.00 :   76157:  nopw   0x0(%rax,%rax,1)
    0.00 :   76160:  endbr64
         : 1322  ./stdio-common/vfprintf-internal.c:1474
    0.00 :   76164:  movzbl 0x1(%rbx),%r13d
    0.00 :   76169:  lea    0x1(%rbx),%rcx
    0.00 :   7616d:  lea    -0xa04(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76174:  lea    -0x20(%r13),%edi
    0.00 :   76178:  cmp    $0x5a,%dil
    0.00 :   7617c:  ja     7619a <__vfprintf_internal+0x116a>
         : 1329  ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   7617e:  movsbl %r13b,%esi
    0.00 :   76182:  lea    -0xa19(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76189:  sub    $0x20,%esi
    0.00 :   7618c:  movslq %esi,%rsi
    0.00 :   7618f:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76193:  movslq (%r8,%rsi,4),%rsi
    0.00 :   76197:  add    %rbx,%rsi
         : 1337  ./stdio-common/vfprintf-internal.c:1474 (discriminator 4)
    0.00 :   7619a:  mov    %rcx,%rbx
         : 1339  ./stdio-common/vfprintf-internal.c:1472 (discriminator 4)
    0.00 :   7619d:  xor    %r15d,%r15d
         : 1341  ./stdio-common/vfprintf-internal.c:1473 (discriminator 4)
    0.00 :   761a0:  mov    $0x1,%r11d
    0.00 :   761a6:  jmp    *%rsi
    0.00 :   761a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   761b0:  endbr64
         : 1346  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761b4:  mov    0x28(%rsp),%ecx
    0.00 :   761b8:  movzbl 0x38(%rsp),%esi
         : 1349  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761bd:  movzbl 0x1(%rbx),%r13d
         : 1351  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761c2:  test   %ecx,%ecx
    0.00 :   761c4:  mov    $0x30,%ecx
    0.00 :   761c9:  cmove  %ecx,%esi
         : 1355  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761cc:  lea    -0x20(%r13),%edi
    0.00 :   761d0:  lea    0x1(%rbx),%rcx
         : 1358  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761d4:  mov    %sil,0x38(%rsp)
         : 1360  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761d9:  lea    -0xa70(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   761e0:  cmp    $0x5a,%dil
    0.00 :   761e4:  ja     76891 <__vfprintf_internal+0x1861>
         : 1364  ./stdio-common/vfprintf-internal.c:1340 (discriminator 1)
    0.00 :   761ea:  movsbl %r13b,%esi
         : 1366  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   761ee:  lea    0x15b46b(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1368  ./stdio-common/vfprintf-internal.c:1340 (discriminator 1)
    0.00 :   761f5:  sub    $0x20,%esi
    0.00 :   761f8:  movslq %esi,%rsi
    0.00 :   761fb:  movzbl (%rax,%rsi,1),%esi
         : 1372  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   761ff:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76203:  lea    -0xa9a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7620a:  add    %rbx,%rsi
         : 1376  ./stdio-common/vfprintf-internal.c:1418 (discriminator 1)
    0.00 :   7620d:  mov    %rcx,%rbx
    0.00 :   76210:  jmp    *%rsi
    0.00 :   76212:  nopw   0x0(%rax,%rax,1)
    0.00 :   76218:  endbr64
         : 1381  ./stdio-common/vfprintf-internal.c:1377
    0.00 :   7621c:  movzbl 0x1(%rbx),%esi
         : 1383  ./stdio-common/vfprintf-internal.c:1376
    0.00 :   76220:  lea    0x1(%rbx),%rdi
    0.00 :   76224:  mov    %rdi,0x70(%rsp)
         : 1386  ./stdio-common/vfprintf-internal.c:1377
    0.00 :   76229:  sub    $0x30,%esi
    0.00 :   7622c:  cmp    $0x9,%esi
    0.00 :   7622f:  jbe    76a10 <__vfprintf_internal+0x19e0>
         : 1390  ./stdio-common/vfprintf-internal.c:1392
    0.00 :   76235:  mov    0x20(%rsp),%rsi
    0.00 :   7623a:  mov    (%rsi),%ecx
    0.00 :   7623c:  cmp    $0x2f,%ecx
    0.00 :   7623f:  jbe    76c70 <__vfprintf_internal+0x1c40>
    0.00 :   76245:  mov    %rsi,%rdi
    0.00 :   76248:  mov    0x8(%rsi),%rsi
    0.00 :   7624c:  lea    0x8(%rsi),%rcx
    0.00 :   76250:  mov    %rcx,0x8(%rdi)
    0.00 :   76254:  mov    (%rsi),%edi
    0.00 :   76256:  mov    %edi,0x10(%rsp)
         : 1401  ./stdio-common/vfprintf-internal.c:1395
    0.00 :   7625a:  test   %edi,%edi
    0.00 :   7625c:  jns    76271 <__vfprintf_internal+0x1241>
         : 1404  ./stdio-common/vfprintf-internal.c:1397
    0.00 :   7625e:  neg    %edi
         : 1406  ./stdio-common/vfprintf-internal.c:1398
    0.00 :   76260:  movb   $0x20,0x38(%rsp)
         : 1408  ./stdio-common/vfprintf-internal.c:1397
    0.00 :   76265:  mov    %edi,0x10(%rsp)
         : 1410  ./stdio-common/vfprintf-internal.c:1399
    0.00 :   76269:  movl   $0x1,0x28(%rsp)
         : 1412  ./stdio-common/vfprintf-internal.c:1402
    0.00 :   76271:  movzbl 0x1(%rbx),%r13d
    0.00 :   76276:  lea    -0xb0d(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7627d:  lea    -0x20(%r13),%ecx
    0.00 :   76281:  cmp    $0x5a,%cl
    0.00 :   76284:  ja     76c68 <__vfprintf_internal+0x1c38>
         : 1418  ./stdio-common/vfprintf-internal.c:1402 (discriminator 1)
    0.00 :   7628a:  movsbl %r13b,%ecx
    0.00 :   7628e:  lea    0x15b34b(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76295:  sub    $0x20,%ecx
    0.00 :   76298:  movslq %ecx,%rcx
    0.00 :   7629b:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   7629f:  movslq (%rbx,%rcx,4),%rsi
    0.00 :   762a3:  lea    -0xb3a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762aa:  add    %rbx,%rsi
         : 1427  ./stdio-common/vfprintf-internal.c:1376 (discriminator 1)
    0.00 :   762ad:  mov    0x70(%rsp),%rbx
    0.00 :   762b2:  jmp    *%rsi
    0.00 :   762b4:  nopl   0x0(%rax)
    0.00 :   762b8:  endbr64
         : 1432  ./stdio-common/vfprintf-internal.c:1468
    0.00 :   762bc:  movzbl 0x1(%rbx),%r13d
    0.00 :   762c1:  lea    0x1(%rbx),%rcx
    0.00 :   762c5:  lea    -0xb5c(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762cc:  lea    -0x20(%r13),%edi
    0.00 :   762d0:  cmp    $0x5a,%dil
    0.00 :   762d4:  ja     76be0 <__vfprintf_internal+0x1bb0>
         : 1439  ./stdio-common/vfprintf-internal.c:1468 (discriminator 1)
    0.00 :   762da:  movsbl %r13b,%esi
    0.00 :   762de:  lea    0x15b1fb(%rip),%rbx        # 1d14e0 <step3a_jumps.6>
         : 1442  ./stdio-common/vfprintf-internal.c:1467 (discriminator 1)
    0.00 :   762e5:  mov    $0x1,%r15d
         : 1444  ./stdio-common/vfprintf-internal.c:1468 (discriminator 1)
    0.00 :   762eb:  sub    $0x20,%esi
    0.00 :   762ee:  movslq %esi,%rsi
    0.00 :   762f1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   762f5:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   762f9:  lea    -0xb90(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76300:  add    %rbx,%rsi
    0.00 :   76303:  mov    %rcx,%rbx
    0.00 :   76306:  jmp    *%rsi
    0.00 :   76308:  nopl   0x0(%rax,%rax,1)
    0.00 :   76310:  endbr64
         : 1455  read_int():
         : 1456  ./stdio-common/printf-parse.h:76
    0.00 :   76314:  movzbl (%rbx),%ecx
         : 1458  ./stdio-common/printf-parse.h:78
    0.00 :   76317:  movzbl 0x1(%rbx),%esi
         : 1460  ./stdio-common/printf-parse.h:76
    0.00 :   7631b:  sub    $0x30,%ecx
         : 1462  ./stdio-common/printf-parse.h:78
    0.00 :   7631e:  mov    %esi,%r13d
         : 1464  ./stdio-common/printf-parse.h:76
    0.00 :   76321:  mov    %ecx,0x10(%rsp)
         : 1466  ./stdio-common/printf-parse.h:78
    0.00 :   76325:  lea    0x1(%rbx),%rcx
    0.00 :   76329:  lea    -0x30(%rsi),%ebx
    0.00 :   7632c:  mov    0x10(%rsp),%esi
    0.00 :   76330:  cmp    $0x9,%ebx
    0.00 :   76333:  ja     7642d <__vfprintf_internal+0x13fd>
    0.00 :   76339:  movzbl 0x1(%rcx),%edi
    0.00 :   7633d:  add    $0x1,%rcx
    0.00 :   76341:  mov    %dil,0x70(%rsp)
    0.00 :   76346:  sub    $0x30,%edi
         : 1476  ./stdio-common/printf-parse.h:79
    0.00 :   76349:  test   %esi,%esi
    0.00 :   7634b:  js     77549 <__vfprintf_internal+0x2519>
         : 1479  ./stdio-common/printf-parse.h:81
    0.00 :   76351:  cmp    $0xccccccc,%esi
    0.00 :   76357:  jg     763d8 <__vfprintf_internal+0x13a8>
         : 1482  ./stdio-common/printf-parse.h:87
    0.00 :   76359:  lea    (%rsi,%rsi,4),%esi
         : 1484  ./stdio-common/printf-parse.h:88
    0.00 :   7635c:  mov    %r9d,%r13d
         : 1486  ./stdio-common/printf-parse.h:87
    0.00 :   7635f:  add    %esi,%esi
         : 1488  ./stdio-common/printf-parse.h:88
    0.00 :   76361:  sub    %ebx,%r13d
    0.00 :   76364:  cmp    %r13d,%esi
    0.00 :   76367:  jg     763d8 <__vfprintf_internal+0x13a8>
         : 1492  ./stdio-common/printf-parse.h:91
    0.00 :   76369:  add    %ebx,%esi
         : 1494  ./stdio-common/printf-parse.h:78
    0.00 :   7636b:  cmp    $0x9,%edi
    0.00 :   7636e:  ja     76868 <__vfprintf_internal+0x1838>
    0.00 :   76374:  mov    %edi,%ebx
    0.00 :   76376:  jmp    76339 <__vfprintf_internal+0x1309>
    0.00 :   76378:  nopl   0x0(%rax,%rax,1)
    0.00 :   76380:  endbr64
         : 1501  __vfprintf_internal():
         : 1502  ./stdio-common/vfprintf-internal.c:1369
    0.00 :   76384:  movzbl 0x1(%rbx),%r13d
    0.00 :   76389:  lea    0x1(%rbx),%rcx
    0.00 :   7638d:  lea    -0xc24(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76394:  lea    -0x20(%r13),%edi
    0.00 :   76398:  cmp    $0x5a,%dil
    0.00 :   7639c:  ja     76a98 <__vfprintf_internal+0x1a68>
         : 1509  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763a2:  movsbl %r13b,%esi
         : 1511  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   763a6:  lea    0x15b2b3(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1513  ./stdio-common/vfprintf-internal.c:1368 (discriminator 1)
    0.00 :   763ad:  movl   $0x1,0x5c(%rsp)
         : 1515  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763b5:  sub    $0x20,%esi
    0.00 :   763b8:  movslq %esi,%rsi
    0.00 :   763bb:  movzbl (%rax,%rsi,1),%esi
         : 1519  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   763bf:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   763c3:  lea    -0xc5a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   763ca:  add    %rbx,%rsi
         : 1523  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763cd:  mov    %rcx,%rbx
    0.00 :   763d0:  jmp    *%rsi
    0.00 :   763d2:  nopw   0x0(%rax,%rax,1)
         : 1527  read_int():
         : 1528  ./stdio-common/printf-parse.h:78
    0.00 :   763d8:  cmp    $0x9,%edi
    0.00 :   763db:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763e1:  movzbl 0x1(%rcx),%esi
    0.00 :   763e5:  sub    $0x30,%esi
    0.00 :   763e8:  cmp    $0x9,%esi
    0.00 :   763eb:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763f1:  movzbl 0x2(%rcx),%esi
    0.00 :   763f5:  add    $0x2,%rcx
    0.00 :   763f9:  sub    $0x30,%esi
    0.00 :   763fc:  cmp    $0x9,%esi
    0.00 :   763ff:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76405:  movl   $0xffffffff,0x10(%rsp)
    0.00 :   7640d:  lea    0x1(%rcx),%rsi
    0.00 :   76411:  nopl   0x0(%rax)
    0.00 :   76418:  movzbl (%rsi),%edi
    0.00 :   7641b:  mov    %rsi,%rcx
    0.00 :   7641e:  add    $0x1,%rsi
    0.00 :   76422:  mov    %edi,%r13d
    0.00 :   76425:  sub    $0x30,%edi
    0.00 :   76428:  cmp    $0x9,%edi
    0.00 :   7642b:  jbe    76418 <__vfprintf_internal+0x13e8>
         : 1550  __vfprintf_internal():
         : 1551  ./stdio-common/vfprintf-internal.c:1408
    0.00 :   7642d:  cmpl   $0xffffffff,0x10(%rsp)
    0.00 :   76432:  jne    76872 <__vfprintf_internal+0x1842>
    0.00 :   76438:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   7643d:  nopl   (%rax)
         : 1556  ./stdio-common/vfprintf-internal.c:1516 (discriminator 86)
    0.00 :   76440:  test   %r10d,%r10d
    0.00 :   76443:  je     76740 <__vfprintf_internal+0x1710>
         : 1559  ./stdio-common/vfprintf-internal.c:1516 (discriminator 157)
    0.00 :   76449:  mov    0x28(%rbp),%rax
    0.00 :   7644d:  cmp    0x30(%rbp),%rax
    0.00 :   76451:  jae    766f0 <__vfprintf_internal+0x16c0>
         : 1563  ./stdio-common/vfprintf-internal.c:1516 (discriminator 160)
    0.00 :   76457:  lea    0x1(%rax),%rcx
    0.00 :   7645b:  mov    %rcx,0x28(%rbp)
    0.00 :   7645f:  movb   $0x2d,(%rax)
         : 1567  ./stdio-common/vfprintf-internal.c:1516 (discriminator 183)
    0.00 :   76462:  cmp    $0x7fffffff,%r12d
    0.00 :   76469:  je     76728 <__vfprintf_internal+0x16f8>
         : 1570  ./stdio-common/vfprintf-internal.c:1516 (discriminator 185)
    0.00 :   7646f:  subl   $0x1,0x10(%rsp)
    0.00 :   76474:  add    $0x1,%r12d
         : 1573  ./stdio-common/vfprintf-internal.c:1516 (discriminator 186)
    0.00 :   76478:  test   %r11,%r11
    0.00 :   7647b:  je     76489 <__vfprintf_internal+0x1459>
    0.00 :   7647d:  mov    0x4c(%rsp),%eax
    0.00 :   76481:  test   %eax,%eax
    0.00 :   76483:  jne    76960 <__vfprintf_internal+0x1930>
         : 1579  ./stdio-common/vfprintf-internal.c:1516 (discriminator 207)
    0.00 :   76489:  mov    0x10(%rsp),%r13d
    0.00 :   7648e:  add    %r15d,%edx
    0.00 :   76491:  sub    %edx,%r13d
    0.00 :   76494:  test   %r14d,%r14d
    0.00 :   76497:  jle    764eb <__vfprintf_internal+0x14bb>
         : 1585  pad_func():
         : 1586  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76499:  movslq %r14d,%rdx
    0.00 :   7649c:  mov    $0x30,%esi
    0.00 :   764a1:  mov    %rbp,%rdi
    0.00 :   764a4:  mov    %r9,0x28(%rsp)
    0.00 :   764a9:  mov    %rdx,0x10(%rsp)
    0.00 :   764ae:  call   806a0 <_IO_padn>
         : 1593  ./stdio-common/vfprintf-internal.c:200
    0.00 :   764b3:  mov    0x10(%rsp),%rdx
    0.00 :   764b8:  cmp    %rax,%rdx
    0.00 :   764bb:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1597  done_add_func():
         : 1598  ./stdio-common/vfprintf-internal.c:127
    0.00 :   764c1:  xor    %eax,%eax
    0.00 :   764c3:  add    %r14d,%r12d
    0.00 :   764c6:  mov    0x28(%rsp),%r9
    0.00 :   764cb:  js     77586 <__vfprintf_internal+0x2556>
    0.00 :   764d1:  cmp    %edx,%r12d
    0.00 :   764d4:  jb     77586 <__vfprintf_internal+0x2556>
    0.00 :   764da:  test   %eax,%eax
    0.00 :   764dc:  jne    75860 <__vfprintf_internal+0x830>
         : 1607  __vfprintf_internal():
         : 1608  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   764e2:  test   %r12d,%r12d
    0.00 :   764e5:  js     7533d <__vfprintf_internal+0x30d>
         : 1611  outstring_func():
         : 1612  ./stdio-common/vfprintf-internal.c:239
    0.00 :   764eb:  mov    0xd8(%rbp),%r14
         : 1614  IO_validate_vtable():
         : 1615  ./stdio-common/../libio/libioP.h:942
    0.00 :   764f2:  lea    0x19f507(%rip),%rsi        # 215a00 <_IO_helper_jumps>
    0.00 :   764f9:  mov    %r14,%rax
    0.00 :   764fc:  sub    %rsi,%rax
         : 1619  ./stdio-common/../libio/libioP.h:943
    0.00 :   764ff:  cmp    %rax,0x30(%rsp)
    0.00 :   76504:  jbe    771bd <__vfprintf_internal+0x218d>
         : 1622  outstring_func():
         : 1623  ./stdio-common/vfprintf-internal.c:239
    0.00 :   7650a:  mov    %r15,%rdx
    0.00 :   7650d:  mov    %r9,%rsi
    0.00 :   76510:  mov    %rbp,%rdi
    0.00 :   76513:  call   *0x38(%r14)
    0.00 :   76517:  cmp    %r15,%rax
    0.00 :   7651a:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1630  done_add_func():
         : 1631  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76520:  movslq %r12d,%rax
    0.00 :   76523:  xor    %edx,%edx
    0.00 :   76525:  add    %r15,%rax
    0.00 :   76528:  js     77519 <__vfprintf_internal+0x24e9>
    0.00 :   7652e:  cmp    %r15,%rax
    0.00 :   76531:  jb     77519 <__vfprintf_internal+0x24e9>
    0.00 :   76537:  movslq %eax,%rcx
    0.00 :   7653a:  mov    %eax,%r12d
    0.00 :   7653d:  cmp    %rcx,%rax
    0.00 :   76540:  mov    $0x1,%ecx
    0.00 :   76545:  cmovne %ecx,%edx
    0.00 :   76548:  test   %edx,%edx
    0.00 :   7654a:  jne    75860 <__vfprintf_internal+0x830>
         : 1645  __vfprintf_internal():
         : 1646  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76550:  test   %eax,%eax
    0.00 :   76552:  jns    756d0 <__vfprintf_internal+0x6a0>
    0.00 :   76558:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7655d:  nopl   (%rax)
         : 1651  ./stdio-common/vfprintf-internal.c:1516 (discriminator 67)
    0.00 :   76560:  test   %r11,%r11
    0.00 :   76563:  jne    76800 <__vfprintf_internal+0x17d0>
         : 1654  ./stdio-common/vfprintf-internal.c:1516 (discriminator 69)
    0.00 :   76569:  cmpl   $0x8,0x60(%rsp)
    0.00 :   7656e:  jne    769f8 <__vfprintf_internal+0x19c8>
    0.00 :   76574:  mov    0x4c(%rsp),%eax
    0.00 :   76578:  test   %eax,%eax
    0.00 :   7657a:  je     769f8 <__vfprintf_internal+0x19c8>
         : 1660  ./stdio-common/vfprintf-internal.c:1516 (discriminator 71)
    0.00 :   76580:  movb   $0x30,0x527(%rsp)
    0.00 :   76588:  mov    $0x1,%r15d
    0.00 :   7658e:  lea    0x527(%rsp),%r9
         : 1664  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76596:  movb   $0x20,0x38(%rsp)
    0.00 :   7659b:  xor    %edx,%edx
    0.00 :   7659d:  mov    0x28(%rsp),%eax
    0.00 :   765a1:  test   %eax,%eax
    0.00 :   765a3:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   765a9:  mov    0x10(%rsp),%r8d
    0.00 :   765ae:  add    %r15d,%edx
    0.00 :   765b1:  sub    %edx,%r8d
    0.00 :   765b4:  jmp    75baf <__vfprintf_internal+0xb7f>
    0.00 :   765b9:  nopl   0x0(%rax)
         : 1675  ./stdio-common/vfprintf-internal.c:1516 (discriminator 78)
    0.00 :   765c0:  test   %r11,%r11
    0.00 :   765c3:  je     77038 <__vfprintf_internal+0x2008>
         : 1678  ./stdio-common/vfprintf-internal.c:1516 (discriminator 80)
    0.00 :   765c9:  cmpl   $0x8,0x60(%rsp)
    0.00 :   765ce:  jne    765ea <__vfprintf_internal+0x15ba>
    0.00 :   765d0:  mov    0x4c(%rsp),%eax
    0.00 :   765d4:  test   %eax,%eax
    0.00 :   765d6:  je     765ea <__vfprintf_internal+0x15ba>
         : 1684  ./stdio-common/vfprintf-internal.c:1516 (discriminator 82)
    0.00 :   765d8:  lea    -0x1(%r9),%rax
    0.00 :   765dc:  mov    %r14,%r15
    0.00 :   765df:  movb   $0x30,-0x1(%r9)
    0.00 :   765e4:  sub    %rax,%r15
    0.00 :   765e7:  mov    %rax,%r9
         : 1690  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   765ea:  mov    0x70(%rsp),%rdx
    0.00 :   765ef:  mov    $0x0,%eax
    0.00 :   765f4:  mov    0x28(%rsp),%ecx
    0.00 :   765f8:  sub    %r15,%rdx
    0.00 :   765fb:  cmovs  %rax,%rdx
    0.00 :   765ff:  mov    %edx,%r14d
    0.00 :   76602:  test   %ecx,%ecx
    0.00 :   76604:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   7660a:  mov    0x10(%rsp),%r8d
    0.00 :   7660f:  sub    %r15d,%r8d
    0.00 :   76612:  sub    %edx,%r8d
    0.00 :   76615:  jmp    75b90 <__vfprintf_internal+0xb60>
    0.00 :   7661a:  nopw   0x0(%rax,%rax,1)
         : 1704  ./stdio-common/vfprintf-internal.c:1236
    0.00 :   76620:  mov    0x528(%rsp),%rax
    0.00 :   76628:  sub    %fs:0x28,%rax
    0.00 :   76631:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   76637:  mov    0x7c(%rsp),%ecx
    0.00 :   7663b:  mov    0x20(%rsp),%rdx
    0.00 :   76640:  mov    %rbp,%rdi
    0.00 :   76643:  mov    0x8(%rsp),%rsi
         : 1712  ./stdio-common/vfprintf-internal.c:1612
    0.00 :   76648:  add    $0x538,%rsp
    0.00 :   7664f:  pop    %rbx
    0.00 :   76650:  pop    %rbp
    0.00 :   76651:  pop    %r12
    0.00 :   76653:  pop    %r13
    0.00 :   76655:  pop    %r14
    0.00 :   76657:  pop    %r15
         : 1720  ./stdio-common/vfprintf-internal.c:1236
    0.00 :   76659:  jmp    775a0 <buffered_vfprintf>
    0.00 :   7665e:  xchg   %ax,%ax
         : 1723  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76660:  cmpb   $0x20,0x38(%rsp)
    0.00 :   76665:  jne    75c02 <__vfprintf_internal+0xbd2>
         : 1726  pad_func():
         : 1727  ./stdio-common/vfprintf-internal.c:192
    0.00 :   7666b:  test   %r8d,%r8d
    0.00 :   7666e:  jle    77541 <__vfprintf_internal+0x2511>
         : 1730  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76674:  movslq %r8d,%rdx
    0.00 :   76677:  mov    $0x20,%esi
    0.00 :   7667c:  mov    %rbp,%rdi
    0.00 :   7667f:  mov    %r10d,0x5c(%rsp)
    0.00 :   76684:  mov    %rdx,0x10(%rsp)
    0.00 :   76689:  mov    %r9,0x50(%rsp)
    0.00 :   7668e:  mov    %r11,0x38(%rsp)
    0.00 :   76693:  mov    %r8d,0x28(%rsp)
    0.00 :   76698:  call   806a0 <_IO_padn>
         : 1740  ./stdio-common/vfprintf-internal.c:200
    0.00 :   7669d:  mov    0x10(%rsp),%rdx
    0.00 :   766a2:  cmp    %rax,%rdx
    0.00 :   766a5:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1744  done_add_func():
         : 1745  ./stdio-common/vfprintf-internal.c:127
    0.00 :   766ab:  mov    0x28(%rsp),%r8d
    0.00 :   766b0:  xor    %eax,%eax
    0.00 :   766b2:  mov    0x38(%rsp),%r11
    0.00 :   766b7:  mov    0x50(%rsp),%r9
    0.00 :   766bc:  mov    0x5c(%rsp),%r10d
    0.00 :   766c1:  add    %r8d,%r12d
    0.00 :   766c4:  js     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766ca:  cmp    %edx,%r12d
    0.00 :   766cd:  jb     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766d3:  mov    %eax,%r8d
    0.00 :   766d6:  test   %eax,%eax
    0.00 :   766d8:  jne    75860 <__vfprintf_internal+0x830>
         : 1758  __vfprintf_internal():
         : 1759  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   766de:  test   %r12d,%r12d
    0.00 :   766e1:  jns    75bcf <__vfprintf_internal+0xb9f>
    0.00 :   766e7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   766ec:  nopl   0x0(%rax)
    0.00 :   766f0:  mov    %r9,0x40(%rsp)
         : 1765  ./stdio-common/vfprintf-internal.c:1516 (discriminator 159)
    0.00 :   766f5:  mov    $0x2d,%esi
    0.00 :   766fa:  mov    %rdx,0x38(%rsp)
    0.00 :   766ff:  mov    %r11,0x28(%rsp)
         : 1769  ./stdio-common/vfprintf-internal.c:1516 (discriminator 179)
    0.00 :   76704:  mov    %rbp,%rdi
    0.00 :   76707:  call   8d800 <__overflow>
    0.00 :   7670c:  mov    0x28(%rsp),%r11
    0.00 :   76711:  mov    0x38(%rsp),%rdx
    0.00 :   76716:  cmp    $0xffffffff,%eax
    0.00 :   76719:  mov    0x40(%rsp),%r9
    0.00 :   7671e:  jne    76462 <__vfprintf_internal+0x1432>
    0.00 :   76724:  nopl   0x0(%rax)
         : 1778  outstring_func():
         : 1779  ./stdio-common/vfprintf-internal.c:240
    0.00 :   76728:  mov    $0xffffffff,%r12d
         : 1781  __vfprintf_internal():
         : 1782  ./stdio-common/vfprintf-internal.c:1608
    0.00 :   7672e:  testl  $0x8000,0x0(%rbp)
    0.00 :   76735:  jne    75346 <__vfprintf_internal+0x316>
    0.00 :   7673b:  jmp    75380 <__vfprintf_internal+0x350>
         : 1786  ./stdio-common/vfprintf-internal.c:1516 (discriminator 158)
    0.00 :   76740:  mov    0x40(%rsp),%eax
    0.00 :   76744:  test   %eax,%eax
    0.00 :   76746:  je     76930 <__vfprintf_internal+0x1900>
         : 1790  ./stdio-common/vfprintf-internal.c:1516 (discriminator 167)
    0.00 :   7674c:  mov    0x28(%rbp),%rax
    0.00 :   76750:  cmp    0x30(%rbp),%rax
    0.00 :   76754:  jae    773b8 <__vfprintf_internal+0x2388>
         : 1794  ./stdio-common/vfprintf-internal.c:1516 (discriminator 170)
    0.00 :   7675a:  lea    0x1(%rax),%rcx
    0.00 :   7675e:  mov    %rcx,0x28(%rbp)
    0.00 :   76762:  movb   $0x2b,(%rax)
    0.00 :   76765:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7676a:  nopw   0x0(%rax,%rax,1)
         : 1800  IO_validate_vtable():
         : 1801  ./stdio-common/../libio/libioP.h:946
    0.00 :   76770:  call   89ef0 <_IO_vtable_check>
    0.00 :   76775:  jmp    75fbe <__vfprintf_internal+0xf8e>
    0.00 :   7677a:  nopw   0x0(%rax,%rax,1)
         : 1805  pad_func():
         : 1806  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76780:  movslq %r13d,%r14
    0.00 :   76783:  mov    $0x30,%esi
    0.00 :   76788:  mov    %rbp,%rdi
    0.00 :   7678b:  mov    %r9,0x10(%rsp)
    0.00 :   76790:  mov    %r14,%rdx
    0.00 :   76793:  call   806a0 <_IO_padn>
         : 1813  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76798:  cmp    %rax,%r14
    0.00 :   7679b:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1816  done_add_func():
         : 1817  ./stdio-common/vfprintf-internal.c:127
    0.00 :   7679d:  xor    %eax,%eax
    0.00 :   7679f:  add    %r13d,%r12d
    0.00 :   767a2:  mov    0x10(%rsp),%r9
    0.00 :   767a7:  js     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767ad:  cmp    %r13d,%r12d
    0.00 :   767b0:  jb     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767b6:  test   %eax,%eax
    0.00 :   767b8:  jne    75860 <__vfprintf_internal+0x830>
         : 1826  __vfprintf_internal():
         : 1827  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   767be:  test   %r12d,%r12d
    0.00 :   767c1:  jns    75c7d <__vfprintf_internal+0xc4d>
    0.00 :   767c7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   767cc:  nopl   0x0(%rax)
         : 1832  ./stdio-common/vfprintf-internal.c:1516 (discriminator 103)
    0.00 :   767d0:  mov    0x40(%rsp),%esi
    0.00 :   767d4:  test   %esi,%esi
    0.00 :   767d6:  je     77058 <__vfprintf_internal+0x2028>
         : 1836  ./stdio-common/vfprintf-internal.c:1516 (discriminator 112)
    0.00 :   767dc:  mov    0x28(%rbp),%rax
    0.00 :   767e0:  cmp    0x30(%rbp),%rax
    0.00 :   767e4:  jae    7739f <__vfprintf_internal+0x236f>
         : 1840  ./stdio-common/vfprintf-internal.c:1516 (discriminator 115)
    0.00 :   767ea:  lea    0x1(%rax),%rdx
    0.00 :   767ee:  mov    %rdx,0x28(%rbp)
    0.00 :   767f2:  movb   $0x2b,(%rax)
    0.00 :   767f5:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   767fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   76800:  movq   $0x0,0x70(%rsp)
         : 1847  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76809:  movb   $0x20,0x38(%rsp)
    0.00 :   7680e:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   76813:  nopl   0x0(%rax,%rax,1)
         : 1851  ./stdio-common/vfprintf-internal.c:1516 (discriminator 57)
    0.00 :   76818:  test   %r15d,%r15d
    0.00 :   7681b:  jne    76af0 <__vfprintf_internal+0x1ac0>
         : 1854  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76821:  cmp    $0x2f,%eax
    0.00 :   76824:  ja     76dec <__vfprintf_internal+0x1dbc>
    0.00 :   7682a:  mov    %eax,%edx
    0.00 :   7682c:  add    $0x8,%eax
    0.00 :   7682f:  add    0x10(%rdi),%rdx
    0.00 :   76833:  mov    %eax,(%rdi)
    0.00 :   76835:  movl   $0x0,0x40(%rsp)
    0.00 :   7683d:  mov    (%rdx),%r11d
    0.00 :   76840:  xor    %r10d,%r10d
    0.00 :   76843:  movl   $0x0,0x58(%rsp)
    0.00 :   7684b:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76850:  mov    0x8(%rdi),%rdx
    0.00 :   76854:  lea    0x8(%rdx),%rax
    0.00 :   76858:  mov    %rax,0x8(%rdi)
    0.00 :   7685c:  jmp    75a50 <__vfprintf_internal+0xa20>
    0.00 :   76861:  nopl   0x0(%rax)
    0.00 :   76868:  mov    %esi,0x10(%rsp)
    0.00 :   7686c:  movzbl 0x70(%rsp),%r13d
         : 1873  ./stdio-common/vfprintf-internal.c:1415
    0.00 :   76872:  cmp    $0x24,%r13b
    0.00 :   76876:  je     76a88 <__vfprintf_internal+0x1a58>
         : 1876  ./stdio-common/vfprintf-internal.c:1418
    0.00 :   7687c:  lea    -0x20(%r13),%edi
    0.00 :   76880:  lea    -0x1117(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76887:  cmp    $0x5a,%dil
    0.00 :   7688b:  jbe    76cd0 <__vfprintf_internal+0x1ca0>
         : 1881  ./stdio-common/vfprintf-internal.c:1418 (discriminator 4)
    0.00 :   76891:  mov    %rcx,%rbx
    0.00 :   76894:  jmp    *%rsi
    0.00 :   76896:  cs nopw 0x0(%rax,%rax,1)
         : 1885  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   768a0:  mov    0x20(%rsp),%rcx
    0.00 :   768a5:  mov    0x8(%rcx),%rax
    0.00 :   768a9:  mov    %rax,0x10(%rsp)
    0.00 :   768ae:  add    $0xf,%rax
    0.00 :   768b2:  and    $0xfffffffffffffff0,%rax
    0.00 :   768b6:  lea    0x10(%rax),%rdx
    0.00 :   768ba:  mov    %rdx,0x8(%rcx)
    0.00 :   768be:  fldt   (%rax)
    0.00 :   768c0:  fstpt  0xc0(%rsp)
         : 1895  ./stdio-common/vfprintf-internal.c:1556 (discriminator 9)
    0.00 :   768c7:  lea    0xc0(%rsp),%rax
         : 1897  __printf_fp_spec():
         : 1898  ./stdio-common/vfprintf-internal.c:351 (discriminator 9)
    0.00 :   768cf:  and    $0xffffffdf,%r13d
         : 1900  ./stdio-common/vfprintf-internal.c:352 (discriminator 9)
    0.00 :   768d3:  mov    %rbp,%rdi
         : 1902  __vfprintf_internal():
         : 1903  ./stdio-common/vfprintf-internal.c:1556 (discriminator 9)
    0.00 :   768d6:  mov    %rax,0xb8(%rsp)
         : 1905  __printf_fp_spec():
         : 1906  ./stdio-common/vfprintf-internal.c:352 (discriminator 9)
    0.00 :   768de:  lea    0xb8(%rsp),%rdx
    0.00 :   768e6:  lea    0xd0(%rsp),%rsi
         : 1909  ./stdio-common/vfprintf-internal.c:351 (discriminator 9)
    0.00 :   768ee:  cmp    $0x41,%r13d
    0.00 :   768f2:  jne    76928 <__vfprintf_internal+0x18f8>
         : 1912  ./stdio-common/vfprintf-internal.c:352
    0.00 :   768f4:  call   5d8b0 <__printf_fphex>
         : 1914  __vfprintf_internal():
         : 1915  ./stdio-common/vfprintf-internal.c:1559
    0.00 :   768f9:  test   %eax,%eax
    0.00 :   768fb:  js     76728 <__vfprintf_internal+0x16f8>
         : 1918  done_add_func():
         : 1919  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76901:  xor    %edx,%edx
    0.00 :   76903:  add    %eax,%r12d
    0.00 :   76906:  js     7750f <__vfprintf_internal+0x24df>
    0.00 :   7690c:  cmp    %eax,%r12d
    0.00 :   7690f:  jb     7750f <__vfprintf_internal+0x24df>
    0.00 :   76915:  test   %edx,%edx
    0.00 :   76917:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   7691d:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76922:  nopw   0x0(%rax,%rax,1)
         : 1929  __printf_fp_spec():
         : 1930  ./stdio-common/vfprintf-internal.c:354
    0.00 :   76928:  call   5d520 <__printf_fp>
    0.00 :   7692d:  jmp    768f9 <__vfprintf_internal+0x18c9>
    0.00 :   7692f:  nop
         : 1934  __vfprintf_internal():
         : 1935  ./stdio-common/vfprintf-internal.c:1516 (discriminator 168)
    0.00 :   76930:  mov    0x58(%rsp),%eax
    0.00 :   76934:  test   %eax,%eax
    0.00 :   76936:  je     76478 <__vfprintf_internal+0x1448>
         : 1939  ./stdio-common/vfprintf-internal.c:1516 (discriminator 177)
    0.00 :   7693c:  mov    0x28(%rbp),%rax
    0.00 :   76940:  cmp    0x30(%rbp),%rax
    0.00 :   76944:  jae    77463 <__vfprintf_internal+0x2433>
         : 1943  ./stdio-common/vfprintf-internal.c:1516 (discriminator 180)
    0.00 :   7694a:  lea    0x1(%rax),%rcx
    0.00 :   7694e:  mov    %rcx,0x28(%rbp)
    0.00 :   76952:  movb   $0x20,(%rax)
    0.00 :   76955:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7695a:  nopw   0x0(%rax,%rax,1)
         : 1949  ./stdio-common/vfprintf-internal.c:1516 (discriminator 189)
    0.00 :   76960:  mov    0x60(%rsp),%ecx
    0.00 :   76964:  mov    $0x10004,%eax
    0.00 :   76969:  bt     %rcx,%rax
    0.00 :   7696d:  jae    76489 <__vfprintf_internal+0x1459>
         : 1954  ./stdio-common/vfprintf-internal.c:1516 (discriminator 191)
    0.00 :   76973:  mov    0x28(%rbp),%rax
    0.00 :   76977:  cmp    0x30(%rbp),%rax
    0.00 :   7697b:  jae    774c8 <__vfprintf_internal+0x2498>
         : 1958  ./stdio-common/vfprintf-internal.c:1516 (discriminator 194)
    0.00 :   76981:  lea    0x1(%rax),%rcx
    0.00 :   76985:  mov    %rcx,0x28(%rbp)
    0.00 :   76989:  movb   $0x30,(%rax)
         : 1962  ./stdio-common/vfprintf-internal.c:1516 (discriminator 197)
    0.00 :   7698c:  cmp    $0x7fffffff,%r12d
    0.00 :   76993:  je     76728 <__vfprintf_internal+0x16f8>
         : 1965  ./stdio-common/vfprintf-internal.c:1516 (discriminator 199)
    0.00 :   76999:  mov    0x28(%rbp),%rax
    0.00 :   7699d:  cmp    0x30(%rbp),%rax
    0.00 :   769a1:  jae    77495 <__vfprintf_internal+0x2465>
         : 1969  ./stdio-common/vfprintf-internal.c:1516 (discriminator 201)
    0.00 :   769a7:  lea    0x1(%rax),%rcx
    0.00 :   769ab:  mov    %rcx,0x28(%rbp)
    0.00 :   769af:  mov    %r13b,(%rax)
         : 1973  ./stdio-common/vfprintf-internal.c:1516 (discriminator 204)
    0.00 :   769b2:  cmp    $0x7ffffffe,%r12d
    0.00 :   769b9:  je     76728 <__vfprintf_internal+0x16f8>
         : 1976  ./stdio-common/vfprintf-internal.c:1516 (discriminator 206)
    0.00 :   769bf:  subl   $0x2,0x10(%rsp)
    0.00 :   769c4:  add    $0x2,%r12d
    0.00 :   769c8:  jmp    76489 <__vfprintf_internal+0x1459>
    0.00 :   769cd:  nopl   (%rax)
         : 1981  IO_validate_vtable():
         : 1982  ./stdio-common/../libio/libioP.h:946
    0.00 :   769d0:  call   89ef0 <_IO_vtable_check>
    0.00 :   769d5:  jmp    7513d <__vfprintf_internal+0x10d>
    0.00 :   769da:  nopw   0x0(%rax,%rax,1)
         : 1986  __vfprintf_internal():
         : 1987  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   769e0:  mov    0x8(%rsi),%rcx
    0.00 :   769e4:  lea    0x8(%rcx),%rax
    0.00 :   769e8:  mov    %rax,0x8(%rsi)
    0.00 :   769ec:  jmp    7561b <__vfprintf_internal+0x5eb>
    0.00 :   769f1:  nopl   0x0(%rax)
    0.00 :   769f8:  xor    %r15d,%r15d
         : 1994  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   769fb:  lea    0x528(%rsp),%r9
    0.00 :   76a03:  jmp    76596 <__vfprintf_internal+0x1566>
    0.00 :   76a08:  nopl   0x0(%rax,%rax,1)
         : 1998  read_int():
         : 1999  ./stdio-common/printf-parse.h:78
    0.00 :   76a10:  movzbl 0x1(%rdi),%edi
    0.00 :   76a14:  lea    0x2(%rbx),%rcx
    0.00 :   76a18:  mov    %edi,%r13d
    0.00 :   76a1b:  sub    $0x30,%edi
    0.00 :   76a1e:  cmp    $0x9,%edi
    0.00 :   76a21:  ja     76a71 <__vfprintf_internal+0x1a41>
    0.00 :   76a23:  mov    %rbx,0x10(%rsp)
    0.00 :   76a28:  mov    %edx,0x88(%rsp)
    0.00 :   76a2f:  mov    %edi,%ebx
    0.00 :   76a31:  movzbl 0x1(%rcx),%edi
    0.00 :   76a35:  add    $0x1,%rcx
    0.00 :   76a39:  mov    %edi,%r13d
    0.00 :   76a3c:  sub    $0x30,%edi
         : 2013  ./stdio-common/printf-parse.h:81
    0.00 :   76a3f:  cmp    $0xccccccc,%esi
    0.00 :   76a45:  jg     770e0 <__vfprintf_internal+0x20b0>
         : 2016  ./stdio-common/printf-parse.h:87
    0.00 :   76a4b:  lea    (%rsi,%rsi,4),%edx
         : 2018  ./stdio-common/printf-parse.h:88
    0.00 :   76a4e:  mov    %r9d,%esi
         : 2020  ./stdio-common/printf-parse.h:87
    0.00 :   76a51:  add    %edx,%edx
         : 2022  ./stdio-common/printf-parse.h:88
    0.00 :   76a53:  sub    %ebx,%esi
    0.00 :   76a55:  cmp    %esi,%edx
    0.00 :   76a57:  jg     770e0 <__vfprintf_internal+0x20b0>
         : 2026  ./stdio-common/printf-parse.h:91
    0.00 :   76a5d:  lea    (%rdx,%rbx,1),%esi
         : 2028  ./stdio-common/printf-parse.h:78
    0.00 :   76a60:  cmp    $0x9,%edi
    0.00 :   76a63:  jbe    76a2f <__vfprintf_internal+0x19ff>
    0.00 :   76a65:  mov    0x10(%rsp),%rbx
    0.00 :   76a6a:  mov    0x88(%rsp),%edx
         : 2033  __vfprintf_internal():
         : 2034  ./stdio-common/vfprintf-internal.c:1388 (discriminator 1)
    0.00 :   76a71:  cmp    $0x24,%r13b
    0.00 :   76a75:  jne    76235 <__vfprintf_internal+0x1205>
    0.00 :   76a7b:  test   %esi,%esi
    0.00 :   76a7d:  je     76235 <__vfprintf_internal+0x1205>
    0.00 :   76a83:  nopl   0x0(%rax,%rax,1)
    0.00 :   76a88:  mov    0x78(%rsp),%eax
    0.00 :   76a8c:  jmp    752df <__vfprintf_internal+0x2af>
    0.00 :   76a91:  nopl   0x0(%rax)
         : 2043  ./stdio-common/vfprintf-internal.c:1368 (discriminator 4)
    0.00 :   76a98:  movl   $0x1,0x5c(%rsp)
         : 2045  ./stdio-common/vfprintf-internal.c:1369 (discriminator 4)
    0.00 :   76aa0:  mov    %rcx,%rbx
    0.00 :   76aa3:  jmp    *%rsi
    0.00 :   76aa5:  nopl   (%rax)
         : 2049  ./stdio-common/vfprintf-internal.c:1392 (discriminator 16)
    0.00 :   76aa8:  mov    0x20(%rsp),%rsi
    0.00 :   76aad:  mov    (%rsi),%eax
         : 2052  ./stdio-common/vfprintf-internal.c:1516 (discriminator 16)
    0.00 :   76aaf:  test   %r11d,%r11d
    0.00 :   76ab2:  je     76db7 <__vfprintf_internal+0x1d87>
         : 2055  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76ab8:  cmp    $0x2f,%eax
    0.00 :   76abb:  ja     77265 <__vfprintf_internal+0x2235>
    0.00 :   76ac1:  mov    %eax,%edx
    0.00 :   76ac3:  add    $0x8,%eax
    0.00 :   76ac6:  add    0x10(%rsi),%rdx
    0.00 :   76aca:  mov    %eax,(%rsi)
    0.00 :   76acc:  movsbq (%rdx),%r10
         : 2063  ./stdio-common/vfprintf-internal.c:1516 (discriminator 24)
    0.00 :   76ad0:  mov    %r10,%r11
    0.00 :   76ad3:  test   %r10,%r10
    0.00 :   76ad6:  js     76fc8 <__vfprintf_internal+0x1f98>
         : 2067  ./stdio-common/vfprintf-internal.c:1516 (discriminator 26)
    0.00 :   76adc:  movl   $0xa,0x60(%rsp)
    0.00 :   76ae4:  xor    %r10d,%r10d
    0.00 :   76ae7:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76aec:  nopl   0x0(%rax)
         : 2072  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76af0:  cmp    $0x2f,%eax
    0.00 :   76af3:  jbe    76ddc <__vfprintf_internal+0x1dac>
    0.00 :   76af9:  mov    0x8(%rdi),%rdx
    0.00 :   76afd:  lea    0x8(%rdx),%rax
    0.00 :   76b01:  mov    %rax,0x8(%rdi)
    0.00 :   76b05:  movl   $0x0,0x40(%rsp)
    0.00 :   76b0d:  movzwl (%rdx),%r11d
    0.00 :   76b11:  xor    %r10d,%r10d
    0.00 :   76b14:  movl   $0x0,0x58(%rsp)
    0.00 :   76b1c:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76b21:  nopl   0x0(%rax)
         : 2084  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b28:  movsbl %r13b,%esi
         : 2086  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   76b2c:  lea    0x15ab2d(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 2088  ./stdio-common/vfprintf-internal.c:1317 (discriminator 1)
    0.00 :   76b33:  movl   $0x1,0x58(%rsp)
         : 2090  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b3b:  sub    $0x20,%esi
    0.00 :   76b3e:  movslq %esi,%rsi
    0.00 :   76b41:  movzbl (%rax,%rsi,1),%esi
         : 2094  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   76b45:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76b49:  lea    -0x13e0(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76b50:  add    %rbx,%rsi
         : 2098  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b53:  mov    %rcx,%rbx
    0.00 :   76b56:  jmp    *%rsi
    0.00 :   76b58:  nopl   0x0(%rax,%rax,1)
         : 2102  ./stdio-common/vfprintf-internal.c:1486 (discriminator 4)
    0.00 :   76b60:  mov    %rdx,%rbx
         : 2104  ./stdio-common/vfprintf-internal.c:1485 (discriminator 4)
    0.00 :   76b63:  mov    $0x1,%r10d
         : 2106  ./stdio-common/vfprintf-internal.c:1484 (discriminator 4)
    0.00 :   76b69:  mov    $0x1,%edx
    0.00 :   76b6e:  jmp    *%rsi
         : 2109  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76b70:  mov    0x8(%rdi),%rdx
    0.00 :   76b74:  lea    0x8(%rdx),%rax
    0.00 :   76b78:  mov    %rax,0x8(%rdi)
    0.00 :   76b7c:  jmp    76069 <__vfprintf_internal+0x1039>
    0.00 :   76b81:  nopl   0x0(%rax)
         : 2115  ./stdio-common/vfprintf-internal.c:1344 (discriminator 4)
    0.00 :   76b88:  movl   $0x1,0x50(%rsp)
         : 2117  ./stdio-common/vfprintf-internal.c:1365 (discriminator 4)
    0.00 :   76b90:  mov    %rcx,%rbx
    0.00 :   76b93:  jmp    *%rsi
    0.00 :   76b95:  nopl   (%rax)
         : 2121  ./stdio-common/vfprintf-internal.c:1333 (discriminator 4)
    0.00 :   76b98:  movl   $0x1,0x4c(%rsp)
         : 2123  ./stdio-common/vfprintf-internal.c:1334 (discriminator 4)
    0.00 :   76ba0:  mov    %rcx,%rbx
    0.00 :   76ba3:  jmp    *%rsi
    0.00 :   76ba5:  nopl   (%rax)
         : 2127  ./stdio-common/vfprintf-internal.c:1479 (discriminator 4)
    0.00 :   76ba8:  mov    %rcx,%rbx
         : 2129  ./stdio-common/vfprintf-internal.c:1478 (discriminator 4)
    0.00 :   76bab:  mov    $0x1,%r10d
    0.00 :   76bb1:  jmp    *%rsi
    0.00 :   76bb3:  nopl   0x0(%rax,%rax,1)
         : 2133  ./stdio-common/vfprintf-internal.c:1322 (discriminator 4)
    0.00 :   76bb8:  movl   $0x1,0x40(%rsp)
         : 2135  ./stdio-common/vfprintf-internal.c:1323 (discriminator 4)
    0.00 :   76bc0:  mov    %rcx,%rbx
    0.00 :   76bc3:  jmp    *%rsi
    0.00 :   76bc5:  nopl   (%rax)
         : 2139  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76bc8:  mov    0x8(%rdi),%rdx
    0.00 :   76bcc:  lea    0x8(%rdx),%rax
    0.00 :   76bd0:  mov    %rax,0x8(%rdi)
    0.00 :   76bd4:  jmp    75e7f <__vfprintf_internal+0xe4f>
    0.00 :   76bd9:  nopl   0x0(%rax)
         : 2145  ./stdio-common/vfprintf-internal.c:1468 (discriminator 4)
    0.00 :   76be0:  mov    %rcx,%rbx
         : 2147  ./stdio-common/vfprintf-internal.c:1467 (discriminator 4)
    0.00 :   76be3:  mov    $0x1,%r15d
    0.00 :   76be9:  jmp    *%rsi
    0.00 :   76beb:  nopl   0x0(%rax,%rax,1)
         : 2151  ./stdio-common/vfprintf-internal.c:1516 (discriminator 244)
    0.00 :   76bf0:  mov    0x90(%rsp),%edi
    0.00 :   76bf7:  lea    0x140(%rsp),%rsi
    0.00 :   76bff:  mov    $0x3e8,%edx
    0.00 :   76c04:  call   a8620 <__strerror_r>
    0.00 :   76c09:  mov    %rax,%r15
    0.00 :   76c0c:  jmp    758a1 <__vfprintf_internal+0x871>
    0.00 :   76c11:  nopl   0x0(%rax)
         : 2159  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76c18:  mov    0x8(%rdi),%rdx
    0.00 :   76c1c:  lea    0x8(%rdx),%rax
    0.00 :   76c20:  mov    %rax,0x8(%rdi)
    0.00 :   76c24:  jmp    7572f <__vfprintf_internal+0x6ff>
    0.00 :   76c29:  nopl   0x0(%rax)
         : 2165  ./stdio-common/vfprintf-internal.c:1516 (discriminator 234)
    0.00 :   76c30:  test   %r11d,%r11d
    0.00 :   76c33:  jne    76d9e <__vfprintf_internal+0x1d6e>
         : 2168  ./stdio-common/vfprintf-internal.c:1516 (discriminator 237)
    0.00 :   76c39:  test   %r15d,%r15d
    0.00 :   76c3c:  jne    77276 <__vfprintf_internal+0x2246>
         : 2171  ./stdio-common/vfprintf-internal.c:1516 (discriminator 239)
    0.00 :   76c42:  mov    %r12d,(%rax)
    0.00 :   76c45:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76c4a:  nopw   0x0(%rax,%rax,1)
         : 2175  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76c50:  mov    0x8(%rsi),%rdx
    0.00 :   76c54:  lea    0x8(%rdx),%rax
    0.00 :   76c58:  mov    %rax,0x8(%rsi)
    0.00 :   76c5c:  jmp    75e41 <__vfprintf_internal+0xe11>
    0.00 :   76c61:  nopl   0x0(%rax)
         : 2181  ./stdio-common/vfprintf-internal.c:1376 (discriminator 4)
    0.00 :   76c68:  mov    0x70(%rsp),%rbx
    0.00 :   76c6d:  jmp    *%rsi
    0.00 :   76c6f:  nop
    0.00 :   76c70:  mov    %rsi,%rdi
         : 2186  ./stdio-common/vfprintf-internal.c:1392
    0.00 :   76c73:  mov    %ecx,%esi
    0.00 :   76c75:  add    $0x8,%ecx
    0.00 :   76c78:  mov    %ecx,(%rdi)
    0.00 :   76c7a:  add    0x10(%rdi),%rsi
    0.00 :   76c7e:  jmp    76254 <__vfprintf_internal+0x1224>
         : 2192  ./stdio-common/vfprintf-internal.c:1516 (discriminator 218)
    0.00 :   76c83:  mov    $0x5,%eax
    0.00 :   76c88:  lea    0x161c06(%rip),%r15        # 1d8895 <not_available+0x317>
    0.00 :   76c8f:  cmp    %eax,%r14d
    0.00 :   76c92:  cmovl  %eax,%r14d
         : 2197  ./stdio-common/vfprintf-internal.c:1517 (discriminator 218)
    0.00 :   76c96:  cmp    $0x53,%r13b
    0.00 :   76c9a:  jne    758cb <__vfprintf_internal+0x89b>
         : 2200  ./stdio-common/vfprintf-internal.c:1517 (discriminator 41)
    0.00 :   76ca0:  mov    0x28(%rsp),%r8d
    0.00 :   76ca5:  mov    0x10(%rsp),%ecx
    0.00 :   76ca9:  mov    %r12d,%r9d
    0.00 :   76cac:  mov    %r14d,%edx
    0.00 :   76caf:  mov    %r15,%rsi
    0.00 :   76cb2:  mov    %rbp,%rdi
    0.00 :   76cb5:  call   72680 <outstring_converted_wide_string>
    0.00 :   76cba:  mov    %eax,%r12d
    0.00 :   76cbd:  test   %eax,%eax
    0.00 :   76cbf:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76cc5:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76cca:  nopw   0x0(%rax,%rax,1)
         : 2213  ./stdio-common/vfprintf-internal.c:1418 (discriminator 1)
    0.00 :   76cd0:  movsbl %r13b,%esi
    0.00 :   76cd4:  lea    0x15a905(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76cdb:  sub    $0x20,%esi
    0.00 :   76cde:  movslq %esi,%rsi
    0.00 :   76ce1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76ce5:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76ce9:  lea    -0x1580(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76cf0:  add    %rbx,%rsi
    0.00 :   76cf3:  mov    %rcx,%rbx
    0.00 :   76cf6:  jmp    *%rsi
    0.00 :   76cf8:  nopl   0x0(%rax,%rax,1)
         : 2225  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   76d00:  mov    0x8(%rsi),%rdx
    0.00 :   76d04:  lea    0x8(%rdx),%rax
    0.00 :   76d08:  mov    %rax,0x8(%rsi)
    0.00 :   76d0c:  jmp    755cf <__vfprintf_internal+0x59f>
    0.00 :   76d11:  nopl   0x0(%rax)
         : 2231  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76d18:  mov    0x8(%rdi),%rdx
    0.00 :   76d1c:  lea    0x8(%rdx),%rax
    0.00 :   76d20:  mov    %rax,0x8(%rdi)
    0.00 :   76d24:  jmp    757df <__vfprintf_internal+0x7af>
         : 2236  ./stdio-common/vfprintf-internal.c:1517 (discriminator 43)
    0.00 :   76d29:  mov    %r15,%rdi
    0.00 :   76d2c:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76d31:  mov    %rax,%r14
    0.00 :   76d34:  jmp    758d9 <__vfprintf_internal+0x8a9>
         : 2241  pad_func():
         : 2242  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76d39:  movslq %r13d,%rdx
    0.00 :   76d3c:  mov    $0x20,%esi
    0.00 :   76d41:  mov    %rbp,%rdi
    0.00 :   76d44:  mov    %rdx,0x10(%rsp)
    0.00 :   76d49:  call   806a0 <_IO_padn>
         : 2248  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76d4e:  mov    0x10(%rsp),%rdx
    0.00 :   76d53:  cmp    %rax,%rdx
    0.00 :   76d56:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2252  done_add_func():
         : 2253  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76d5c:  add    %r13d,%r12d
    0.00 :   76d5f:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76d65:  cmp    %r13d,%r12d
    0.00 :   76d68:  jb     75860 <__vfprintf_internal+0x830>
         : 2258  __vfprintf_internal():
         : 2259  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76d6e:  test   %r12d,%r12d
    0.00 :   76d71:  jns    75655 <__vfprintf_internal+0x625>
    0.00 :   76d77:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76d7c:  nopl   0x0(%rax)
         : 2264  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   76d80:  mov    0x8(%rcx),%rax
    0.00 :   76d84:  mov    %rax,0x10(%rsp)
    0.00 :   76d89:  add    $0xf,%rax
    0.00 :   76d8d:  and    $0xfffffffffffffff0,%rax
    0.00 :   76d91:  lea    0x10(%rax),%rdx
    0.00 :   76d95:  mov    %rdx,0x8(%rcx)
    0.00 :   76d99:  jmp    754e7 <__vfprintf_internal+0x4b7>
         : 2272  ./stdio-common/vfprintf-internal.c:1516 (discriminator 236)
    0.00 :   76d9e:  mov    %r12b,(%rax)
    0.00 :   76da1:  jmp    75f80 <__vfprintf_internal+0xf50>
         : 2275  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76da6:  mov    0x8(%rdi),%rdx
    0.00 :   76daa:  lea    0x8(%rdx),%rax
    0.00 :   76dae:  mov    %rax,0x8(%rdi)
    0.00 :   76db2:  jmp    75f48 <__vfprintf_internal+0xf18>
         : 2280  ./stdio-common/vfprintf-internal.c:1516 (discriminator 19)
    0.00 :   76db7:  test   %r15d,%r15d
    0.00 :   76dba:  jne    7727f <__vfprintf_internal+0x224f>
         : 2283  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76dc0:  cmp    $0x2f,%eax
    0.00 :   76dc3:  ja     77401 <__vfprintf_internal+0x23d1>
    0.00 :   76dc9:  mov    %eax,%edx
    0.00 :   76dcb:  add    $0x8,%eax
    0.00 :   76dce:  add    0x10(%rsi),%rdx
    0.00 :   76dd2:  mov    %eax,(%rsi)
    0.00 :   76dd4:  movslq (%rdx),%r10
    0.00 :   76dd7:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   76ddc:  mov    %eax,%edx
    0.00 :   76dde:  add    $0x8,%eax
    0.00 :   76de1:  add    0x10(%rdi),%rdx
    0.00 :   76de5:  mov    %eax,(%rdi)
    0.00 :   76de7:  jmp    76b05 <__vfprintf_internal+0x1ad5>
    0.00 :   76dec:  mov    0x8(%rdi),%rdx
    0.00 :   76df0:  lea    0x8(%rdx),%rax
    0.00 :   76df4:  mov    %rax,0x8(%rdi)
    0.00 :   76df8:  jmp    76835 <__vfprintf_internal+0x1805>
         : 2301  pad_func():
         : 2302  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76dfd:  movslq %r13d,%rdx
    0.00 :   76e00:  mov    $0x20,%esi
    0.00 :   76e05:  mov    %rbp,%rdi
    0.00 :   76e08:  mov    %rdx,0x10(%rsp)
    0.00 :   76e0d:  call   806a0 <_IO_padn>
         : 2308  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76e12:  mov    0x10(%rsp),%rdx
    0.00 :   76e17:  cmp    %rax,%rdx
    0.00 :   76e1a:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2312  done_add_func():
         : 2313  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76e20:  add    %r13d,%r12d
    0.00 :   76e23:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76e29:  cmp    %r13d,%r12d
    0.00 :   76e2c:  jb     75860 <__vfprintf_internal+0x830>
         : 2318  __vfprintf_internal():
         : 2319  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76e32:  test   %r12d,%r12d
    0.00 :   76e35:  jns    758fa <__vfprintf_internal+0x8ca>
    0.00 :   76e3b:  jmp    7533d <__vfprintf_internal+0x30d>
         : 2323  read_int():
         : 2324  ./stdio-common/printf-parse.h:78
    0.00 :   76e40:  movzbl 0x1(%rcx),%edi
    0.00 :   76e44:  add    $0x2,%rbx
    0.00 :   76e48:  mov    %edi,%r13d
    0.00 :   76e4b:  sub    $0x30,%edi
    0.00 :   76e4e:  cmp    $0x9,%edi
    0.00 :   76e51:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e57:  movzbl 0x1(%rbx),%ecx
    0.00 :   76e5b:  add    $0x1,%rbx
    0.00 :   76e5f:  mov    %ecx,%r13d
    0.00 :   76e62:  sub    $0x30,%ecx
         : 2335  ./stdio-common/printf-parse.h:81
    0.00 :   76e65:  cmp    $0xccccccc,%r14d
    0.00 :   76e6c:  jg     76f80 <__vfprintf_internal+0x1f50>
         : 2338  ./stdio-common/printf-parse.h:87
    0.00 :   76e72:  lea    (%r14,%r14,4),%r14d
         : 2340  ./stdio-common/printf-parse.h:88
    0.00 :   76e76:  mov    %r9d,%esi
         : 2342  ./stdio-common/printf-parse.h:87
    0.00 :   76e79:  add    %r14d,%r14d
         : 2344  ./stdio-common/printf-parse.h:88
    0.00 :   76e7c:  sub    %edi,%esi
    0.00 :   76e7e:  cmp    %esi,%r14d
    0.00 :   76e81:  jg     76f80 <__vfprintf_internal+0x1f50>
         : 2348  ./stdio-common/printf-parse.h:91
    0.00 :   76e87:  add    %edi,%r14d
         : 2350  ./stdio-common/printf-parse.h:78
    0.00 :   76e8a:  cmp    $0x9,%ecx
    0.00 :   76e8d:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e93:  mov    %ecx,%edi
    0.00 :   76e95:  jmp    76e57 <__vfprintf_internal+0x1e27>
         : 2355  pad_func():
         : 2356  ./stdio-common/vfprintf-internal.c:192
    0.00 :   76e97:  test   %r13d,%r13d
    0.00 :   76e9a:  jle    757c4 <__vfprintf_internal+0x794>
         : 2359  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76ea0:  movslq %r13d,%r14
    0.00 :   76ea3:  mov    $0x20,%esi
    0.00 :   76ea8:  mov    %rbp,%rdi
    0.00 :   76eab:  mov    %r14,%rdx
    0.00 :   76eae:  call   806a0 <_IO_padn>
         : 2365  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76eb3:  cmp    %rax,%r14
    0.00 :   76eb6:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2368  done_add_func():
         : 2369  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76ebc:  add    %r13d,%r12d
    0.00 :   76ebf:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76ec5:  cmp    %r13d,%r12d
    0.00 :   76ec8:  jb     75860 <__vfprintf_internal+0x830>
         : 2374  __vfprintf_internal():
         : 2375  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76ece:  test   %r12d,%r12d
    0.00 :   76ed1:  jns    757c4 <__vfprintf_internal+0x794>
    0.00 :   76ed7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76edc:  nopl   0x0(%rax)
         : 2380  ./stdio-common/vfprintf-internal.c:1260 (discriminator 7)
    0.00 :   76ee0:  call   91230 <__lll_lock_wait_private>
    0.00 :   76ee5:  jmp    75567 <__vfprintf_internal+0x537>
         : 2383  ./stdio-common/vfprintf-internal.c:1516 (discriminator 225)
    0.00 :   76eea:  mov    0x8(%rsp),%r14
    0.00 :   76eef:  mov    %r10d,0x28(%rsp)
    0.00 :   76ef4:  mov    %r11d,0x10(%rsp)
    0.00 :   76ef9:  mov    %r14,%rdi
    0.00 :   76efc:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76f01:  mov    %r14,%rdi
    0.00 :   76f04:  lea    0x1(%rax),%rsi
    0.00 :   76f08:  call   135110 <__readonly_area>
    0.00 :   76f0d:  mov    0x10(%rsp),%r11d
    0.00 :   76f12:  mov    0x28(%rsp),%r10d
    0.00 :   76f17:  test   %eax,%eax
    0.00 :   76f19:  mov    %eax,0xa0(%rsp)
    0.00 :   76f20:  jns    75e26 <__vfprintf_internal+0xdf6>
         : 2397  ./stdio-common/vfprintf-internal.c:1516 (discriminator 228)
    0.00 :   76f26:  lea    0x1668eb(%rip),%rdi        # 1dd818 <__PRETTY_FUNCTION__.0+0x1d0>
    0.00 :   76f2d:  call   896d0 <__libc_fatal>
    0.00 :   76f32:  nopw   0x0(%rax,%rax,1)
    0.00 :   76f38:  mov    $0x6,%eax
         : 2402  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76f3d:  mov    $0x6,%r14d
    0.00 :   76f43:  lea    0x161951(%rip),%r15        # 1d889b <null>
    0.00 :   76f4a:  jmp    758d9 <__vfprintf_internal+0x8a9>
         : 2406  ./stdio-common/vfprintf-internal.c:1516 (discriminator 138)
    0.00 :   76f4f:  mov    $0x30,%esi
    0.00 :   76f54:  mov    %rbp,%rdi
    0.00 :   76f57:  mov    %r8d,0x28(%rsp)
    0.00 :   76f5c:  mov    %r9,0x10(%rsp)
    0.00 :   76f61:  call   8d800 <__overflow>
    0.00 :   76f66:  mov    0x10(%rsp),%r9
    0.00 :   76f6b:  mov    0x28(%rsp),%r8d
    0.00 :   76f70:  cmp    $0xffffffff,%eax
    0.00 :   76f73:  jne    75c37 <__vfprintf_internal+0xc07>
    0.00 :   76f79:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76f7e:  xchg   %ax,%ax
         : 2418  read_int():
         : 2419  ./stdio-common/printf-parse.h:78
    0.00 :   76f80:  cmp    $0x9,%ecx
    0.00 :   76f83:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f89:  movzbl 0x1(%rbx),%eax
    0.00 :   76f8d:  sub    $0x30,%eax
    0.00 :   76f90:  cmp    $0x9,%eax
    0.00 :   76f93:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f99:  movzbl 0x2(%rbx),%eax
    0.00 :   76f9d:  sub    $0x30,%eax
    0.00 :   76fa0:  cmp    $0x9,%eax
    0.00 :   76fa3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76fa9:  add    $0x3,%rbx
    0.00 :   76fad:  nopl   (%rax)
    0.00 :   76fb0:  movzbl (%rbx),%eax
    0.00 :   76fb3:  add    $0x1,%rbx
    0.00 :   76fb7:  sub    $0x30,%eax
    0.00 :   76fba:  cmp    $0x9,%eax
    0.00 :   76fbd:  jbe    76fb0 <__vfprintf_internal+0x1f80>
    0.00 :   76fbf:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76fc4:  nopl   0x0(%rax)
         : 2439  __vfprintf_internal():
         : 2440  ./stdio-common/vfprintf-internal.c:1516 (discriminator 25)
    0.00 :   76fc8:  movl   $0xa,0x60(%rsp)
    0.00 :   76fd0:  neg    %r11
    0.00 :   76fd3:  mov    $0x1,%r10d
    0.00 :   76fd9:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76fde:  xchg   %ax,%ax
         : 2446  outstring_func():
         : 2447  ./stdio-common/vfprintf-internal.c:239
    0.00 :   76fe0:  mov    0xd8(%rbp),%r13
         : 2449  IO_validate_vtable():
         : 2450  ./stdio-common/../libio/libioP.h:942
    0.00 :   76fe7:  lea    0x19ea12(%rip),%rdx        # 215a00 <_IO_helper_jumps>
    0.00 :   76fee:  mov    %r13,%rax
    0.00 :   76ff1:  sub    %rdx,%rax
         : 2454  ./stdio-common/../libio/libioP.h:943
    0.00 :   76ff4:  cmp    %rax,0x30(%rsp)
    0.00 :   76ff9:  jbe    77459 <__vfprintf_internal+0x2429>
         : 2457  outstring_func():
         : 2458  ./stdio-common/vfprintf-internal.c:239
    0.00 :   76fff:  mov    %r14,%rdx
    0.00 :   77002:  mov    %r15,%rsi
    0.00 :   77005:  mov    %rbp,%rdi
    0.00 :   77008:  call   *0x38(%r13)
    0.00 :   7700c:  cmp    %r14,%rax
    0.00 :   7700f:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2465  done_add_func():
         : 2466  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77015:  movslq %r12d,%rax
    0.00 :   77018:  xor    %edx,%edx
    0.00 :   7701a:  add    %r14,%rax
    0.00 :   7701d:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   7701f:  cmp    %r14,%rax
    0.00 :   77022:  jae    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77028:  mov    $0x1,%edx
    0.00 :   7702d:  jmp    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77032:  nopw   0x0(%rax,%rax,1)
         : 2476  __vfprintf_internal():
         : 2477  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77038:  mov    0x70(%rsp),%rdx
    0.00 :   7703d:  mov    $0x0,%eax
    0.00 :   77042:  sub    %r15,%rdx
    0.00 :   77045:  cmovs  %rax,%rdx
    0.00 :   77049:  mov    %edx,%r14d
    0.00 :   7704c:  jmp    7659d <__vfprintf_internal+0x156d>
    0.00 :   77051:  nopl   0x0(%rax)
         : 2485  ./stdio-common/vfprintf-internal.c:1516 (discriminator 113)
    0.00 :   77058:  mov    0x58(%rsp),%ecx
    0.00 :   7705c:  test   %ecx,%ecx
    0.00 :   7705e:  je     75c02 <__vfprintf_internal+0xbd2>
         : 2489  ./stdio-common/vfprintf-internal.c:1516 (discriminator 122)
    0.00 :   77064:  mov    0x28(%rbp),%rax
    0.00 :   77068:  cmp    0x30(%rbp),%rax
    0.00 :   7706c:  jae    7747c <__vfprintf_internal+0x244c>
         : 2493  ./stdio-common/vfprintf-internal.c:1516 (discriminator 125)
    0.00 :   77072:  lea    0x1(%rax),%rdx
    0.00 :   77076:  mov    %rdx,0x28(%rbp)
    0.00 :   7707a:  movb   $0x20,(%rax)
    0.00 :   7707d:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77082:  nopw   0x0(%rax,%rax,1)
         : 2499  ./stdio-common/vfprintf-internal.c:1427
    0.00 :   77088:  movzbl 0x2(%rbx),%ecx
         : 2501  ./stdio-common/vfprintf-internal.c:1426
    0.00 :   7708c:  lea    0x2(%rbx),%rsi
    0.00 :   77090:  mov    %rsi,0x70(%rsp)
         : 2504  ./stdio-common/vfprintf-internal.c:1427
    0.00 :   77095:  sub    $0x30,%ecx
    0.00 :   77098:  cmp    $0x9,%ecx
    0.00 :   7709b:  jbe    772b0 <__vfprintf_internal+0x2280>
         : 2508  ./stdio-common/vfprintf-internal.c:1442
    0.00 :   770a1:  mov    0x20(%rsp),%rbx
    0.00 :   770a6:  mov    (%rbx),%ecx
    0.00 :   770a8:  cmp    $0x2f,%ecx
    0.00 :   770ab:  jbe    771ee <__vfprintf_internal+0x21be>
    0.00 :   770b1:  mov    0x8(%rbx),%rsi
    0.00 :   770b5:  lea    0x8(%rsi),%rcx
    0.00 :   770b9:  mov    %rcx,0x8(%rbx)
         : 2516  ./stdio-common/vfprintf-internal.c:1445
    0.00 :   770bd:  mov    (%rsi),%ecx
    0.00 :   770bf:  mov    $0xffffffff,%esi
         : 2519  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   770c4:  mov    0x70(%rsp),%rbx
    0.00 :   770c9:  test   %ecx,%ecx
    0.00 :   770cb:  movzbl (%rbx),%r13d
    0.00 :   770cf:  cmovns %ecx,%esi
    0.00 :   770d2:  mov    %esi,%r14d
    0.00 :   770d5:  jmp    75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   770da:  nopw   0x0(%rax,%rax,1)
         : 2527  read_int():
         : 2528  ./stdio-common/printf-parse.h:78
    0.00 :   770e0:  cmp    $0x9,%edi
    0.00 :   770e3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770e9:  movzbl 0x1(%rcx),%eax
    0.00 :   770ed:  sub    $0x30,%eax
    0.00 :   770f0:  cmp    $0x9,%eax
    0.00 :   770f3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770f9:  movzbl 0x2(%rcx),%eax
    0.00 :   770fd:  sub    $0x30,%eax
    0.00 :   77100:  cmp    $0x9,%eax
    0.00 :   77103:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77109:  add    $0x3,%rcx
    0.00 :   7710d:  nopl   (%rax)
    0.00 :   77110:  movzbl (%rcx),%eax
    0.00 :   77113:  add    $0x1,%rcx
    0.00 :   77117:  sub    $0x30,%eax
    0.00 :   7711a:  cmp    $0x9,%eax
    0.00 :   7711d:  jbe    77110 <__vfprintf_internal+0x20e0>
    0.00 :   7711f:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   77124:  nopl   0x0(%rax)
         : 2548  __vfprintf_internal():
         : 2549  ./stdio-common/vfprintf-internal.c:1214
    0.00 :   77128:  movl   $0x0,0xa0(%rsp)
         : 2551  ./stdio-common/vfprintf-internal.c:1240
    0.00 :   77133:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 2553  ./stdio-common/vfprintf-internal.c:1182
    0.00 :   7713f:  movq   $0x0,0x98(%rsp)
    0.00 :   7714b:  jmp    752df <__vfprintf_internal+0x2af>
         : 2556  ./stdio-common/vfprintf-internal.c:1516 (discriminator 247)
    0.00 :   77150:  movslq 0x90(%rsp),%r11
    0.00 :   77158:  movl   $0xa,0x60(%rsp)
    0.00 :   77160:  xor    %r10d,%r10d
    0.00 :   77163:  test   %r11d,%r11d
    0.00 :   77166:  jns    75a66 <__vfprintf_internal+0xa36>
         : 2562  ./stdio-common/vfprintf-internal.c:1516 (discriminator 249)
    0.00 :   7716c:  neg    %r11
    0.00 :   7716f:  mov    $0x1,%r10d
    0.00 :   77175:  jmp    75a66 <__vfprintf_internal+0xa36>
         : 2566  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   7717a:  mov    0x60(%rsp),%rcx
    0.00 :   7717f:  mov    0x8(%rcx),%rcx
         : 2569  ./stdio-common/vfprintf-internal.c:1355
    0.00 :   77183:  mov    0x50(%rcx),%rdi
         : 2571  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   77187:  mov    0x48(%rcx),%rsi
         : 2573  ./stdio-common/vfprintf-internal.c:1356
    0.00 :   7718b:  movzbl (%rdi),%ecx
         : 2575  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   7718e:  mov    %rsi,0x98(%rsp)
         : 2577  ./stdio-common/vfprintf-internal.c:1356
    0.00 :   77196:  test   %cl,%cl
    0.00 :   77198:  je     77240 <__vfprintf_internal+0x2210>
    0.00 :   7719e:  cmp    $0x7f,%cl
    0.00 :   771a1:  je     77240 <__vfprintf_internal+0x2210>
         : 2582  ./stdio-common/vfprintf-internal.c:1363
    0.00 :   771a7:  xor    %ecx,%ecx
    0.00 :   771a9:  cmpb   $0x0,(%rsi)
    0.00 :   771ac:  cmovne %rdi,%rcx
    0.00 :   771b0:  mov    %rcx,0x80(%rsp)
    0.00 :   771b8:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   771bd:  mov    %r9,0x10(%rsp)
         : 2589  IO_validate_vtable():
         : 2590  ./stdio-common/../libio/libioP.h:946
    0.00 :   771c2:  call   89ef0 <_IO_vtable_check>
    0.00 :   771c7:  mov    0x10(%rsp),%r9
    0.00 :   771cc:  jmp    7650a <__vfprintf_internal+0x14da>
    0.00 :   771d1:  mov    %r9,0x10(%rsp)
    0.00 :   771d6:  call   89ef0 <_IO_vtable_check>
    0.00 :   771db:  mov    0x10(%rsp),%r9
    0.00 :   771e0:  jmp    75c9c <__vfprintf_internal+0xc6c>
         : 2598  __vfprintf_internal():
         : 2599  ./stdio-common/vfprintf-internal.c:1533
    0.00 :   771e5:  xor    %edx,%edx
    0.00 :   771e7:  xor    %ecx,%ecx
    0.00 :   771e9:  jmp    7541b <__vfprintf_internal+0x3eb>
         : 2603  ./stdio-common/vfprintf-internal.c:1442
    0.00 :   771ee:  mov    %ecx,%esi
    0.00 :   771f0:  add    $0x8,%ecx
    0.00 :   771f3:  add    0x10(%rbx),%rsi
    0.00 :   771f7:  mov    %ecx,(%rbx)
    0.00 :   771f9:  jmp    770bd <__vfprintf_internal+0x208d>
    0.00 :   771fe:  mov    %r8d,0x38(%rsp)
         : 2610  ./stdio-common/vfprintf-internal.c:1516 (discriminator 104)
    0.00 :   77203:  mov    $0x2d,%esi
    0.00 :   77208:  mov    %r9,0x28(%rsp)
    0.00 :   7720d:  mov    %r11,0x10(%rsp)
         : 2614  ./stdio-common/vfprintf-internal.c:1516 (discriminator 124)
    0.00 :   77212:  mov    %rbp,%rdi
    0.00 :   77215:  call   8d800 <__overflow>
    0.00 :   7721a:  mov    0x10(%rsp),%r11
    0.00 :   7721f:  mov    0x28(%rsp),%r9
    0.00 :   77224:  cmp    $0xffffffff,%eax
    0.00 :   77227:  mov    0x38(%rsp),%r8d
    0.00 :   7722c:  jne    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77232:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   77237:  nopw   0x0(%rax,%rax,1)
         : 2624  ./stdio-common/vfprintf-internal.c:1363
    0.00 :   77240:  movq   $0x0,0x80(%rsp)
    0.00 :   7724c:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   77251:  mov    %rax,0x10(%rsp)
         : 2628  IO_validate_vtable():
         : 2629  ./stdio-common/../libio/libioP.h:946
    0.00 :   77256:  call   89ef0 <_IO_vtable_check>
    0.00 :   7725b:  mov    0x10(%rsp),%rax
    0.00 :   77260:  jmp    75674 <__vfprintf_internal+0x644>
         : 2633  __vfprintf_internal():
         : 2634  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77265:  mov    0x8(%rsi),%rdx
    0.00 :   77269:  lea    0x8(%rdx),%rax
    0.00 :   7726d:  mov    %rax,0x8(%rsi)
    0.00 :   77271:  jmp    76acc <__vfprintf_internal+0x1a9c>
         : 2639  ./stdio-common/vfprintf-internal.c:1516 (discriminator 240)
    0.00 :   77276:  mov    %r12w,(%rax)
    0.00 :   7727a:  jmp    75f80 <__vfprintf_internal+0xf50>
         : 2642  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   7727f:  cmp    $0x2f,%eax
    0.00 :   77282:  ja     773f0 <__vfprintf_internal+0x23c0>
    0.00 :   77288:  mov    %eax,%edx
    0.00 :   7728a:  add    $0x8,%eax
    0.00 :   7728d:  add    0x10(%rsi),%rdx
    0.00 :   77291:  mov    %eax,(%rsi)
    0.00 :   77293:  movswq (%rdx),%r10
    0.00 :   77297:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   7729c:  mov    %rax,0x10(%rsp)
         : 2652  IO_validate_vtable():
         : 2653  ./stdio-common/../libio/libioP.h:946
    0.00 :   772a1:  call   89ef0 <_IO_vtable_check>
    0.00 :   772a6:  mov    0x10(%rsp),%rax
    0.00 :   772ab:  jmp    75919 <__vfprintf_internal+0x8e9>
         : 2657  read_int():
         : 2658  ./stdio-common/printf-parse.h:78
    0.00 :   772b0:  movzbl 0x1(%rsi),%esi
    0.00 :   772b4:  add    $0x3,%rbx
    0.00 :   772b8:  lea    -0x30(%rsi),%r13d
    0.00 :   772bc:  mov    %esi,%edi
    0.00 :   772be:  cmp    $0x9,%r13d
    0.00 :   772c2:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772c8:  movzbl 0x1(%rbx),%esi
    0.00 :   772cc:  add    $0x1,%rbx
    0.00 :   772d0:  mov    %esi,%edi
    0.00 :   772d2:  sub    $0x30,%esi
         : 2669  ./stdio-common/printf-parse.h:81
    0.00 :   772d5:  cmp    $0xccccccc,%ecx
    0.00 :   772db:  jg     77300 <__vfprintf_internal+0x22d0>
         : 2672  ./stdio-common/printf-parse.h:87
    0.00 :   772dd:  lea    (%rcx,%rcx,4),%ecx
         : 2674  ./stdio-common/printf-parse.h:88
    0.00 :   772e0:  mov    %r9d,%r14d
         : 2676  ./stdio-common/printf-parse.h:87
    0.00 :   772e3:  add    %ecx,%ecx
         : 2678  ./stdio-common/printf-parse.h:88
    0.00 :   772e5:  sub    %r13d,%r14d
    0.00 :   772e8:  cmp    %r14d,%ecx
    0.00 :   772eb:  jg     77300 <__vfprintf_internal+0x22d0>
         : 2682  ./stdio-common/printf-parse.h:91
    0.00 :   772ed:  add    %r13d,%ecx
         : 2684  ./stdio-common/printf-parse.h:78
    0.00 :   772f0:  cmp    $0x9,%esi
    0.00 :   772f3:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772f5:  mov    %esi,%r13d
    0.00 :   772f8:  jmp    772c8 <__vfprintf_internal+0x2298>
    0.00 :   772fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   77300:  cmp    $0x9,%esi
    0.00 :   77303:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77309:  movzbl 0x1(%rbx),%eax
    0.00 :   7730d:  sub    $0x30,%eax
    0.00 :   77310:  cmp    $0x9,%eax
    0.00 :   77313:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77319:  movzbl 0x2(%rbx),%eax
    0.00 :   7731d:  sub    $0x30,%eax
    0.00 :   77320:  cmp    $0x9,%eax
    0.00 :   77323:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77329:  add    $0x3,%rbx
    0.00 :   7732d:  nopl   (%rax)
    0.00 :   77330:  movzbl (%rbx),%eax
    0.00 :   77333:  add    $0x1,%rbx
    0.00 :   77337:  sub    $0x30,%eax
    0.00 :   7733a:  cmp    $0x9,%eax
    0.00 :   7733d:  jbe    77330 <__vfprintf_internal+0x2300>
    0.00 :   7733f:  jmp    75860 <__vfprintf_internal+0x830>
         : 2708  __vfprintf_internal():
         : 2709  ./stdio-common/vfprintf-internal.c:1438 (discriminator 1)
    0.00 :   77344:  test   %ecx,%ecx
    0.00 :   77346:  je     770a1 <__vfprintf_internal+0x2071>
    0.00 :   7734c:  cmp    $0x24,%dil
    0.00 :   77350:  jne    770a1 <__vfprintf_internal+0x2071>
    0.00 :   77356:  jmp    76a88 <__vfprintf_internal+0x1a58>
    0.00 :   7735b:  nopl   0x0(%rax,%rax,1)
         : 2716  ./stdio-common/vfprintf-internal.c:1516 (discriminator 1)
    0.00 :   77360:  mov    $0x25,%esi
    0.00 :   77365:  mov    %rbp,%rdi
    0.00 :   77368:  call   8d800 <__overflow>
    0.00 :   7736d:  cmp    $0xffffffff,%eax
    0.00 :   77370:  jne    75f6d <__vfprintf_internal+0xf3d>
    0.00 :   77376:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7737b:  nopl   0x0(%rax,%rax,1)
         : 2724  ./stdio-common/vfprintf-internal.c:1222 (discriminator 1)
    0.00 :   77380:  mov    0x1a1a89(%rip),%rax        # 218e10 <_DYNAMIC+0x250>
    0.00 :   77387:  or     $0x20,%ebx
    0.00 :   7738a:  mov    $0xffffffff,%r12d
    0.00 :   77390:  mov    %ebx,0x0(%rbp)
    0.00 :   77393:  movl   $0x9,%fs:(%rax)
    0.00 :   7739a:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7739f:  mov    %r8d,0x38(%rsp)
         : 2732  ./stdio-common/vfprintf-internal.c:1516 (discriminator 114)
    0.00 :   773a4:  mov    $0x2b,%esi
    0.00 :   773a9:  mov    %r9,0x28(%rsp)
    0.00 :   773ae:  mov    %r11,0x10(%rsp)
    0.00 :   773b3:  jmp    77212 <__vfprintf_internal+0x21e2>
    0.00 :   773b8:  mov    %r9,0x40(%rsp)
         : 2738  ./stdio-common/vfprintf-internal.c:1516 (discriminator 169)
    0.00 :   773bd:  mov    $0x2b,%esi
    0.00 :   773c2:  mov    %rdx,0x38(%rsp)
    0.00 :   773c7:  mov    %r11,0x28(%rsp)
    0.00 :   773cc:  jmp    76704 <__vfprintf_internal+0x16d4>
         : 2743  ./stdio-common/vfprintf-internal.c:1517 (discriminator 8)
    0.00 :   773d1:  movzbl %dl,%esi
    0.00 :   773d4:  mov    %rbp,%rdi
    0.00 :   773d7:  call   8d800 <__overflow>
    0.00 :   773dc:  cmp    $0xffffffff,%eax
    0.00 :   773df:  jne    757f9 <__vfprintf_internal+0x7c9>
    0.00 :   773e5:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   773ea:  nopw   0x0(%rax,%rax,1)
         : 2751  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   773f0:  mov    0x8(%rsi),%rdx
    0.00 :   773f4:  lea    0x8(%rdx),%rax
    0.00 :   773f8:  mov    %rax,0x8(%rsi)
    0.00 :   773fc:  jmp    77293 <__vfprintf_internal+0x2263>
    0.00 :   77401:  mov    0x8(%rsi),%rdx
    0.00 :   77405:  lea    0x8(%rdx),%rax
    0.00 :   77409:  mov    %rax,0x8(%rsi)
    0.00 :   7740d:  jmp    76dd4 <__vfprintf_internal+0x1da4>
         : 2760  ./stdio-common/vfprintf-internal.c:1516 (discriminator 145)
    0.00 :   77412:  movzbl %r13b,%esi
    0.00 :   77416:  mov    %rbp,%rdi
    0.00 :   77419:  mov    %r8d,0x28(%rsp)
    0.00 :   7741e:  mov    %r9,0x10(%rsp)
    0.00 :   77423:  call   8d800 <__overflow>
    0.00 :   77428:  mov    0x10(%rsp),%r9
    0.00 :   7742d:  mov    0x28(%rsp),%r8d
    0.00 :   77432:  cmp    $0xffffffff,%eax
    0.00 :   77435:  jne    75c5d <__vfprintf_internal+0xc2d>
    0.00 :   7743b:  jmp    76728 <__vfprintf_internal+0x16f8>
         : 2771  ./stdio-common/vfprintf-internal.c:1222 (discriminator 3)
    0.00 :   77440:  mov    0x1a19c9(%rip),%rax        # 218e10 <_DYNAMIC+0x250>
    0.00 :   77447:  mov    $0xffffffff,%r12d
    0.00 :   7744d:  movl   $0x16,%fs:(%rax)
    0.00 :   77454:  jmp    75354 <__vfprintf_internal+0x324>
         : 2776  IO_validate_vtable():
         : 2777  ./stdio-common/../libio/libioP.h:946
    0.00 :   77459:  call   89ef0 <_IO_vtable_check>
    0.00 :   7745e:  jmp    76fff <__vfprintf_internal+0x1fcf>
    0.00 :   77463:  mov    %r9,0x40(%rsp)
         : 2781  __vfprintf_internal():
         : 2782  ./stdio-common/vfprintf-internal.c:1516 (discriminator 179)
    0.00 :   77468:  mov    $0x20,%esi
    0.00 :   7746d:  mov    %rdx,0x38(%rsp)
    0.00 :   77472:  mov    %r11,0x28(%rsp)
    0.00 :   77477:  jmp    76704 <__vfprintf_internal+0x16d4>
    0.00 :   7747c:  mov    %r8d,0x38(%rsp)
         : 2788  ./stdio-common/vfprintf-internal.c:1516 (discriminator 124)
    0.00 :   77481:  mov    $0x20,%esi
    0.00 :   77486:  mov    %r9,0x28(%rsp)
    0.00 :   7748b:  mov    %r11,0x10(%rsp)
    0.00 :   77490:  jmp    77212 <__vfprintf_internal+0x21e2>
         : 2793  ./stdio-common/vfprintf-internal.c:1516 (discriminator 200)
    0.00 :   77495:  movzbl %r13b,%esi
    0.00 :   77499:  mov    %rbp,%rdi
    0.00 :   7749c:  mov    %r9,0x38(%rsp)
    0.00 :   774a1:  mov    %rdx,0x28(%rsp)
    0.00 :   774a6:  call   8d800 <__overflow>
    0.00 :   774ab:  mov    0x28(%rsp),%rdx
    0.00 :   774b0:  mov    0x38(%rsp),%r9
    0.00 :   774b5:  cmp    $0xffffffff,%eax
    0.00 :   774b8:  jne    769b2 <__vfprintf_internal+0x1982>
    0.00 :   774be:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774c3:  nopl   0x0(%rax,%rax,1)
         : 2805  ./stdio-common/vfprintf-internal.c:1516 (discriminator 193)
    0.00 :   774c8:  mov    $0x30,%esi
    0.00 :   774cd:  mov    %rbp,%rdi
    0.00 :   774d0:  mov    %r9,0x38(%rsp)
    0.00 :   774d5:  mov    %rdx,0x28(%rsp)
    0.00 :   774da:  call   8d800 <__overflow>
    0.00 :   774df:  mov    0x28(%rsp),%rdx
    0.00 :   774e4:  mov    0x38(%rsp),%r9
    0.00 :   774e9:  cmp    $0xffffffff,%eax
    0.00 :   774ec:  jne    7698c <__vfprintf_internal+0x195c>
    0.00 :   774f2:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774f7:  nopw   0x0(%rax,%rax,1)
         : 2817  done_add_func():
         : 2818  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77500:  mov    $0x1,%edx
    0.00 :   77505:  jmp    75fea <__vfprintf_internal+0xfba>
         : 2821  __vfprintf_internal():
         : 2822  ./stdio-common/vfprintf-internal.c:1612
    0.00 :   7750a:  call   136740 <__stack_chk_fail>
         : 2824  done_add_func():
         : 2825  ./stdio-common/vfprintf-internal.c:127
    0.00 :   7750f:  mov    $0x1,%edx
    0.00 :   77514:  jmp    76915 <__vfprintf_internal+0x18e5>
    0.00 :   77519:  mov    $0x1,%edx
    0.00 :   7751e:  jmp    76537 <__vfprintf_internal+0x1507>
    0.00 :   77523:  mov    $0x1,%eax
    0.00 :   77528:  jmp    766d3 <__vfprintf_internal+0x16a3>
    0.00 :   7752d:  mov    $0x1,%eax
    0.00 :   77532:  jmp    767b6 <__vfprintf_internal+0x1786>
    0.00 :   77537:  mov    $0x1,%edx
    0.00 :   7753c:  jmp    75945 <__vfprintf_internal+0x915>
         : 2836  __vfprintf_internal():
         : 2837  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77541:  xor    %r8d,%r8d
    0.00 :   77544:  jmp    75c02 <__vfprintf_internal+0xbd2>
         : 2840  read_int():
         : 2841  ./stdio-common/printf-parse.h:78
    0.00 :   77549:  mov    %esi,0x10(%rsp)
    0.00 :   7754d:  movzbl 0x70(%rsp),%r13d
    0.00 :   77553:  cmp    $0x9,%edi
    0.00 :   77556:  jbe    7640d <__vfprintf_internal+0x13dd>
    0.00 :   7755c:  jmp    7642d <__vfprintf_internal+0x13fd>
         : 2847  pad_func():
         : 2848  ./stdio-common/vfprintf-internal.c:192
    0.00 :   77561:  test   %r8d,%r8d
    0.00 :   77564:  jg     76674 <__vfprintf_internal+0x1644>
         : 2851  __vfprintf_internal():
         : 2852  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   7756a:  xor    %r8d,%r8d
    0.00 :   7756d:  jmp    75bcf <__vfprintf_internal+0xb9f>
         : 2855  done_add_func():
         : 2856  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77572:  mov    $0x1,%eax
    0.00 :   77577:  jmp    75851 <__vfprintf_internal+0x821>
    0.00 :   7757c:  mov    $0x1,%edx
    0.00 :   77581:  jmp    756a0 <__vfprintf_internal+0x670>
    0.00 :   77586:  mov    $0x1,%eax
    0.00 :   7758b:  jmp    764da <__vfprintf_internal+0x14aa>
         : 2863  __vfprintf_internal():
         : 2864  ./stdio-common/vfprintf-internal.c:1259
    0.00 :   77590:  movb   $0x1,0xa6(%rsp)
    0.00 :   77598:  jmp    75100 <__vfprintf_internal+0xd0>
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95601550 <load0>:
    0.00 :   ffffffff95601550:       push   %rsi
    0.00 :   ffffffff95601551:       mov    0x8(%rsp),%rsi
    0.00 :   ffffffff95601556:       mov    %rdi,0x8(%rsp)
    0.00 :   ffffffff9560155b:       push   %rdx
    0.00 :   ffffffff9560155c:       push   %rcx
    0.00 :   ffffffff9560155d:       push   %rax
    0.00 :   ffffffff9560155e:       push   %r8
    0.00 :   ffffffff95601560:       push   %r9
    0.00 :   ffffffff95601562:       push   %r10
    0.00 :   ffffffff95601564:       push   %r11
    0.00 :   ffffffff95601566:       push   %rbx
    0.00 :   ffffffff95601567:       push   %rbp
    0.00 :   ffffffff95601568:       push   %r12
    0.00 :   ffffffff9560156a:       push   %r13
    0.00 :   ffffffff9560156c:       push   %r14
    0.00 :   ffffffff9560156e:       push   %r15
    0.00 :   ffffffff95601570:       push   %rsi
    0.00 :   ffffffff95601571:       xor    %esi,%esi
    0.00 :   ffffffff95601573:       xor    %edx,%edx
    0.00 :   ffffffff95601575:       xor    %ecx,%ecx
    0.00 :   ffffffff95601577:       xor    %r8d,%r8d
    0.00 :   ffffffff9560157a:       xor    %r9d,%r9d
    0.00 :   ffffffff9560157d:       xor    %r10d,%r10d
    0.00 :   ffffffff95601580:       xor    %r11d,%r11d
    0.00 :   ffffffff95601583:       xor    %ebx,%ebx
    0.00 :   ffffffff95601585:       xor    %ebp,%ebp
    0.00 :   ffffffff95601587:       xor    %r12d,%r12d
    0.00 :   ffffffff9560158a:       xor    %r13d,%r13d
    0.00 :   ffffffff9560158d:       xor    %r14d,%r14d
    0.00 :   ffffffff95601590:       xor    %r15d,%r15d
    0.00 :   ffffffff95601593:       lea    0x9(%rsp),%rbp
    0.00 :   ffffffff95601598:       testb  $0x3,0x90(%rsp)
    0.00 :   ffffffff956015a0:       je     0xffffffff956015f2
    0.00 :   ffffffff956015a2:       swapgs
    0.00 :   ffffffff956015a5:       nopl   (%rax)
    0.00 :   ffffffff956015a8:       xchg   %ax,%ax
    0.00 :   ffffffff956015aa:       mov    %cr3,%rax
    0.00 :   ffffffff956015ad:       bts    $0x3f,%rax
    0.00 :   ffffffff956015b2:       and    $0xffffffffffffe7ff,%rax
    0.00 :   ffffffff956015b8:       mov    %rax,%cr3
    0.00 :   ffffffff956015bb:       xchg   %ax,%ax
    0.00 :   ffffffff956015bd:       mov    $0x48,%ecx
    0.00 :   ffffffff956015c2:       mov    %gs:0x1fb70,%rdx
    0.00 :   ffffffff956015cb:       mov    %edx,%eax
    0.00 :   ffffffff956015cd:       shr    $0x20,%rdx
  100.00 :   ffffffff956015d1:       wrmsr
    0.00 :   ffffffff956015d3:       nop
    0.00 :   ffffffff956015d4:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff956015dc:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff956015e4:       nopl   0x0(%rax)
    0.00 :   ffffffff956015e8:       lea    0x8(%rsp),%rdi
    0.00 :   ffffffff956015ed:       jmp    0xffffffff954927b0
    0.00 :   ffffffff956015f2:       lea    -0x3c2(%rip),%rcx        # 0xffffffff95601237
    0.00 :   ffffffff956015f9:       cmp    %rcx,0x88(%rsp)
    0.00 :   ffffffff95601601:       je     0xffffffff95601640
    0.00 :   ffffffff95601603:       mov    %ecx,%eax
    0.00 :   ffffffff95601605:       cmp    %rax,0x88(%rsp)
    0.00 :   ffffffff9560160d:       je     0xffffffff95601638
    0.00 :   ffffffff9560160f:       cmpq   $0xffffffff95601307,0x88(%rsp)
    0.00 :   ffffffff9560161b:       jne    0xffffffff95601620
    0.00 :   ffffffff9560161d:       swapgs
    0.00 :   ffffffff95601620:       lfence
    0.00 :   ffffffff95601623:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9560162b:       xchg   %ax,%ax
    0.00 :   ffffffff9560162d:       lea    0x8(%rsp),%rax
    0.00 :   ffffffff95601632:       nop
    0.00 :   ffffffff95601633:       ret
    0.00 :   ffffffff95601634:       int3
    0.00 :   ffffffff95601635:       int3
    0.00 :   ffffffff95601636:       int3
    0.00 :   ffffffff95601637:       int3
    0.00 :   ffffffff95601638:       mov    %rcx,0x88(%rsp)
    0.00 :   ffffffff95601640:       swapgs
    0.00 :   ffffffff95601643:       nopl   (%rax)
    0.00 :   ffffffff95601646:       xchg   %ax,%ax
    0.00 :   ffffffff95601648:       mov    %cr3,%rax
    0.00 :   ffffffff9560164b:       bts    $0x3f,%rax
    0.00 :   ffffffff95601650:       and    $0xffffffffffffe7ff,%rax
    0.00 :   ffffffff95601656:       mov    %rax,%cr3
    0.00 :   ffffffff95601659:       xchg   %ax,%ax
    0.00 :   ffffffff9560165b:       mov    $0x48,%ecx
    0.00 :   ffffffff95601660:       mov    %gs:0x1fb70,%rdx
    0.00 :   ffffffff95601669:       mov    %edx,%eax
    0.00 :   ffffffff9560166b:       shr    $0x20,%rdx
    0.00 :   ffffffff9560166f:       wrmsr
    0.00 :   ffffffff95601671:       nop
    0.00 :   ffffffff95601672:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9560167a:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff95601682:       nopl   0x0(%rax)
    0.00 :   ffffffff95601686:       lea    0x8(%rsp),%rdi
    0.00 :   ffffffff9560168b:       call   0xffffffff954927f0
    0.00 :   ffffffff95601690:       mov    %rax,%rdi
    0.00 :   ffffffff95601693:       jmp    0xffffffff954927b0
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95601237 <load0>:
  100.00 :   ffffffff95601237:       iretq
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9473fdd0 <load0>:
    0.00 :   ffffffff9473fdd0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9473fdd5:       push   %rbp
    0.00 :   ffffffff9473fdd6:       mov    %rsp,%rbp
    0.00 :   ffffffff9473fdd9:       push   %r14
    0.00 :   ffffffff9473fddb:       push   %r13
    0.00 :   ffffffff9473fddd:       mov    %rdi,%r13
    0.00 :   ffffffff9473fde0:       push   %r12
    0.00 :   ffffffff9473fde2:       push   %rbx
    0.00 :   ffffffff9473fde3:       mov    0x7c(%rdi),%eax
    0.00 :   ffffffff9473fde6:       test   %eax,%eax
    0.00 :   ffffffff9473fde8:       jne    0xffffffff9473fdf3
    0.00 :   ffffffff9473fdea:       test   %sil,%sil
    0.00 :   ffffffff9473fded:       je     0xffffffff9473ff62
    0.00 :   ffffffff9473fdf3:       mov    %r13,%rdi
    0.00 :   ffffffff9473fdf6:       lea    0x58(%r13),%r12
    0.00 :   ffffffff9473fdfa:       mov    $0x2d920,%r14
    0.00 :   ffffffff9473fe01:       call   0xffffffff954ac5a0
    0.00 :   ffffffff9473fe06:       mov    0x58(%r13),%rbx
    0.00 :   ffffffff9473fe0a:       cmp    %r12,%rbx
    0.00 :   ffffffff9473fe0d:       jne    0xffffffff9473fe2b
    0.00 :   ffffffff9473fe0f:       jmp    0xffffffff9473ff5a
    0.00 :   ffffffff9473fe14:       mov    %gs:0x6b8f1a31(%rip),%edx        # 0x3184c
    0.00 :   ffffffff9473fe1b:       cmp    %edx,%eax
    0.00 :   ffffffff9473fe1d:       je     0xffffffff9473fe3f
    0.00 :   ffffffff9473fe1f:       mov    (%rbx),%rbx
    0.00 :   ffffffff9473fe22:       cmp    %r12,%rbx
    0.00 :   ffffffff9473fe25:       je     0xffffffff9473ff5a
    0.00 :   ffffffff9473fe2b:       cmpl   $0x1,0xa8(%rbx)
    0.00 :   ffffffff9473fe32:       jne    0xffffffff9473fe1f
   50.47 :   ffffffff9473fe34:       mov    0x284(%rbx),%eax
    0.00 :   ffffffff9473fe3a:       cmp    $0xffffffff,%eax
    0.00 :   ffffffff9473fe3d:       jne    0xffffffff9473fe14
    0.00 :   ffffffff9473fe3f:       mov    0x4b8(%rbx),%rdx
    0.00 :   ffffffff9473fe46:       mov    %r14,%rax
    0.00 :   ffffffff9473fe49:       add    %gs:0x6b8d9b8f(%rip),%rax        # 0x199e0
    0.00 :   ffffffff9473fe51:       test   %rdx,%rdx
    0.00 :   ffffffff9473fe54:       je     0xffffffff9473fe91
    0.00 :   ffffffff9473fe56:       mov    0xf0(%rax),%rax
    0.00 :   ffffffff9473fe5d:       test   %rax,%rax
    0.00 :   ffffffff9473fe60:       je     0xffffffff9473fe1f
    0.00 :   ffffffff9473fe62:       mov    (%rdx),%rdx
    0.00 :   ffffffff9473fe65:       mov    (%rax),%rax
    0.00 :   ffffffff9473fe68:       mov    0x290(%rdx),%rsi
    0.00 :   ffffffff9473fe6f:       cmp    %rsi,0x290(%rax)
    0.00 :   ffffffff9473fe76:       jne    0xffffffff9473fe1f
    0.00 :   ffffffff9473fe78:       movslq 0xd0(%rdx),%rcx
    0.00 :   ffffffff9473fe7f:       cmp    %ecx,0xd0(%rax)
    0.00 :   ffffffff9473fe85:       jl     0xffffffff9473fe1f
    0.00 :   ffffffff9473fe87:       cmp    0x718(%rax,%rcx,8),%rdx
    0.00 :   ffffffff9473fe8f:       jne    0xffffffff9473fe1f
    0.00 :   ffffffff9473fe91:       mov    0x98(%rbx),%rdi
   49.53 :   ffffffff9473fe98:       mov    0x40(%rdi),%rax
    0.00 :   ffffffff9473fe9c:       add    %gs:0x6b8d9b3c(%rip),%rax        # 0x199e0
    0.00 :   ffffffff9473fea4:       mov    (%rax),%edx
    0.00 :   ffffffff9473fea6:       lea    0x1(%rdx),%ecx
    0.00 :   ffffffff9473fea9:       mov    %ecx,(%rax)
    0.00 :   ffffffff9473feab:       test   %edx,%edx
    0.00 :   ffffffff9473fead:       jne    0xffffffff9473feb8
    0.00 :   ffffffff9473feaf:       mov    0x68(%rdi),%rax
    0.00 :   ffffffff9473feb3:       call   *%rax
    0.00 :   ffffffff9473feb5:       nopl   (%rax)
    0.00 :   ffffffff9473feb8:       cmpq   $0xffffffffffffffff,0x208(%rbx)
    0.00 :   ffffffff9473fec0:       je     0xffffffff9473ff9d
    0.00 :   ffffffff9473fec6:       testb  $0x4,0x101(%rbx)
    0.00 :   ffffffff9473fecd:       je     0xffffffff9473ff29
    0.00 :   ffffffff9473fecf:       cmpq   $0x0,0xe8(%rbx)
    0.00 :   ffffffff9473fed7:       je     0xffffffff9473ff29
    0.00 :   ffffffff9473fed9:       mov    0x98(%rbx),%rax
    0.00 :   ffffffff9473fee0:       mov    $0x4,%esi
    0.00 :   ffffffff9473fee5:       mov    %rbx,%rdi
    0.00 :   ffffffff9473fee8:       mov    0xa0(%rax),%rax
    0.00 :   ffffffff9473feef:       call   *%rax
    0.00 :   ffffffff9473fef1:       nopl   (%rax)
    0.00 :   ffffffff9473fef4:       mov    0xb0(%rbx),%rax
    0.00 :   ffffffff9473fefb:       mov    %rax,%rdx
    0.00 :   ffffffff9473fefe:       sub    0x218(%rbx),%rdx
    0.00 :   ffffffff9473ff05:       mov    %rax,0x218(%rbx)
    0.00 :   ffffffff9473ff0c:       test   %rdx,%rdx
    0.00 :   ffffffff9473ff0f:       jg     0xffffffff9473ff79
    0.00 :   ffffffff9473ff11:       mov    0x98(%rbx),%rax
    0.00 :   ffffffff9473ff18:       xor    %esi,%esi
    0.00 :   ffffffff9473ff1a:       mov    0x98(%rax),%rax
    0.00 :   ffffffff9473ff21:       mov    %rbx,%rdi
    0.00 :   ffffffff9473ff24:       call   *%rax
    0.00 :   ffffffff9473ff26:       nopl   (%rax)
    0.00 :   ffffffff9473ff29:       mov    0x98(%rbx),%rdi
    0.00 :   ffffffff9473ff30:       mov    0x40(%rdi),%rax
    0.00 :   ffffffff9473ff34:       add    %gs:0x6b8d9aa4(%rip),%rax        # 0x199e0
    0.00 :   ffffffff9473ff3c:       subl   $0x1,(%rax)
    0.00 :   ffffffff9473ff3f:       jne    0xffffffff9473fe1f
    0.00 :   ffffffff9473ff45:       mov    0x60(%rdi),%rax
    0.00 :   ffffffff9473ff49:       call   *%rax
    0.00 :   ffffffff9473ff4b:       nopl   (%rax)
    0.00 :   ffffffff9473ff4e:       mov    (%rbx),%rbx
    0.00 :   ffffffff9473ff51:       cmp    %r12,%rbx
    0.00 :   ffffffff9473ff54:       jne    0xffffffff9473fe2b
    0.00 :   ffffffff9473ff5a:       mov    %r13,%rdi
    0.00 :   ffffffff9473ff5d:       call   0xffffffff954ac6e0
    0.00 :   ffffffff9473ff62:       pop    %rbx
    0.00 :   ffffffff9473ff63:       pop    %r12
    0.00 :   ffffffff9473ff65:       pop    %r13
    0.00 :   ffffffff9473ff67:       pop    %r14
    0.00 :   ffffffff9473ff69:       pop    %rbp
    0.00 :   ffffffff9473ff6a:       xor    %eax,%eax
    0.00 :   ffffffff9473ff6c:       xor    %edx,%edx
    0.00 :   ffffffff9473ff6e:       xor    %ecx,%ecx
    0.00 :   ffffffff9473ff70:       xor    %esi,%esi
    0.00 :   ffffffff9473ff72:       xor    %edi,%edi
    0.00 :   ffffffff9473ff74:       ret
    0.00 :   ffffffff9473ff75:       int3
    0.00 :   ffffffff9473ff76:       int3
    0.00 :   ffffffff9473ff77:       int3
    0.00 :   ffffffff9473ff78:       int3
    0.00 :   ffffffff9473ff79:       mov    $0x3d0900,%esi
    0.00 :   ffffffff9473ff7e:       xor    %ecx,%ecx
    0.00 :   ffffffff9473ff80:       mov    %rbx,%rdi
    0.00 :   ffffffff9473ff83:       call   0xffffffff94739380
    0.00 :   ffffffff9473ff88:       mov    0x98(%rbx),%rax
    0.00 :   ffffffff9473ff8f:       mov    $0x2,%esi
    0.00 :   ffffffff9473ff94:       mov    0x98(%rax),%rax
    0.00 :   ffffffff9473ff9b:       jmp    0xffffffff9473ff21
    0.00 :   ffffffff9473ff9d:       movq   $0x0,0x208(%rbx)
    0.00 :   ffffffff9473ffa8:       mov    %rbx,%rdi
    0.00 :   ffffffff9473ffab:       mov    $0x1,%esi
    0.00 :   ffffffff9473ffb0:       call   0xffffffff9473fc80
    0.00 :   ffffffff9473ffb5:       mov    0x98(%rbx),%rax
    0.00 :   ffffffff9473ffbc:       xor    %esi,%esi
    0.00 :   ffffffff9473ffbe:       mov    %rbx,%rdi
    0.00 :   ffffffff9473ffc1:       mov    0x98(%rax),%rax
    0.00 :   ffffffff9473ffc8:       call   *%rax
    0.00 :   ffffffff9473ffca:       nopl   (%rax)
    0.00 :   ffffffff9473ffcd:       jmp    0xffffffff9473fec6
 Percent |	Source code & Disassembly of kcore for cycles (2 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95496d20 <load0>:
    0.00 :   ffffffff95496d20:       push   %rbp
    0.00 :   ffffffff95496d21:       mov    %rsp,%rbp
    0.00 :   ffffffff95496d24:       call   0xffffffff945c55e0
    0.00 :   ffffffff95496d29:       xchg   %ax,%ax
  100.00 :   ffffffff95496d2b:       verw   0x3926a6(%rip)        # 0xffffffff958293d8
    0.00 :   ffffffff95496d32:       call   0xffffffff95493bd0
    0.00 :   ffffffff95496d37:       pop    %rbp
    0.00 :   ffffffff95496d38:       xor    %edi,%edi
    0.00 :   ffffffff95496d3a:       ret
    0.00 :   ffffffff95496d3b:       int3
    0.00 :   ffffffff95496d3c:       int3
    0.00 :   ffffffff95496d3d:       int3
    0.00 :   ffffffff95496d3e:       int3
 Percent |	Source code & Disassembly of kcore for cycles (4 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9445ba70 <load0>:
    0.00 :   ffffffff9445ba70:       push   %rbp
    0.00 :   ffffffff9445ba71:       mov    %rsp,%rbp
    0.00 :   ffffffff9445ba74:       push   %r13
    0.00 :   ffffffff9445ba76:       push   %r12
    0.00 :   ffffffff9445ba78:       push   %rbx
    0.82 :   ffffffff9445ba79:       and    $0xfffffffffffffff0,%rsp
    0.00 :   ffffffff9445ba7d:       sub    $0x30,%rsp
    0.00 :   ffffffff9445ba81:       mov    %gs:0x28,%rax
    0.00 :   ffffffff9445ba8a:       mov    %rax,0x28(%rsp)
    0.00 :   ffffffff9445ba8f:       xor    %eax,%eax
    0.00 :   ffffffff9445ba91:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9445ba96:       rdtsc
    0.00 :   ffffffff9445ba98:       shl    $0x20,%rdx
    0.00 :   ffffffff9445ba9c:       mov    %rdx,%rdi
    0.00 :   ffffffff9445ba9f:       or     %rax,%rdi
    0.00 :   ffffffff9445baa2:       incl   %gs:0x6bbd5d9f(%rip)        # 0x31848
   97.75 :   ffffffff9445baa9:       mov    %gs:0x6bbd5d70(%rip),%eax        # 0x31820
    0.00 :   ffffffff9445bab0:       mov    %eax,%ecx
    0.00 :   ffffffff9445bab2:       and    $0x1,%ecx
    0.00 :   ffffffff9445bab5:       mov    %rcx,%rsi
    0.00 :   ffffffff9445bab8:       shl    $0x4,%rsi
    0.00 :   ffffffff9445babc:       mov    %gs:0x31808(%rsi),%rbx
    0.00 :   ffffffff9445bac4:       mov    %rcx,%rsi
    0.00 :   ffffffff9445bac7:       shl    $0x4,%rsi
    0.00 :   ffffffff9445bacb:       mov    %gs:0x31800(%rsi),%r12d
    0.00 :   ffffffff9445bad3:       mov    %gs:0x31804(%rsi),%ecx
    0.00 :   ffffffff9445bada:       mov    %gs:0x6bbd5d3f(%rip),%esi        # 0x31820
    0.00 :   ffffffff9445bae1:       cmp    %esi,%eax
    0.00 :   ffffffff9445bae3:       jne    0xffffffff9445baa9
    0.00 :   ffffffff9445bae5:       mov    %r12d,%r12d
    0.00 :   ffffffff9445bae8:       mov    %rdi,%rax
    0.00 :   ffffffff9445baeb:       mul    %r12
    0.00 :   ffffffff9445baee:       mov    %rax,%r12
    0.00 :   ffffffff9445baf1:       mov    %rdx,%r13
    0.00 :   ffffffff9445baf4:       cmp    $0x7f,%ecx
    0.00 :   ffffffff9445baf7:       ja     0xffffffff9542ca3a
    0.00 :   ffffffff9445bafd:       shrd   %cl,%r13,%r12
    0.72 :   ffffffff9445bb01:       shr    %cl,%r13
    0.00 :   ffffffff9445bb04:       test   $0x40,%cl
    0.00 :   ffffffff9445bb07:       cmovne %r13,%r12
    0.00 :   ffffffff9445bb0b:       lea    (%rbx,%r12,1),%rax
    0.00 :   ffffffff9445bb0f:       decl   %gs:0x6bbd5d32(%rip)        # 0x31848
    0.00 :   ffffffff9445bb16:       je     0xffffffff9445bb59
    0.70 :   ffffffff9445bb18:       mov    0x28(%rsp),%rdx
    0.00 :   ffffffff9445bb1d:       sub    %gs:0x28,%rdx
    0.00 :   ffffffff9445bb26:       jne    0xffffffff9445bb60
    0.00 :   ffffffff9445bb28:       lea    -0x18(%rbp),%rsp
    0.00 :   ffffffff9445bb2c:       pop    %rbx
    0.00 :   ffffffff9445bb2d:       pop    %r12
    0.00 :   ffffffff9445bb2f:       pop    %r13
    0.00 :   ffffffff9445bb31:       pop    %rbp
    0.00 :   ffffffff9445bb32:       xor    %edx,%edx
    0.00 :   ffffffff9445bb34:       xor    %ecx,%ecx
    0.00 :   ffffffff9445bb36:       xor    %esi,%esi
    0.00 :   ffffffff9445bb38:       xor    %edi,%edi
    0.00 :   ffffffff9445bb3a:       ret
    0.00 :   ffffffff9445bb3b:       int3
    0.00 :   ffffffff9445bb3c:       int3
    0.00 :   ffffffff9445bb3d:       int3
    0.00 :   ffffffff9445bb3e:       int3
    0.00 :   ffffffff9445bb3f:       imul   $0x3d0900,0x21abe76(%rip),%rax        # 0xffffffff966079c0
    0.00 :   ffffffff9445bb4a:       movabs $0xffc2f745d964b800,%rdx
    0.00 :   ffffffff9445bb54:       add    %rdx,%rax
    0.00 :   ffffffff9445bb57:       jmp    0xffffffff9445bb18
    0.00 :   ffffffff9445bb59:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9445bb5e:       jmp    0xffffffff9445bb18
    0.00 :   ffffffff9445bb60:       call   0xffffffff95496a20
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff954927b0 <load0>:
    0.00 :   ffffffff954927b0:       mov    %rdi,%rsi
    0.00 :   ffffffff954927b3:       mov    %gs:0x6ab9f09d(%rip),%rax        # 0x31858
    0.00 :   ffffffff954927bb:       sub    $0xa8,%rax
    0.00 :   ffffffff954927c1:       cmp    %rdi,%rax
    0.00 :   ffffffff954927c4:       je     0xffffffff954927d1
    0.00 :   ffffffff954927c6:       mov    $0x15,%ecx
    0.00 :   ffffffff954927cb:       mov    %rax,%rdi
  100.00 :   ffffffff954927ce:       rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :   ffffffff954927d1:       xor    %ecx,%ecx
    0.00 :   ffffffff954927d3:       xor    %esi,%esi
    0.00 :   ffffffff954927d5:       xor    %edi,%edi
    0.00 :   ffffffff954927d7:       ret
    0.00 :   ffffffff954927d8:       int3
    0.00 :   ffffffff954927d9:       int3
    0.00 :   ffffffff954927da:       int3
    0.00 :   ffffffff954927db:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945d9de0 <load0>:
    0.00 :   ffffffff945d9de0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945d9de5:       push   %rbp
    0.00 :   ffffffff945d9de6:       lea    0x8(%rsi),%rax
    0.00 :   ffffffff945d9dea:       mov    %rsp,%rbp
  100.00 :   ffffffff945d9ded:       addl   $0x1,(%rsi)
    0.00 :   ffffffff945d9df0:       mov    (%rdi),%rdx
    0.00 :   ffffffff945d9df3:       mov    %rdx,0x8(%rsi)
    0.00 :   ffffffff945d9df7:       mov    0x8(%rdi),%rdx
    0.00 :   ffffffff945d9dfb:       mov    %rdx,0x8(%rax)
    0.00 :   ffffffff945d9dff:       mov    0x10(%rdi),%rdx
    0.00 :   ffffffff945d9e03:       mov    %rdx,0x10(%rax)
    0.00 :   ffffffff945d9e07:       mov    0x18(%rdi),%rdx
    0.00 :   ffffffff945d9e0b:       mov    %rdx,0x18(%rax)
    0.00 :   ffffffff945d9e0f:       mov    0x20(%rdi),%rdx
    0.00 :   ffffffff945d9e13:       mov    %rdx,0x20(%rax)
    0.00 :   ffffffff945d9e17:       mov    0x28(%rdi),%rdx
    0.00 :   ffffffff945d9e1b:       mov    %rdx,0x28(%rax)
    0.00 :   ffffffff945d9e1f:       mov    0x30(%rdi),%rdx
    0.00 :   ffffffff945d9e23:       mov    %rdx,0x30(%rax)
    0.00 :   ffffffff945d9e27:       addl   $0x1,(%rsi)
    0.00 :   ffffffff945d9e2a:       mov    0x8(%rsi),%rcx
    0.00 :   ffffffff945d9e2e:       pop    %rbp
    0.00 :   ffffffff945d9e2f:       mov    %rcx,0x40(%rsi)
    0.00 :   ffffffff945d9e33:       mov    0x8(%rax),%rcx
    0.00 :   ffffffff945d9e37:       mov    %rcx,0x48(%rsi)
    0.00 :   ffffffff945d9e3b:       mov    0x10(%rax),%rcx
    0.00 :   ffffffff945d9e3f:       mov    %rcx,0x50(%rsi)
    0.00 :   ffffffff945d9e43:       mov    0x18(%rax),%rcx
    0.00 :   ffffffff945d9e47:       mov    %rcx,0x58(%rsi)
    0.00 :   ffffffff945d9e4b:       mov    0x20(%rax),%rcx
    0.00 :   ffffffff945d9e4f:       mov    %rcx,0x60(%rsi)
    0.00 :   ffffffff945d9e53:       mov    0x28(%rax),%rcx
    0.00 :   ffffffff945d9e57:       mov    %rcx,0x68(%rsi)
    0.00 :   ffffffff945d9e5b:       mov    0x30(%rax),%rax
    0.00 :   ffffffff945d9e5f:       mov    %rax,0x70(%rsi)
    0.00 :   ffffffff945d9e63:       xor    %eax,%eax
    0.00 :   ffffffff945d9e65:       xor    %edx,%edx
    0.00 :   ffffffff945d9e67:       xor    %ecx,%ecx
    0.00 :   ffffffff945d9e69:       xor    %esi,%esi
    0.00 :   ffffffff945d9e6b:       xor    %edi,%edi
    0.00 :   ffffffff945d9e6d:       ret
    0.00 :   ffffffff945d9e6e:       int3
    0.00 :   ffffffff945d9e6f:       int3
    0.00 :   ffffffff945d9e70:       int3
    0.00 :   ffffffff945d9e71:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9453ca30 <load0>:
    0.00 :   ffffffff9453ca30:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9453ca35:       push   %rbp
    0.00 :   ffffffff9453ca36:       mov    %rsp,%rbp
    0.00 :   ffffffff9453ca39:       push   %r13
    0.00 :   ffffffff9453ca3b:       movslq %edi,%r13
    0.00 :   ffffffff9453ca3e:       push   %r12
    0.00 :   ffffffff9453ca40:       mov    %r13,%r12
    0.00 :   ffffffff9453ca43:       push   %rbx
    0.00 :   ffffffff9453ca44:       mov    $0x31fc0,%rbx
    0.00 :   ffffffff9453ca4b:       cmp    $0x1fff,%r13
    0.00 :   ffffffff9453ca52:       ja     0xffffffff9453cb01
    0.00 :   ffffffff9453ca58:       mov    -0x6a1a1540(,%r13,8),%rax
    0.00 :   ffffffff9453ca60:       mov    0x9e8(%rbx,%rax,1),%rdx
    0.00 :   ffffffff9453ca68:       mov    (%rdx),%rax
    0.00 :   ffffffff9453ca6b:       test   $0x200000,%eax
    0.00 :   ffffffff9453ca70:       je     0xffffffff9453ca9b
    0.00 :   ffffffff9453ca72:       test   $0x8,%al
    0.00 :   ffffffff9453ca74:       jne    0xffffffff9453ca84
    0.00 :   ffffffff9453ca76:       mov    %rax,%rcx
    0.00 :   ffffffff9453ca79:       or     $0x8,%rcx
  100.00 :   ffffffff9453ca7d:       lock cmpxchg %rcx,(%rdx)
    0.00 :   ffffffff9453ca82:       jne    0xffffffff9453ca6b
    0.00 :   ffffffff9453ca84:       xchg   %ax,%ax
    0.00 :   ffffffff9453ca86:       pop    %rbx
    0.00 :   ffffffff9453ca87:       pop    %r12
    0.00 :   ffffffff9453ca89:       pop    %r13
    0.00 :   ffffffff9453ca8b:       pop    %rbp
    0.00 :   ffffffff9453ca8c:       xor    %eax,%eax
    0.00 :   ffffffff9453ca8e:       xor    %edx,%edx
    0.00 :   ffffffff9453ca90:       xor    %ecx,%ecx
    0.00 :   ffffffff9453ca92:       xor    %esi,%esi
    0.00 :   ffffffff9453ca94:       xor    %edi,%edi
    0.00 :   ffffffff9453ca96:       ret
    0.00 :   ffffffff9453ca97:       int3
    0.00 :   ffffffff9453ca98:       int3
    0.00 :   ffffffff9453ca99:       int3
    0.00 :   ffffffff9453ca9a:       int3
    0.00 :   ffffffff9453ca9b:       mov    %r12d,%edi
    0.00 :   ffffffff9453ca9e:       mov    0x2119a53(%rip),%rax        # 0xffffffff966564f8
    0.00 :   ffffffff9453caa5:       call   *%rax
    0.00 :   ffffffff9453caa7:       nopl   (%rax)
    0.00 :   ffffffff9453caaa:       pop    %rbx
    0.00 :   ffffffff9453caab:       pop    %r12
    0.00 :   ffffffff9453caad:       pop    %r13
    0.00 :   ffffffff9453caaf:       pop    %rbp
    0.00 :   ffffffff9453cab0:       xor    %eax,%eax
    0.00 :   ffffffff9453cab2:       xor    %edx,%edx
    0.00 :   ffffffff9453cab4:       xor    %ecx,%ecx
    0.00 :   ffffffff9453cab6:       xor    %esi,%esi
    0.00 :   ffffffff9453cab8:       xor    %edi,%edi
    0.00 :   ffffffff9453caba:       ret
    0.00 :   ffffffff9453cabb:       int3
    0.00 :   ffffffff9453cabc:       int3
    0.00 :   ffffffff9453cabd:       int3
    0.00 :   ffffffff9453cabe:       int3
    0.00 :   ffffffff9453cabf:       mov    %gs:0x6baf4d86(%rip),%eax        # 0x3184c
    0.00 :   ffffffff9453cac6:       mov    %eax,%eax
    0.00 :   ffffffff9453cac8:       bt     %rax,0x24c4050(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff9453cad0:       jae    0xffffffff9453ca86
    0.00 :   ffffffff9453cad2:       incl   %gs:0x6baf4d6f(%rip)        # 0x31848
    0.00 :   ffffffff9453cad9:       mov    0x2479000(%rip),%rax        # 0xffffffff969b5ae0
    0.00 :   ffffffff9453cae0:       test   %rax,%rax
    0.00 :   ffffffff9453cae3:       je     0xffffffff9453caf1
    0.00 :   ffffffff9453cae5:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff9453cae9:       mov    %r12d,%esi
    0.00 :   ffffffff9453caec:       call   0xffffffff9452bc10
    0.00 :   ffffffff9453caf1:       decl   %gs:0x6baf4d50(%rip)        # 0x31848
    0.00 :   ffffffff9453caf8:       jne    0xffffffff9453ca86
    0.00 :   ffffffff9453cafa:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9453caff:       jmp    0xffffffff9453ca86
    0.00 :   ffffffff9453cb01:       mov    %r13,%rsi
    0.00 :   ffffffff9453cb04:       mov    $0xffffffff9668c580,%rdi
    0.00 :   ffffffff9453cb0b:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9453cb10:       jmp    0xffffffff9453ca58
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945dc7f0 <load0>:
    0.00 :   ffffffff945dc7f0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945dc7f5:       push   %rbp
    0.00 :   ffffffff945dc7f6:       mov    %rsp,%rbp
    0.00 :   ffffffff945dc7f9:       push   %r15
  100.00 :   ffffffff945dc7fb:       push   %r14
    0.00 :   ffffffff945dc7fd:       xor    %r14d,%r14d
    0.00 :   ffffffff945dc800:       push   %r13
    0.00 :   ffffffff945dc802:       push   %r12
    0.00 :   ffffffff945dc804:       mov    %rdi,%r12
    0.00 :   ffffffff945dc807:       push   %rbx
    0.00 :   ffffffff945dc808:       mov    %rsi,%rbx
    0.00 :   ffffffff945dc80b:       sub    $0x18,%rsp
    0.00 :   ffffffff945dc80f:       mov    %rdx,-0x30(%rbp)
    0.00 :   ffffffff945dc813:       mov    %rcx,-0x38(%rbp)
    0.00 :   ffffffff945dc817:       mov    0x35e8aa2(%rip),%r13d        # 0xffffffff97bc52c0
    0.00 :   ffffffff945dc81e:       test   $0x1,%r13b
    0.00 :   ffffffff945dc822:       jne    0xffffffff945dc8ee
    0.00 :   ffffffff945dc828:       mov    0x35e8a99(%rip),%rdi        # 0xffffffff97bc52c8
    0.00 :   ffffffff945dc82f:       mov    0x35e8aba(%rip),%r15        # 0xffffffff97bc52f0
    0.00 :   ffffffff945dc836:       mov    (%rdi),%rax
    0.00 :   ffffffff945dc839:       call   *%rax
    0.00 :   ffffffff945dc83b:       nopl   (%rax)
    0.00 :   ffffffff945dc83e:       mov    0x35e8a8b(%rip),%rcx        # 0xffffffff97bc52d0
    0.00 :   ffffffff945dc845:       sub    0x35e8a8c(%rip),%rax        # 0xffffffff97bc52d8
    0.00 :   ffffffff945dc84c:       mov    %rax,%rdx
    0.00 :   ffffffff945dc84f:       mov    0x35e8a8b(%rip),%eax        # 0xffffffff97bc52e0
    0.00 :   ffffffff945dc855:       and    %rcx,%rdx
    0.00 :   ffffffff945dc858:       shr    %rcx
    0.00 :   ffffffff945dc85b:       not    %rcx
    0.00 :   ffffffff945dc85e:       test   %rdx,%rcx
    0.00 :   ffffffff945dc861:       mov    0x35e8a7d(%rip),%ecx        # 0xffffffff97bc52e4
    0.00 :   ffffffff945dc867:       cmovne %r14,%rdx
    0.00 :   ffffffff945dc86b:       imul   %rdx,%rax
    0.00 :   ffffffff945dc86f:       add    0x35e8a72(%rip),%rax        # 0xffffffff97bc52e8
    0.00 :   ffffffff945dc876:       cmp    $0x3f,%ecx
    0.00 :   ffffffff945dc879:       ja     0xffffffff95435b7e
    0.00 :   ffffffff945dc87f:       shr    %cl,%rax
    0.00 :   ffffffff945dc882:       mov    0x35e8aec(%rip),%edx        # 0xffffffff97bc5374
    0.00 :   ffffffff945dc888:       add    %r15,%rax
    0.00 :   ffffffff945dc88b:       cmp    %edx,(%r12)
    0.00 :   ffffffff945dc88f:       je     0xffffffff945dc8bb
    0.00 :   ffffffff945dc891:       mov    %edx,(%r12)
    0.00 :   ffffffff945dc895:       mov    0x35e8abc(%rip),%rdx        # 0xffffffff97bc5358
    0.00 :   ffffffff945dc89c:       mov    -0x30(%rbp),%rsi
    0.00 :   ffffffff945dc8a0:       mov    %rdx,(%rbx)
    0.00 :   ffffffff945dc8a3:       mov    0x35e8ab6(%rip),%rdx        # 0xffffffff97bc5360
    0.00 :   ffffffff945dc8aa:       mov    %rdx,(%rsi)
    0.00 :   ffffffff945dc8ad:       mov    -0x38(%rbp),%rsi
    0.00 :   ffffffff945dc8b1:       mov    0x35e8ab0(%rip),%rdx        # 0xffffffff97bc5368
    0.00 :   ffffffff945dc8b8:       mov    %rdx,(%rsi)
    0.00 :   ffffffff945dc8bb:       cmp    %rax,0x35e8abe(%rip)        # 0xffffffff97bc5380
    0.00 :   ffffffff945dc8c2:       jle    0xffffffff945dc8f5
    0.00 :   ffffffff945dc8c4:       mov    0x35e89f6(%rip),%edx        # 0xffffffff97bc52c0
    0.00 :   ffffffff945dc8ca:       cmp    %edx,%r13d
    0.00 :   ffffffff945dc8cd:       jne    0xffffffff945dc817
    0.00 :   ffffffff945dc8d3:       add    $0x18,%rsp
    0.00 :   ffffffff945dc8d7:       pop    %rbx
    0.00 :   ffffffff945dc8d8:       pop    %r12
    0.00 :   ffffffff945dc8da:       pop    %r13
    0.00 :   ffffffff945dc8dc:       pop    %r14
    0.00 :   ffffffff945dc8de:       pop    %r15
    0.00 :   ffffffff945dc8e0:       pop    %rbp
    0.00 :   ffffffff945dc8e1:       xor    %edx,%edx
    0.00 :   ffffffff945dc8e3:       xor    %ecx,%ecx
    0.00 :   ffffffff945dc8e5:       xor    %esi,%esi
    0.00 :   ffffffff945dc8e7:       xor    %edi,%edi
    0.00 :   ffffffff945dc8e9:       ret
    0.00 :   ffffffff945dc8ea:       int3
    0.00 :   ffffffff945dc8eb:       int3
    0.00 :   ffffffff945dc8ec:       int3
    0.00 :   ffffffff945dc8ed:       int3
    0.00 :   ffffffff945dc8ee:       pause
    0.00 :   ffffffff945dc8f0:       jmp    0xffffffff945dc817
    0.00 :   ffffffff945dc8f5:       mov    0x35e8a5c(%rip),%rsi        # 0xffffffff97bc5358
    0.00 :   ffffffff945dc8fc:       lea    -0x3b9aca00(%rsi),%rdx
    0.00 :   ffffffff945dc903:       mov    %rdx,(%rbx)
    0.00 :   ffffffff945dc906:       jmp    0xffffffff945dc8c4
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945d8b80 <load0>:
    0.00 :   ffffffff945d8b80:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945d8b85:       push   %rbp
    0.00 :   ffffffff945d8b86:       mov    %rsp,%rbp
    0.00 :   ffffffff945d8b89:       push   %r15
    0.00 :   ffffffff945d8b8b:       push   %r14
    0.00 :   ffffffff945d8b8d:       push   %r13
    0.00 :   ffffffff945d8b8f:       push   %r12
    0.00 :   ffffffff945d8b91:       push   %rbx
    0.00 :   ffffffff945d8b92:       mov    $0x23300,%rbx
    0.00 :   ffffffff945d8b99:       sub    $0x20,%rsp
    0.00 :   ffffffff945d8b9d:       add    %gs:0x6ba40e3b(%rip),%rbx        # 0x199e0
    0.00 :   ffffffff945d8ba5:       testb  $0x1,0x10(%rbx)
    0.00 :   ffffffff945d8ba9:       je     0xffffffff945d8db4
    0.00 :   ffffffff945d8baf:       addl   $0x1,0x14(%rbx)
    0.00 :   ffffffff945d8bb3:       lea    0xb8(%rbx),%r13
    0.00 :   ffffffff945d8bba:       movabs $0x7fffffffffffffff,%rax
    0.00 :   ffffffff945d8bc4:       mov    %rax,0x18(%rdi)
    0.00 :   ffffffff945d8bc8:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8bcb:       lea    0xf8(%rbx),%r14
    0.00 :   ffffffff945d8bd2:       lea    0x138(%rbx),%r15
    0.00 :   ffffffff945d8bd9:       call   0xffffffff954abd70
    0.00 :   ffffffff945d8bde:       mov    %r15,%rcx
    0.00 :   ffffffff945d8be1:       mov    %r14,%rdx
    0.00 :   ffffffff945d8be4:       mov    %r13,%rsi
    0.00 :   ffffffff945d8be7:       mov    %rax,%r12
    0.00 :   ffffffff945d8bea:       lea    0xc(%rbx),%rax
    0.00 :   ffffffff945d8bee:       mov    %rax,%rdi
    0.00 :   ffffffff945d8bf1:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff945d8bf5:       call   0xffffffff945dc7f0
    0.00 :   ffffffff945d8bfa:       movl   $0x3,-0x34(%rbp)
    0.00 :   ffffffff945d8c01:       mov    %rax,-0x48(%rbp)
    0.00 :   ffffffff945d8c05:       mov    %rax,%r9
    0.00 :   ffffffff945d8c08:       mov    0xb8(%rbx),%rax
    0.00 :   ffffffff945d8c0f:       mov    %rax,0x1b8(%rbx)
  100.00 :   ffffffff945d8c16:       mov    0xf8(%rbx),%rax
    0.00 :   ffffffff945d8c1d:       mov    %rax,0x1f8(%rbx)
    0.00 :   ffffffff945d8c24:       mov    0x138(%rbx),%rax
    0.00 :   ffffffff945d8c2b:       mov    %rax,0x238(%rbx)
    0.00 :   ffffffff945d8c32:       movabs $0x7fffffffffffffff,%rcx
    0.00 :   ffffffff945d8c3c:       movzbl 0x10(%rbx),%eax
    0.00 :   ffffffff945d8c40:       mov    %rcx,0x20(%rbx)
    0.00 :   ffffffff945d8c44:       mov    %eax,%edx
    0.00 :   ffffffff945d8c46:       or     $0x2,%edx
    0.00 :   ffffffff945d8c49:       mov    %dl,0x10(%rbx)
    0.00 :   ffffffff945d8c4c:       cmp    %r9,0x30(%rbx)
    0.00 :   ffffffff945d8c50:       jg     0xffffffff945d8c6e
    0.00 :   ffffffff945d8c52:       or     $0xa,%eax
    0.00 :   ffffffff945d8c55:       mov    %rcx,0x30(%rbx)
    0.00 :   ffffffff945d8c59:       mov    $0x8,%edi
    0.00 :   ffffffff945d8c5e:       mov    %al,0x10(%rbx)
    0.00 :   ffffffff945d8c61:       mov    %r9,-0x30(%rbp)
    0.00 :   ffffffff945d8c65:       call   0xffffffff944f3260
    0.00 :   ffffffff945d8c6a:       mov    -0x30(%rbp),%r9
    0.00 :   ffffffff945d8c6e:       mov    %r9,%rsi
    0.00 :   ffffffff945d8c71:       mov    $0xf,%ecx
    0.00 :   ffffffff945d8c76:       mov    %r12,%rdx
    0.00 :   ffffffff945d8c79:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8c7c:       call   0xffffffff945d7fe0
    0.00 :   ffffffff945d8c81:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8c84:       call   0xffffffff945d78a0
    0.00 :   ffffffff945d8c89:       andb   $0xfd,0x10(%rbx)
    0.00 :   ffffffff945d8c8d:       mov    %r12,%rsi
    0.00 :   ffffffff945d8c90:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8c93:       mov    %rax,0x20(%rbx)
    0.00 :   ffffffff945d8c97:       mov    %rax,-0x30(%rbp)
    0.00 :   ffffffff945d8c9b:       call   0xffffffff954abe10
    0.00 :   ffffffff945d8ca0:       mov    -0x30(%rbp),%rdi
    0.00 :   ffffffff945d8ca4:       xor    %esi,%esi
    0.00 :   ffffffff945d8ca6:       call   0xffffffff945ee6c0
    0.00 :   ffffffff945d8cab:       test   %eax,%eax
    0.00 :   ffffffff945d8cad:       je     0xffffffff945d8d90
    0.00 :   ffffffff945d8cb3:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8cb6:       call   0xffffffff954abd70
    0.00 :   ffffffff945d8cbb:       mov    -0x40(%rbp),%rdi
    0.00 :   ffffffff945d8cbf:       mov    %r15,%rcx
    0.00 :   ffffffff945d8cc2:       mov    %r14,%rdx
    0.00 :   ffffffff945d8cc5:       mov    %r13,%rsi
    0.00 :   ffffffff945d8cc8:       mov    %rax,%r12
    0.00 :   ffffffff945d8ccb:       call   0xffffffff945dc7f0
    0.00 :   ffffffff945d8cd0:       addw   $0x1,0x18(%rbx)
    0.00 :   ffffffff945d8cd5:       mov    %rax,%r9
    0.00 :   ffffffff945d8cd8:       mov    0xb8(%rbx),%rax
    0.00 :   ffffffff945d8cdf:       subl   $0x1,-0x34(%rbp)
    0.00 :   ffffffff945d8ce3:       mov    %rax,0x1b8(%rbx)
    0.00 :   ffffffff945d8cea:       mov    0xf8(%rbx),%rax
    0.00 :   ffffffff945d8cf1:       mov    %rax,0x1f8(%rbx)
    0.00 :   ffffffff945d8cf8:       mov    0x138(%rbx),%rax
    0.00 :   ffffffff945d8cff:       mov    %rax,0x238(%rbx)
    0.00 :   ffffffff945d8d06:       jne    0xffffffff945d8c32
    0.00 :   ffffffff945d8d0c:       addw   $0x1,0x1a(%rbx)
    0.00 :   ffffffff945d8d11:       mov    %r12,%rsi
    0.00 :   ffffffff945d8d14:       mov    %rbx,%rdi
    0.00 :   ffffffff945d8d17:       orb    $0x4,0x10(%rbx)
    0.00 :   ffffffff945d8d1b:       mov    %r9,-0x30(%rbp)
    0.00 :   ffffffff945d8d1f:       call   0xffffffff954abe10
    0.00 :   ffffffff945d8d24:       mov    -0x30(%rbp),%r9
    0.00 :   ffffffff945d8d28:       mov    %r9,%r12
    0.00 :   ffffffff945d8d2b:       sub    -0x48(%rbp),%r12
    0.00 :   ffffffff945d8d2f:       cmp    0x1c(%rbx),%r12d
    0.00 :   ffffffff945d8d33:       ja     0xffffffff945d8d8a
    0.00 :   ffffffff945d8d35:       lea    0x5f5e100(%r9),%rax
    0.00 :   ffffffff945d8d3c:       lea    (%r12,%r9,1),%rdi
    0.00 :   ffffffff945d8d40:       mov    $0x1,%esi
    0.00 :   ffffffff945d8d45:       cmp    $0x5f5e101,%r12
    0.00 :   ffffffff945d8d4c:       cmovge %rax,%rdi
    0.00 :   ffffffff945d8d50:       call   0xffffffff945ee6c0
    0.00 :   ffffffff945d8d55:       movzbl 0x23da016(%rip),%ebx        # 0xffffffff969b2d72
    0.00 :   ffffffff945d8d5c:       cmp    $0x1,%bl
    0.00 :   ffffffff945d8d5f:       ja     0xffffffff9543524c
    0.00 :   ffffffff945d8d65:       and    $0x1,%ebx
    0.00 :   ffffffff945d8d68:       je     0xffffffff945d8db6
    0.00 :   ffffffff945d8d6a:       add    $0x20,%rsp
    0.00 :   ffffffff945d8d6e:       pop    %rbx
    0.00 :   ffffffff945d8d6f:       pop    %r12
    0.00 :   ffffffff945d8d71:       pop    %r13
    0.00 :   ffffffff945d8d73:       pop    %r14
    0.00 :   ffffffff945d8d75:       pop    %r15
    0.00 :   ffffffff945d8d77:       pop    %rbp
    0.00 :   ffffffff945d8d78:       xor    %eax,%eax
    0.00 :   ffffffff945d8d7a:       xor    %edx,%edx
    0.00 :   ffffffff945d8d7c:       xor    %ecx,%ecx
    0.00 :   ffffffff945d8d7e:       xor    %esi,%esi
    0.00 :   ffffffff945d8d80:       xor    %edi,%edi
    0.00 :   ffffffff945d8d82:       xor    %r9d,%r9d
    0.00 :   ffffffff945d8d85:       ret
    0.00 :   ffffffff945d8d86:       int3
    0.00 :   ffffffff945d8d87:       int3
    0.00 :   ffffffff945d8d88:       int3
    0.00 :   ffffffff945d8d89:       int3
    0.00 :   ffffffff945d8d8a:       mov    %r12d,0x1c(%rbx)
    0.00 :   ffffffff945d8d8e:       jmp    0xffffffff945d8d35
    0.00 :   ffffffff945d8d90:       andb   $0xfb,0x10(%rbx)
    0.00 :   ffffffff945d8d94:       add    $0x20,%rsp
    0.00 :   ffffffff945d8d98:       pop    %rbx
    0.00 :   ffffffff945d8d99:       pop    %r12
    0.00 :   ffffffff945d8d9b:       pop    %r13
    0.00 :   ffffffff945d8d9d:       pop    %r14
    0.00 :   ffffffff945d8d9f:       pop    %r15
    0.00 :   ffffffff945d8da1:       pop    %rbp
    0.00 :   ffffffff945d8da2:       xor    %eax,%eax
    0.00 :   ffffffff945d8da4:       xor    %edx,%edx
    0.00 :   ffffffff945d8da6:       xor    %ecx,%ecx
    0.00 :   ffffffff945d8da8:       xor    %esi,%esi
    0.00 :   ffffffff945d8daa:       xor    %edi,%edi
    0.00 :   ffffffff945d8dac:       xor    %r9d,%r9d
    0.00 :   ffffffff945d8daf:       ret
    0.00 :   ffffffff945d8db0:       int3
    0.00 :   ffffffff945d8db1:       int3
    0.00 :   ffffffff945d8db2:       int3
    0.00 :   ffffffff945d8db3:       int3
    0.00 :   ffffffff945d8db4:       ud2
    0.00 :   ffffffff945d8db6:       mov    %r12,%rsi
    0.00 :   ffffffff945d8db9:       mov    $0xffffffff95d3b098,%rdi
    0.00 :   ffffffff945d8dc0:       movb   $0x1,0x23d9fab(%rip)        # 0xffffffff969b2d72
    0.00 :   ffffffff945d8dc7:       call   0xffffffff9458c380
    0.00 :   ffffffff945d8dcc:       jmp    0xffffffff945d8d6a
    0.00 :   ffffffff945d8dce:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9464e4d0 <load0>:
  100.00 :   ffffffff9464e4d0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9464e4d5:       push   %rbp
    0.00 :   ffffffff9464e4d6:       mov    0x920(%rdi),%rsi
    0.00 :   ffffffff9464e4dd:       mov    0xa90(%rdi),%rdx
    0.00 :   ffffffff9464e4e4:       mov    0xa88(%rdi),%rcx
    0.00 :   ffffffff9464e4eb:       mov    %rsp,%rbp
    0.00 :   ffffffff9464e4ee:       test   %rsi,%rsi
    0.00 :   ffffffff9464e4f1:       je     0xffffffff9464e56e
    0.00 :   ffffffff9464e4f3:       add    %rcx,%rdx
    0.00 :   ffffffff9464e4f6:       mov    %rdi,%rax
    0.00 :   ffffffff9464e4f9:       mov    %rdx,%rcx
    0.00 :   ffffffff9464e4fc:       sub    0xd70(%rdi),%rcx
    0.00 :   ffffffff9464e503:       cmp    $0x3d08ff,%rcx
    0.00 :   ffffffff9464e50a:       jbe    0xffffffff9464e56e
    0.00 :   ffffffff9464e50c:       mov    %rdx,0xd70(%rdi)
    0.00 :   ffffffff9464e513:       mov    0x2d8(%rsi),%rdx
    0.00 :   ffffffff9464e51a:       xor    %r9d,%r9d
    0.00 :   ffffffff9464e51d:       mov    0x300(%rsi),%r8
    0.00 :   ffffffff9464e524:       mov    0x350(%rsi),%rdi
    0.00 :   ffffffff9464e52b:       test   %rdx,%rdx
    0.00 :   ffffffff9464e52e:       cmovs  %r9,%rdx
    0.00 :   ffffffff9464e532:       test   %r8,%r8
    0.00 :   ffffffff9464e535:       cmovs  %r9,%r8
    0.00 :   ffffffff9464e539:       add    %r8,%rdx
    0.00 :   ffffffff9464e53c:       xor    %r8d,%r8d
    0.00 :   ffffffff9464e53f:       test   %rdi,%rdi
    0.00 :   ffffffff9464e542:       cmovs  %r8,%rdi
    0.00 :   ffffffff9464e546:       add    %rdi,%rdx
    0.00 :   ffffffff9464e549:       imul   %rcx,%rdx
    0.00 :   ffffffff9464e54d:       shr    $0xa,%rdx
    0.00 :   ffffffff9464e551:       add    %rdx,0xd60(%rax)
    0.00 :   ffffffff9464e558:       mov    0xb8(%rsi),%rdx
    0.00 :   ffffffff9464e55f:       imul   %rdx,%rcx
    0.00 :   ffffffff9464e563:       shr    $0xa,%rcx
    0.00 :   ffffffff9464e567:       add    %rcx,0xd68(%rax)
    0.00 :   ffffffff9464e56e:       pop    %rbp
    0.00 :   ffffffff9464e56f:       xor    %eax,%eax
    0.00 :   ffffffff9464e571:       xor    %edx,%edx
    0.00 :   ffffffff9464e573:       xor    %ecx,%ecx
    0.00 :   ffffffff9464e575:       xor    %esi,%esi
    0.00 :   ffffffff9464e577:       xor    %edi,%edi
    0.00 :   ffffffff9464e579:       xor    %r8d,%r8d
    0.00 :   ffffffff9464e57c:       xor    %r9d,%r9d
    0.00 :   ffffffff9464e57f:       ret
    0.00 :   ffffffff9464e580:       int3
    0.00 :   ffffffff9464e581:       int3
    0.00 :   ffffffff9464e582:       int3
    0.00 :   ffffffff9464e583:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95419c60 <load0>:
    0.00 :   ffffffff95419c60:       push   %rbp
    0.00 :   ffffffff95419c61:       mov    %rsp,%rbp
    0.00 :   ffffffff95419c64:       push   %r12
    0.00 :   ffffffff95419c66:       mov    %rdi,%r12
    0.00 :   ffffffff95419c69:       push   %rbx
    0.00 :   ffffffff95419c6a:       mov    %rsi,%rbx
  100.00 :   ffffffff95419c6d:       cmp    %rsi,(%rsi)
    0.00 :   ffffffff95419c70:       je     0xffffffff95419cab
    0.00 :   ffffffff95419c72:       cmp    0x8(%r12),%rbx
    0.00 :   ffffffff95419c77:       jne    0xffffffff95419c86
    0.00 :   ffffffff95419c79:       mov    %rbx,%rdi
    0.00 :   ffffffff95419c7c:       call   0xffffffff95416830
    0.00 :   ffffffff95419c81:       mov    %rax,0x8(%r12)
    0.00 :   ffffffff95419c86:       mov    %r12,%rsi
    0.00 :   ffffffff95419c89:       mov    %rbx,%rdi
    0.00 :   ffffffff95419c8c:       call   0xffffffff95415db0
    0.00 :   ffffffff95419c91:       mov    %rbx,(%rbx)
    0.00 :   ffffffff95419c94:       mov    (%r12),%rax
    0.00 :   ffffffff95419c98:       pop    %rbx
    0.00 :   ffffffff95419c99:       pop    %r12
    0.00 :   ffffffff95419c9b:       test   %rax,%rax
    0.00 :   ffffffff95419c9e:       pop    %rbp
    0.00 :   ffffffff95419c9f:       setne  %al
    0.00 :   ffffffff95419ca2:       xor    %esi,%esi
    0.00 :   ffffffff95419ca4:       xor    %edi,%edi
    0.00 :   ffffffff95419ca6:       ret
    0.00 :   ffffffff95419ca7:       int3
    0.00 :   ffffffff95419ca8:       int3
    0.00 :   ffffffff95419ca9:       int3
    0.00 :   ffffffff95419caa:       int3
    0.00 :   ffffffff95419cab:       ud2
    0.00 :   ffffffff95419cad:       jmp    0xffffffff95419c72
    0.00 :   ffffffff95419caf:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9487dd50 <load0>:
    0.00 :   ffffffff9487dd50:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9487dd55:       push   %rbp
    0.00 :   ffffffff9487dd56:       mov    %rsp,%rbp
    0.00 :   ffffffff9487dd59:       push   %r15
    0.00 :   ffffffff9487dd5b:       push   %r14
    0.00 :   ffffffff9487dd5d:       push   %r13
    0.00 :   ffffffff9487dd5f:       push   %r12
    0.00 :   ffffffff9487dd61:       push   %rbx
    0.00 :   ffffffff9487dd62:       sub    $0x60,%rsp
    0.00 :   ffffffff9487dd66:       mov    %gs:0x28,%rax
    0.00 :   ffffffff9487dd6f:       mov    %rax,-0x30(%rbp)
    0.00 :   ffffffff9487dd73:       mov    0x44(%rdi),%eax
    0.00 :   ffffffff9487dd76:       test   $0x2,%al
    0.00 :   ffffffff9487dd78:       je     0xffffffff9487e0ed
    0.00 :   ffffffff9487dd7e:       test   $0x40000,%eax
    0.00 :   ffffffff9487dd83:       je     0xffffffff9487e0f9
    0.00 :   ffffffff9487dd89:       mov    %rdx,%r14
    0.00 :   ffffffff9487dd8c:       movabs $0x7ffffffff000,%rax
    0.00 :   ffffffff9487dd96:       cmp    %rax,%rdx
    0.00 :   ffffffff9487dd99:       ja     0xffffffff9487de7a
    0.00 :   ffffffff9487dd9f:       sub    %rdx,%rax
    0.00 :   ffffffff9487dda2:       mov    %rsi,%r13
    0.00 :   ffffffff9487dda5:       cmp    %rax,%rsi
    0.00 :   ffffffff9487dda8:       ja     0xffffffff9487de7a
    0.00 :   ffffffff9487ddae:       mov    %rcx,%r15
    0.00 :   ffffffff9487ddb1:       mov    %rdi,%rsi
    0.00 :   ffffffff9487ddb4:       mov    %rdx,%rcx
    0.00 :   ffffffff9487ddb7:       mov    %rdi,%rbx
    0.00 :   ffffffff9487ddba:       mov    %r15,%rdx
    0.00 :   ffffffff9487ddbd:       mov    $0x1,%edi
    0.00 :   ffffffff9487ddc2:       call   0xffffffff9487a860
  100.00 :   ffffffff9487ddc7:       movslq %eax,%r12
    0.00 :   ffffffff9487ddca:       test   %r12,%r12
    0.00 :   ffffffff9487ddcd:       jne    0xffffffff9487de81
    0.00 :   ffffffff9487ddd3:       mov    $0x7ffff000,%eax
    0.00 :   ffffffff9487ddd8:       mov    0x20(%rbx),%rdx
    0.00 :   ffffffff9487dddc:       cmp    %rax,%r14
    0.00 :   ffffffff9487dddf:       cmovbe %r14,%rax
    0.00 :   ffffffff9487dde3:       mov    %rax,%r12
    0.00 :   ffffffff9487dde6:       movzwl (%rdx),%eax
    0.00 :   ffffffff9487dde9:       and    $0xf000,%ax
    0.00 :   ffffffff9487dded:       cmp    $0x8000,%ax
    0.00 :   ffffffff9487ddf1:       je     0xffffffff9487df27
    0.00 :   ffffffff9487ddf7:       mov    0x28(%rbx),%rdx
    0.00 :   ffffffff9487ddfb:       mov    0x18(%rdx),%rax
    0.00 :   ffffffff9487ddff:       test   %rax,%rax
    0.00 :   ffffffff9487de02:       je     0xffffffff9487df67
    0.00 :   ffffffff9487de08:       mov    %r12,%rdx
    0.00 :   ffffffff9487de0b:       mov    %r15,%rcx
    0.00 :   ffffffff9487de0e:       mov    %r13,%rsi
    0.00 :   ffffffff9487de11:       mov    %rbx,%rdi
    0.00 :   ffffffff9487de14:       call   *%rax
    0.00 :   ffffffff9487de16:       nopl   (%rax)
    0.00 :   ffffffff9487de19:       mov    %rax,%r12
    0.00 :   ffffffff9487de1c:       test   %r12,%r12
    0.00 :   ffffffff9487de1f:       jg     0xffffffff9487debe
    0.00 :   ffffffff9487de25:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff9487de2e:       addq   $0x1,0xd38(%rax)
    0.00 :   ffffffff9487de36:       mov    0x20(%rbx),%rdx
    0.00 :   ffffffff9487de3a:       movzwl (%rdx),%eax
    0.00 :   ffffffff9487de3d:       and    $0xf000,%ax
    0.00 :   ffffffff9487de41:       cmp    $0x8000,%ax
    0.00 :   ffffffff9487de45:       jne    0xffffffff9487de81
    0.00 :   ffffffff9487de47:       mov    0x28(%rdx),%rax
    0.00 :   ffffffff9487de4b:       incl   %gs:0x6b7b39f6(%rip)        # 0x31848
    0.00 :   ffffffff9487de52:       mov    0x278(%rax),%edx
    0.00 :   ffffffff9487de58:       test   %edx,%edx
    0.00 :   ffffffff9487de5a:       jne    0xffffffff9487e0cc
    0.00 :   ffffffff9487de60:       mov    0x2a8(%rax),%rax
    0.00 :   ffffffff9487de67:       decl   %gs:(%rax)
    0.00 :   ffffffff9487de6a:       decl   %gs:0x6b7b39d7(%rip)        # 0x31848
    0.00 :   ffffffff9487de71:       jne    0xffffffff9487de81
    0.00 :   ffffffff9487de73:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9487de78:       jmp    0xffffffff9487de81
    0.00 :   ffffffff9487de7a:       mov    $0xfffffffffffffff2,%r12
    0.00 :   ffffffff9487de81:       mov    -0x30(%rbp),%rax
    0.00 :   ffffffff9487de85:       sub    %gs:0x28,%rax
    0.00 :   ffffffff9487de8e:       jne    0xffffffff9487e105
    0.00 :   ffffffff9487de94:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff9487de98:       mov    %r12,%rax
    0.00 :   ffffffff9487de9b:       pop    %rbx
    0.00 :   ffffffff9487de9c:       pop    %r12
    0.00 :   ffffffff9487de9e:       pop    %r13
    0.00 :   ffffffff9487dea0:       pop    %r14
    0.00 :   ffffffff9487dea2:       pop    %r15
    0.00 :   ffffffff9487dea4:       pop    %rbp
    0.00 :   ffffffff9487dea5:       xor    %edx,%edx
    0.00 :   ffffffff9487dea7:       xor    %ecx,%ecx
    0.00 :   ffffffff9487dea9:       xor    %esi,%esi
    0.00 :   ffffffff9487deab:       xor    %edi,%edi
    0.00 :   ffffffff9487dead:       xor    %r8d,%r8d
    0.00 :   ffffffff9487deb0:       xor    %r9d,%r9d
    0.00 :   ffffffff9487deb3:       xor    %r10d,%r10d
    0.00 :   ffffffff9487deb6:       xor    %r11d,%r11d
    0.00 :   ffffffff9487deb9:       ret
    0.00 :   ffffffff9487deba:       int3
    0.00 :   ffffffff9487debb:       int3
    0.00 :   ffffffff9487debc:       int3
    0.00 :   ffffffff9487debd:       int3
    0.00 :   ffffffff9487debe:       testb  $0x4,0x47(%rbx)
    0.00 :   ffffffff9487dec2:       jne    0xffffffff9487df12
    0.00 :   ffffffff9487dec4:       mov    0x18(%rbx),%rdi
    0.00 :   ffffffff9487dec8:       mov    0x30(%rdi),%r9
    0.00 :   ffffffff9487decc:       mov    0x28(%r9),%rax
    0.00 :   ffffffff9487ded0:       mov    0x478(%rax),%rax
    0.00 :   ffffffff9487ded7:       test   %rax,%rax
    0.00 :   ffffffff9487deda:       je     0xffffffff9487df12
    0.00 :   ffffffff9487dedc:       movzwl (%r9),%eax
    0.00 :   ffffffff9487dee0:       lea    0x10(%rbx),%r11
    0.00 :   ffffffff9487dee4:       mov    $0x2,%r10d
    0.00 :   ffffffff9487deea:       and    $0xf000,%ax
    0.00 :   ffffffff9487deee:       cmp    $0x4000,%ax
    0.00 :   ffffffff9487def2:       je     0xffffffff9487e08a
    0.00 :   ffffffff9487def8:       cmp    0x18(%rdi),%rdi
    0.00 :   ffffffff9487defc:       je     0xffffffff9487e09c
    0.00 :   ffffffff9487df02:       mov    $0x1,%ecx
    0.00 :   ffffffff9487df07:       mov    %r11,%rdx
    0.00 :   ffffffff9487df0a:       mov    %r10d,%esi
    0.00 :   ffffffff9487df0d:       call   0xffffffff948df5b0
    0.00 :   ffffffff9487df12:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff9487df1b:       add    %r12,0xd28(%rax)
    0.00 :   ffffffff9487df22:       jmp    0xffffffff9487de25
    0.00 :   ffffffff9487df27:       mov    0x28(%rdx),%r14
    0.00 :   ffffffff9487df2b:       call   0xffffffff954a3e50
    0.00 :   ffffffff9487df30:       incl   %gs:0x6b7b3911(%rip)        # 0x31848
    0.00 :   ffffffff9487df37:       mov    0x278(%r14),%eax
    0.00 :   ffffffff9487df3e:       test   %eax,%eax
    0.00 :   ffffffff9487df40:       jne    0xffffffff9487e0b9
    0.00 :   ffffffff9487df46:       mov    0x2a8(%r14),%rax
    0.00 :   ffffffff9487df4d:       incl   %gs:(%rax)
    0.00 :   ffffffff9487df50:       decl   %gs:0x6b7b38f1(%rip)        # 0x31848
    0.00 :   ffffffff9487df57:       jne    0xffffffff9487ddf7
    0.00 :   ffffffff9487df5d:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9487df62:       jmp    0xffffffff9487ddf7
    0.00 :   ffffffff9487df67:       cmpq   $0x0,0x28(%rdx)
    0.00 :   ffffffff9487df6c:       je     0xffffffff9487e028
    0.00 :   ffffffff9487df72:       mov    (%rbx),%r14d
    0.00 :   ffffffff9487df75:       mov    %gs:0x31840,%rdi
    0.00 :   ffffffff9487df7e:       call   0xffffffff94b4f0e0
    0.00 :   ffffffff9487df83:       movq   $0x0,-0x40(%rbp)
    0.00 :   ffffffff9487df8b:       movq   $0x0,-0x58(%rbp)
    0.00 :   ffffffff9487df93:       movq   $0x0,-0x50(%rbp)
    0.00 :   ffffffff9487df9b:       movq   $0x0,-0x48(%rbp)
    0.00 :   ffffffff9487dfa3:       movq   $0x0,-0x38(%rbp)
    0.00 :   ffffffff9487dfab:       mov    %rbx,-0x60(%rbp)
    0.00 :   ffffffff9487dfaf:       mov    %r14d,-0x40(%rbp)
    0.00 :   ffffffff9487dfb3:       mov    %ax,-0x3c(%rbp)
    0.00 :   ffffffff9487dfb7:       test   %r15,%r15
    0.00 :   ffffffff9487dfba:       je     0xffffffff9487e034
    0.00 :   ffffffff9487dfbc:       mov    (%r15),%rax
    0.00 :   ffffffff9487dfbf:       mov    %r12,-0x78(%rbp)
    0.00 :   ffffffff9487dfc3:       lea    -0x60(%rbp),%rdi
    0.00 :   ffffffff9487dfc7:       lea    -0x88(%rbp),%rsi
    0.00 :   ffffffff9487dfce:       movq   $0x0,-0x88(%rbp)
    0.00 :   ffffffff9487dfd9:       mov    %rax,-0x58(%rbp)
    0.00 :   ffffffff9487dfdd:       mov    0x28(%rbx),%rax
    0.00 :   ffffffff9487dfe1:       movq   $0x0,-0x80(%rbp)
    0.00 :   ffffffff9487dfe9:       movq   $0x0,-0x68(%rbp)
    0.00 :   ffffffff9487dff1:       mov    0x28(%rax),%rax
    0.00 :   ffffffff9487dff5:       movl   $0x1010006,-0x88(%rbp)
    0.00 :   ffffffff9487dfff:       mov    %r13,-0x70(%rbp)
    0.00 :   ffffffff9487e003:       call   *%rax
    0.00 :   ffffffff9487e005:       nopl   (%rax)
    0.00 :   ffffffff9487e008:       mov    %rax,%r12
    0.00 :   ffffffff9487e00b:       cmp    $0xfffffffffffffdef,%rax
    0.00 :   ffffffff9487e011:       je     0xffffffff9487e088
    0.00 :   ffffffff9487e013:       test   %rax,%rax
    0.00 :   ffffffff9487e016:       jle    0xffffffff9487de25
    0.00 :   ffffffff9487e01c:       mov    -0x58(%rbp),%rax
    0.00 :   ffffffff9487e020:       mov    %rax,(%r15)
    0.00 :   ffffffff9487e023:       jmp    0xffffffff9487de1c
    0.00 :   ffffffff9487e028:       mov    $0xffffffffffffffea,%r12
    0.00 :   ffffffff9487e02f:       jmp    0xffffffff9487de25
    0.00 :   ffffffff9487e034:       mov    0x28(%rbx),%rax
    0.00 :   ffffffff9487e038:       mov    %r12,-0x78(%rbp)
    0.00 :   ffffffff9487e03c:       lea    -0x60(%rbp),%rdi
    0.00 :   ffffffff9487e040:       lea    -0x88(%rbp),%rsi
    0.00 :   ffffffff9487e047:       movq   $0x0,-0x88(%rbp)
    0.00 :   ffffffff9487e052:       movq   $0x0,-0x80(%rbp)
    0.00 :   ffffffff9487e05a:       movq   $0x0,-0x68(%rbp)
    0.00 :   ffffffff9487e062:       mov    0x28(%rax),%rax
    0.00 :   ffffffff9487e066:       movl   $0x1010006,-0x88(%rbp)
    0.00 :   ffffffff9487e070:       mov    %r13,-0x70(%rbp)
    0.00 :   ffffffff9487e074:       call   *%rax
    0.00 :   ffffffff9487e076:       nopl   (%rax)
    0.00 :   ffffffff9487e079:       mov    %rax,%r12
    0.00 :   ffffffff9487e07c:       cmp    $0xfffffffffffffdef,%rax
    0.00 :   ffffffff9487e082:       jne    0xffffffff9487de1c
    0.00 :   ffffffff9487e088:       ud2
    0.00 :   ffffffff9487e08a:       mov    $0x40000002,%r10d
    0.00 :   ffffffff9487e090:       testl  $0x4000,(%rdi)
    0.00 :   ffffffff9487e096:       jne    0xffffffff9487def8
    0.00 :   ffffffff9487e09c:       push   $0x0
    0.00 :   ffffffff9487e09e:       xor    %r8d,%r8d
    0.00 :   ffffffff9487e0a1:       xor    %ecx,%ecx
    0.00 :   ffffffff9487e0a3:       mov    $0x1,%edx
    0.00 :   ffffffff9487e0a8:       mov    %r11,%rsi
    0.00 :   ffffffff9487e0ab:       mov    %r10d,%edi
    0.00 :   ffffffff9487e0ae:       call   0xffffffff948dece0
    0.00 :   ffffffff9487e0b3:       pop    %rax
    0.00 :   ffffffff9487e0b4:       jmp    0xffffffff9487df12
    0.00 :   ffffffff9487e0b9:       lea    0x278(%r14),%rdi
    0.00 :   ffffffff9487e0c0:       xor    %esi,%esi
    0.00 :   ffffffff9487e0c2:       call   0xffffffff954a7be0
    0.00 :   ffffffff9487e0c7:       jmp    0xffffffff9487df50
    0.00 :   ffffffff9487e0cc:       lock addl $0x0,-0x4(%rsp)
    0.00 :   ffffffff9487e0d2:       mov    0x2a8(%rax),%rdx
    0.00 :   ffffffff9487e0d9:       decl   %gs:(%rdx)
    0.00 :   ffffffff9487e0dc:       lea    0x2b0(%rax),%rdi
    0.00 :   ffffffff9487e0e3:       call   0xffffffff944eeb20
    0.00 :   ffffffff9487e0e8:       jmp    0xffffffff9487de6a
    0.00 :   ffffffff9487e0ed:       mov    $0xfffffffffffffff7,%r12
    0.00 :   ffffffff9487e0f4:       jmp    0xffffffff9487de81
    0.00 :   ffffffff9487e0f9:       mov    $0xffffffffffffffea,%r12
    0.00 :   ffffffff9487e100:       jmp    0xffffffff9487de81
    0.00 :   ffffffff9487e105:       call   0xffffffff95496a20
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94579bb0 <load0>:
    0.00 :   ffffffff94579bb0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94579bb5:       push   %rbp
    0.00 :   ffffffff94579bb6:       mov    %rsp,%rbp
    0.00 :   ffffffff94579bb9:       push   %r15
    0.00 :   ffffffff94579bbb:       push   %r14
    0.00 :   ffffffff94579bbd:       push   %r13
    0.00 :   ffffffff94579bbf:       push   %r12
    0.00 :   ffffffff94579bc1:       push   %rbx
    0.00 :   ffffffff94579bc2:       mov    0x998(%rdi),%eax
    0.00 :   ffffffff94579bc8:       mov    0x14(%rdi),%r14d
    0.00 :   ffffffff94579bcc:       test   %eax,%eax
    0.00 :   ffffffff94579bce:       jne    0xffffffff94579bef
    0.00 :   ffffffff94579bd0:       pop    %rbx
    0.00 :   ffffffff94579bd1:       pop    %r12
    0.00 :   ffffffff94579bd3:       pop    %r13
    0.00 :   ffffffff94579bd5:       pop    %r14
    0.00 :   ffffffff94579bd7:       pop    %r15
    0.00 :   ffffffff94579bd9:       pop    %rbp
    0.00 :   ffffffff94579bda:       xor    %eax,%eax
    0.00 :   ffffffff94579bdc:       xor    %edx,%edx
    0.00 :   ffffffff94579bde:       xor    %ecx,%ecx
    0.00 :   ffffffff94579be0:       xor    %esi,%esi
    0.00 :   ffffffff94579be2:       xor    %edi,%edi
    0.00 :   ffffffff94579be4:       xor    %r8d,%r8d
    0.00 :   ffffffff94579be7:       xor    %r9d,%r9d
    0.00 :   ffffffff94579bea:       ret
    0.00 :   ffffffff94579beb:       int3
    0.00 :   ffffffff94579bec:       int3
    0.00 :   ffffffff94579bed:       int3
    0.00 :   ffffffff94579bee:       int3
    0.00 :   ffffffff94579bef:       mov    %rdi,%rbx
    0.00 :   ffffffff94579bf2:       mov    %esi,%r12d
    0.00 :   ffffffff94579bf5:       mov    %edx,%r13d
    0.00 :   ffffffff94579bf8:       call   0xffffffff94567040
    0.00 :   ffffffff94579bfd:       mov    %r14d,%edi
    0.00 :   ffffffff94579c00:       call   0xffffffff9456e250
    0.00 :   ffffffff94579c05:       mov    %rax,%r15
    0.00 :   ffffffff94579c08:       xchg   %ax,%ax
  100.00 :   ffffffff94579c0a:       mov    0xe08(%rbx),%rax
    0.00 :   ffffffff94579c11:       mov    $0xffffffff96698460,%rbx
    0.00 :   ffffffff94579c18:       mov    0x80(%rax),%rax
    0.00 :   ffffffff94579c1f:       mov    0xf8(%rax),%rdx
    0.00 :   ffffffff94579c26:       cmpq   $0x1,0x68(%rdx)
    0.00 :   ffffffff94579c2b:       je     0xffffffff94579c34
    0.00 :   ffffffff94579c2d:       mov    0x470(%rax),%rbx
    0.00 :   ffffffff94579c34:       mov    %rbx,%rdi
    0.00 :   ffffffff94579c37:       mov    $0x1,%r9d
    0.00 :   ffffffff94579c3d:       mov    %r15,%r8
    0.00 :   ffffffff94579c40:       mov    %r13d,%ecx
    0.00 :   ffffffff94579c43:       mov    %r12d,%edx
    0.00 :   ffffffff94579c46:       mov    %r14d,%esi
    0.00 :   ffffffff94579c49:       call   0xffffffff94569090
    0.00 :   ffffffff94579c4e:       mov    (%rbx),%rbx
    0.00 :   ffffffff94579c51:       test   %rbx,%rbx
    0.00 :   ffffffff94579c54:       jne    0xffffffff94579c34
    0.00 :   ffffffff94579c56:       pop    %rbx
    0.00 :   ffffffff94579c57:       pop    %r12
    0.00 :   ffffffff94579c59:       pop    %r13
    0.00 :   ffffffff94579c5b:       pop    %r14
    0.00 :   ffffffff94579c5d:       pop    %r15
    0.00 :   ffffffff94579c5f:       pop    %rbp
    0.00 :   ffffffff94579c60:       xor    %eax,%eax
    0.00 :   ffffffff94579c62:       xor    %edx,%edx
    0.00 :   ffffffff94579c64:       xor    %ecx,%ecx
    0.00 :   ffffffff94579c66:       xor    %esi,%esi
    0.00 :   ffffffff94579c68:       xor    %edi,%edi
    0.00 :   ffffffff94579c6a:       xor    %r8d,%r8d
    0.00 :   ffffffff94579c6d:       xor    %r9d,%r9d
    0.00 :   ffffffff94579c70:       ret
    0.00 :   ffffffff94579c71:       int3
    0.00 :   ffffffff94579c72:       int3
    0.00 :   ffffffff94579c73:       int3
    0.00 :   ffffffff94579c74:       int3
    0.00 :   ffffffff94579c75:       mov    $0xffffffff96698460,%rbx
    0.00 :   ffffffff94579c7c:       jmp    0xffffffff94579c34
    0.00 :   ffffffff94579c7e:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94569090 <load0>:
    0.00 :   ffffffff94569090:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94569095:       push   %rbp
    0.00 :   ffffffff94569096:       movslq %esi,%rax
    0.00 :   ffffffff94569099:       mov    %rsp,%rbp
    0.00 :   ffffffff9456909c:       push   %r15
    0.00 :   ffffffff9456909e:       push   %r14
    0.00 :   ffffffff945690a0:       push   %r13
    0.00 :   ffffffff945690a2:       mov    %ecx,%r13d
    0.00 :   ffffffff945690a5:       push   %r12
    0.00 :   ffffffff945690a7:       push   %rbx
    0.00 :   ffffffff945690a8:       sub    $0x38,%rsp
    0.00 :   ffffffff945690ac:       mov    %rdi,-0x38(%rbp)
    0.00 :   ffffffff945690b0:       mov    0x30(%rdi),%r14
    0.00 :   ffffffff945690b4:       mov    %esi,-0x44(%rbp)
    0.00 :   ffffffff945690b7:       mov    %edx,-0x30(%rbp)
    0.00 :   ffffffff945690ba:       mov    %r8,-0x58(%rbp)
    0.00 :   ffffffff945690be:       mov    %r9d,-0x50(%rbp)
    0.00 :   ffffffff945690c2:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff945690c6:       cmp    $0x1fff,%rax
    0.00 :   ffffffff945690cc:       ja     0xffffffff94569576
    0.00 :   ffffffff945690d2:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff945690d6:       add    -0x6a1a1540(,%rax,8),%r14
    0.00 :   ffffffff945690de:       addl   $0x1,(%r14)
    0.00 :   ffffffff945690e2:       testb  $0x10,-0x30(%rbp)
    0.00 :   ffffffff945690e6:       jne    0xffffffff94569488
    0.00 :   ffffffff945690ec:       test   $0x10,%r13b
    0.00 :   ffffffff945690f0:       jne    0xffffffff94569494
    0.00 :   ffffffff945690f6:       mov    0x14(%r14),%r11d
    0.00 :   ffffffff945690fa:       and    $0x80,%r11d
    0.00 :   ffffffff94569101:       mov    -0x30(%rbp),%eax
    0.00 :   ffffffff94569104:       xor    %r12d,%r12d
    0.00 :   ffffffff94569107:       mov    %eax,%r15d
    0.00 :   ffffffff9456910a:       test   %eax,%eax
    0.00 :   ffffffff9456910c:       je     0xffffffff945691ce
    0.00 :   ffffffff94569112:       mov    %r11d,-0x4c(%rbp)
    0.00 :   ffffffff94569116:       mov    %r13d,%r11d
    0.00 :   ffffffff94569119:       jmp    0xffffffff94569146
    0.00 :   ffffffff9456911b:       cmp    $0x3,%r13
    0.00 :   ffffffff9456911f:       ja     0xffffffff94569554
    0.00 :   ffffffff94569125:       sub    $0x1,%eax
    0.00 :   ffffffff94569128:       mov    %eax,0x4(%r14,%r13,4)
    0.00 :   ffffffff9456912d:       cmp    $0x1f,%r12d
    0.00 :   ffffffff94569131:       ja     0xffffffff9543216d
    0.00 :   ffffffff94569137:       not    %ebx
    0.00 :   ffffffff94569139:       add    $0x1,%r12d
    0.00 :   ffffffff9456913d:       and    %ebx,%r15d
    0.00 :   ffffffff94569140:       je     0xffffffff945691c7
    0.00 :   ffffffff94569146:       mov    $0x1,%ebx
    0.00 :   ffffffff9456914b:       mov    %r12d,%ecx
    0.00 :   ffffffff9456914e:       shl    %cl,%ebx
    0.00 :   ffffffff94569150:       mov    %ebx,%eax
    0.00 :   ffffffff94569152:       and    %r15d,%eax
    0.00 :   ffffffff94569155:       cmp    $0x1f,%r12d
    0.00 :   ffffffff94569159:       ja     0xffffffff95432140
    0.00 :   ffffffff9456915f:       mov    %r12d,%r13d
    0.00 :   ffffffff94569162:       test   %eax,%eax
    0.00 :   ffffffff94569164:       je     0xffffffff94569137
    0.00 :   ffffffff94569166:       cmp    $0x3,%r13
    0.00 :   ffffffff9456916a:       ja     0xffffffff9456950e
    0.00 :   ffffffff94569170:       mov    0x4(%r14,%r13,4),%eax
    0.00 :   ffffffff94569175:       test   %eax,%eax
    0.00 :   ffffffff94569177:       jne    0xffffffff9456911b
    0.00 :   ffffffff94569179:       mov    0x2498229(%rip),%ecx        # 0xffffffff96a013a8
    0.00 :   ffffffff9456917f:       test   %ecx,%ecx
    0.00 :   ffffffff94569181:       jne    0xffffffff9456912d
    0.00 :   ffffffff94569183:       mov    -0x30(%rbp),%eax
    0.00 :   ffffffff94569186:       mov    0xc(%r14),%r9d
    0.00 :   ffffffff9456918a:       mov    %r12d,%edx
    0.00 :   ffffffff9456918d:       mov    %r11d,-0x48(%rbp)
    0.00 :   ffffffff94569191:       mov    0x8(%r14),%r8d
    0.00 :   ffffffff94569195:       mov    0x4(%r14),%ecx
    0.00 :   ffffffff94569199:       push   %r11
    0.00 :   ffffffff9456919b:       mov    $0xffffffff95d301c0,%rdi
    0.00 :   ffffffff945691a2:       push   %rax
    0.00 :   ffffffff945691a3:       mov    0x10(%r14),%eax
    0.00 :   ffffffff945691a7:       mov    -0x44(%rbp),%esi
    0.00 :   ffffffff945691aa:       push   %rax
    0.00 :   ffffffff945691ab:       call   0xffffffff94591240
    0.00 :   ffffffff945691b0:       mov    -0x48(%rbp),%r11d
    0.00 :   ffffffff945691b4:       movl   $0x1,0x24981ea(%rip)        # 0xffffffff96a013a8
    0.00 :   ffffffff945691be:       add    $0x18,%rsp
    0.00 :   ffffffff945691c2:       jmp    0xffffffff9456912d
    0.00 :   ffffffff945691c7:       mov    %r11d,%r13d
    0.00 :   ffffffff945691ca:       mov    -0x4c(%rbp),%r11d
    0.00 :   ffffffff945691ce:       xor    %ecx,%ecx
    0.00 :   ffffffff945691d0:       mov    $0x1,%r12d
    0.00 :   ffffffff945691d6:       test   %r13d,%r13d
    0.00 :   ffffffff945691d9:       je     0xffffffff9456920f
    0.00 :   ffffffff945691db:       mov    %r12d,%ebx
    0.00 :   ffffffff945691de:       shl    %cl,%ebx
    0.00 :   ffffffff945691e0:       mov    %ebx,%r15d
    0.00 :   ffffffff945691e3:       and    %r13d,%r15d
    0.00 :   ffffffff945691e6:       cmp    $0x1f,%ecx
    0.00 :   ffffffff945691e9:       ja     0xffffffff9543218e
    0.00 :   ffffffff945691ef:       test   %r15d,%r15d
    0.00 :   ffffffff945691f2:       je     0xffffffff94569205
    0.00 :   ffffffff945691f4:       mov    %ecx,%edx
    0.00 :   ffffffff945691f6:       cmp    $0x3,%ecx
    0.00 :   ffffffff945691f9:       ja     0xffffffff9456952a
    0.00 :   ffffffff945691ff:       addl   $0x1,0x4(%r14,%rdx,4)
    0.00 :   ffffffff94569205:       not    %ebx
    0.00 :   ffffffff94569207:       add    $0x1,%ecx
    0.00 :   ffffffff9456920a:       and    %ebx,%r13d
    0.00 :   ffffffff9456920d:       jne    0xffffffff945691db
    0.00 :   ffffffff9456920f:       mov    -0x38(%rbp),%rax
    0.00 :   ffffffff94569213:       movzbl 0x8(%rax),%ebx
    0.00 :   ffffffff94569217:       cmp    $0x1,%bl
    0.00 :   ffffffff9456921a:       ja     0xffffffff945695a7
    0.00 :   ffffffff94569220:       and    $0x1,%ebx
    0.00 :   ffffffff94569223:       mov    $0x1,%eax
    0.00 :   ffffffff94569228:       mov    $0x1,%edi
    0.00 :   ffffffff9456922d:       jne    0xffffffff9456926c
    0.00 :   ffffffff9456922f:       jmp    0xffffffff9456944c
    0.00 :   ffffffff94569234:       cmp    $0x1,%ecx
    0.00 :   ffffffff94569237:       je     0xffffffff9456934c
    0.00 :   ffffffff9456923d:       cmp    $0x2,%ecx
    0.00 :   ffffffff94569240:       jne    0xffffffff94569317
    0.00 :   ffffffff94569246:       mov    0x8(%r14),%r12d
    0.00 :   ffffffff9456924a:       test   %r12d,%r12d
    0.00 :   ffffffff9456924d:       setne  %dl
    0.00 :   ffffffff94569250:       test   %dl,%dl
    0.00 :   ffffffff94569252:       je     0xffffffff94569264
    0.00 :   ffffffff94569254:       mov    %edi,%edx
    0.00 :   ffffffff94569256:       shl    %cl,%edx
    0.00 :   ffffffff94569258:       or     %edx,%r11d
    0.00 :   ffffffff9456925b:       mov    %r11d,%esi
    0.00 :   ffffffff9456925e:       and    $0x80,%esi
    0.00 :   ffffffff94569264:       cmp    $0x7,%eax
    0.00 :   ffffffff94569267:       je     0xffffffff945692af
    0.00 :   ffffffff94569269:       add    $0x1,%eax
    0.00 :   ffffffff9456926c:       mov    %r11d,%esi
    0.00 :   ffffffff9456926f:       lea    -0x1(%rax),%ecx
    0.00 :   ffffffff94569272:       and    $0x80,%esi
    0.00 :   ffffffff94569278:       cmp    $0x3,%ecx
    0.00 :   ffffffff9456927b:       je     0xffffffff94569385
    0.00 :   ffffffff94569281:       jbe    0xffffffff94569234
    0.00 :   ffffffff94569283:       cmp    $0x5,%ecx
    0.00 :   ffffffff94569286:       je     0xffffffff9456936b
    0.00 :   ffffffff9456928c:       cmp    $0x6,%ecx
    0.00 :   ffffffff9456928f:       jne    0xffffffff94569330
    0.00 :   ffffffff94569295:       mov    0x4(%r14),%r9d
    0.00 :   ffffffff94569299:       test   %r9d,%r9d
    0.00 :   ffffffff9456929c:       jne    0xffffffff94569254
    0.00 :   ffffffff9456929e:       mov    0x8(%r14),%r8d
    0.00 :   ffffffff945692a2:       test   %r8d,%r8d
    0.00 :   ffffffff945692a5:       jne    0xffffffff94569254
    0.00 :   ffffffff945692a7:       mov    0xc(%r14),%edx
    0.00 :   ffffffff945692ab:       test   %edx,%edx
    0.00 :   ffffffff945692ad:       jne    0xffffffff94569254
    0.00 :   ffffffff945692af:       test   %esi,%esi
    0.00 :   ffffffff945692b1:       jne    0xffffffff945694a3
    0.00 :   ffffffff945692b7:       mov    -0x58(%rbp),%rsi
    0.00 :   ffffffff945692bb:       mov    %r14,%rdi
    0.00 :   ffffffff945692be:       mov    %r11d,-0x30(%rbp)
    0.00 :   ffffffff945692c2:       call   0xffffffff945657a0
    0.00 :   ffffffff945692c7:       mov    -0x30(%rbp),%r11d
    0.00 :   ffffffff945692cb:       mov    %r11d,0x14(%r14)
    0.00 :   ffffffff945692cf:       mov    -0x38(%rbp),%rax
    0.00 :   ffffffff945692d3:       addl   $0x1,(%r14)
    0.00 :   ffffffff945692d7:       and    0x258(%rax),%r11d
    0.00 :   ffffffff945692de:       jne    0xffffffff945693a4
    0.00 :   ffffffff945692e4:       cmpb   $0x0,-0x50(%rbp)
    0.00 :   ffffffff945692e8:       jne    0xffffffff945693f5
    0.00 :   ffffffff945692ee:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff945692f2:       pop    %rbx
    0.00 :   ffffffff945692f3:       pop    %r12
    0.00 :   ffffffff945692f5:       pop    %r13
    0.00 :   ffffffff945692f7:       pop    %r14
    0.00 :   ffffffff945692f9:       pop    %r15
    0.00 :   ffffffff945692fb:       pop    %rbp
    0.00 :   ffffffff945692fc:       xor    %eax,%eax
    0.00 :   ffffffff945692fe:       xor    %edx,%edx
    0.00 :   ffffffff94569300:       xor    %ecx,%ecx
    0.00 :   ffffffff94569302:       xor    %esi,%esi
    0.00 :   ffffffff94569304:       xor    %edi,%edi
    0.00 :   ffffffff94569306:       xor    %r8d,%r8d
    0.00 :   ffffffff94569309:       xor    %r9d,%r9d
    0.00 :   ffffffff9456930c:       xor    %r10d,%r10d
    0.00 :   ffffffff9456930f:       xor    %r11d,%r11d
    0.00 :   ffffffff94569312:       ret
    0.00 :   ffffffff94569313:       int3
    0.00 :   ffffffff94569314:       int3
    0.00 :   ffffffff94569315:       int3
    0.00 :   ffffffff94569316:       int3
    0.00 :   ffffffff94569317:       test   %ecx,%ecx
    0.00 :   ffffffff94569319:       jne    0xffffffff94569269
    0.00 :   ffffffff9456931f:       mov    0x4(%r14),%edx
    0.00 :   ffffffff94569323:       test   %edx,%edx
    0.00 :   ffffffff94569325:       jne    0xffffffff94569254
    0.00 :   ffffffff9456932b:       jmp    0xffffffff94569264
    0.00 :   ffffffff94569330:       cmp    $0x4,%ecx
    0.00 :   ffffffff94569333:       jne    0xffffffff94569264
    0.00 :   ffffffff94569339:       xor    %edx,%edx
    0.00 :   ffffffff9456933b:       test   %esi,%esi
    0.00 :   ffffffff9456933d:       setne  %dl
    0.00 :   ffffffff94569340:       cmp    %edx,0xc(%r14)
    0.00 :   ffffffff94569344:       seta   %dl
    0.00 :   ffffffff94569347:       jmp    0xffffffff94569250
    0.00 :   ffffffff9456934c:       mov    0x4(%r14),%r15d
    0.00 :   ffffffff94569350:       test   %r15d,%r15d
    0.00 :   ffffffff94569353:       je     0xffffffff94569269
    0.00 :   ffffffff94569359:       mov    0xc(%r14),%r13d
    0.00 :   ffffffff9456935d:       test   %r13d,%r13d
    0.00 :   ffffffff94569360:       jne    0xffffffff94569269
    0.00 :   ffffffff94569366:       jmp    0xffffffff94569254
    0.00 :   ffffffff9456936b:       mov    0xc(%r14),%r10d
    0.00 :   ffffffff9456936f:       test   %r10d,%r10d
    0.00 :   ffffffff94569372:       je     0xffffffff94569269
    0.00 :   ffffffff94569378:       test   %esi,%esi
    0.00 :   ffffffff9456937a:       je     0xffffffff94569254
    0.00 :   ffffffff94569380:       jmp    0xffffffff94569269
    0.00 :   ffffffff94569385:       mov    0x8(%r14),%ebx
    0.00 :   ffffffff94569389:       test   %ebx,%ebx
    0.00 :   ffffffff9456938b:       je     0xffffffff94569269
    0.00 :   ffffffff94569391:       mov    0x10(%r14),%edx
    0.00 :   ffffffff94569395:       cmp    %edx,0xc(%r14)
    0.00 :   ffffffff94569399:       jne    0xffffffff94569269
    0.00 :   ffffffff9456939f:       jmp    0xffffffff94569254
    0.00 :   ffffffff945693a4:       mov    -0x38(%rbp),%rdi
    0.00 :   ffffffff945693a8:       mov    $0x1,%eax
    0.00 :   ffffffff945693ad:       xchg   %eax,0x20c(%rdi)
    0.00 :   ffffffff945693b3:       test   %eax,%eax
    0.00 :   ffffffff945693b5:       jne    0xffffffff945692e4
    0.00 :   ffffffff945693bb:       call   0xffffffff945ae9b0
    0.00 :   ffffffff945693c0:       mov    -0x38(%rbp),%rdi
    0.00 :   ffffffff945693c4:       mov    0x1c0(%rdi),%rax
    0.00 :   ffffffff945693cb:       test   %rax,%rax
    0.00 :   ffffffff945693ce:       je     0xffffffff945694fb
    0.00 :   ffffffff945693d4:       mov    0x209e5e5(%rip),%rsi        # 0xffffffff966079c0
    0.00 :   ffffffff945693db:       add    $0x1c8,%rdi
    0.00 :   ffffffff945693e2:       add    $0x1,%rsi
    0.00 :   ffffffff945693e6:       call   0xffffffff945d6a10
    0.00 :   ffffffff945693eb:       call   0xffffffff945b5a30
    0.00 :   ffffffff945693f0:       jmp    0xffffffff945692e4
    0.00 :   ffffffff945693f5:       mov    -0x38(%rbp),%rax
    0.00 :   ffffffff945693f9:       mov    0x78(%rax),%rax
    0.00 :   ffffffff945693fd:       test   $0x1,%al
    0.00 :   ffffffff945693ff:       jne    0xffffffff945692ee
    0.00 :   ffffffff94569405:       mov    -0x38(%rbp),%rdx
    0.00 :   ffffffff94569409:       mov    $0x1f5,%ecx
    0.00 :   ffffffff9456940e:       mov    $0x2000,%edi
    0.00 :   ffffffff94569413:       mov    0x2497f3e(%rip),%rsi        # 0xffffffff96a01358
    0.00 :   ffffffff9456941a:       add    $0x78,%rdx
    0.00 :   ffffffff9456941e:       call   0xffffffff94512ec0
    0.00 :   ffffffff94569423:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff94569427:       pop    %rbx
    0.00 :   ffffffff94569428:       pop    %r12
    0.00 :   ffffffff9456942a:       pop    %r13
    0.00 :   ffffffff9456942c:       pop    %r14
    0.00 :   ffffffff9456942e:       pop    %r15
    0.00 :   ffffffff94569430:       pop    %rbp
    0.00 :   ffffffff94569431:       xor    %eax,%eax
    0.00 :   ffffffff94569433:       xor    %edx,%edx
    0.00 :   ffffffff94569435:       xor    %ecx,%ecx
    0.00 :   ffffffff94569437:       xor    %esi,%esi
    0.00 :   ffffffff94569439:       xor    %edi,%edi
    0.00 :   ffffffff9456943b:       xor    %r8d,%r8d
    0.00 :   ffffffff9456943e:       xor    %r9d,%r9d
    0.00 :   ffffffff94569441:       xor    %r10d,%r10d
    0.00 :   ffffffff94569444:       xor    %r11d,%r11d
    0.00 :   ffffffff94569447:       ret
    0.00 :   ffffffff94569448:       int3
    0.00 :   ffffffff94569449:       int3
    0.00 :   ffffffff9456944a:       int3
    0.00 :   ffffffff9456944b:       int3
    0.00 :   ffffffff9456944c:       testb  $0x40,0x14(%r14)
    0.00 :   ffffffff94569451:       jne    0xffffffff945694e2
    0.00 :   ffffffff94569457:       mov    %r11d,0x14(%r14)
    0.00 :   ffffffff9456945b:       addl   $0x1,(%r14)
    0.00 :   ffffffff9456945f:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff94569463:       pop    %rbx
    0.00 :   ffffffff94569464:       pop    %r12
    0.00 :   ffffffff94569466:       pop    %r13
    0.00 :   ffffffff94569468:       pop    %r14
    0.00 :   ffffffff9456946a:       pop    %r15
    0.00 :   ffffffff9456946c:       pop    %rbp
    0.00 :   ffffffff9456946d:       xor    %eax,%eax
    0.00 :   ffffffff9456946f:       xor    %edx,%edx
    0.00 :   ffffffff94569471:       xor    %ecx,%ecx
    0.00 :   ffffffff94569473:       xor    %esi,%esi
    0.00 :   ffffffff94569475:       xor    %edi,%edi
    0.00 :   ffffffff94569477:       xor    %r8d,%r8d
    0.00 :   ffffffff9456947a:       xor    %r9d,%r9d
    0.00 :   ffffffff9456947d:       xor    %r10d,%r10d
    0.00 :   ffffffff94569480:       xor    %r11d,%r11d
    0.00 :   ffffffff94569483:       ret
    0.00 :   ffffffff94569484:       int3
    0.00 :   ffffffff94569485:       int3
    0.00 :   ffffffff94569486:       int3
    0.00 :   ffffffff94569487:       int3
    0.00 :   ffffffff94569488:       andl   $0xffffffef,-0x30(%rbp)
    0.00 :   ffffffff9456948c:       xor    %r11d,%r11d
    0.00 :   ffffffff9456948f:       jmp    0xffffffff94569101
    0.00 :   ffffffff94569494:       and    $0xffffffef,%r13d
    0.00 :   ffffffff94569498:       mov    $0x80,%r11d
    0.00 :   ffffffff9456949e:       jmp    0xffffffff94569101
    0.00 :   ffffffff945694a3:       mov    $0x31fc0,%rbx
    0.00 :   ffffffff945694aa:       cmpq   $0x1fff,-0x40(%rbp)
    0.00 :   ffffffff945694b2:       ja     0xffffffff9456958a
    0.00 :   ffffffff945694b8:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff945694bc:       mov    -0x6a1a1540(,%rax,8),%rax
    0.00 :   ffffffff945694c4:       mov    0x9e0(%rbx,%rax,1),%rdx
    0.00 :   ffffffff945694cc:       mov    %r11d,%eax
    0.00 :   ffffffff945694cf:       or     $0x8,%eax
  100.00 :   ffffffff945694d2:       testb  $0x2,0x951(%rdx)
    0.00 :   ffffffff945694d9:       cmovne %eax,%r11d
    0.00 :   ffffffff945694dd:       jmp    0xffffffff945692b7
    0.00 :   ffffffff945694e2:       mov    -0x58(%rbp),%rsi
    0.00 :   ffffffff945694e6:       mov    %r14,%rdi
    0.00 :   ffffffff945694e9:       mov    %r11d,-0x30(%rbp)
    0.00 :   ffffffff945694ed:       call   0xffffffff945657a0
    0.00 :   ffffffff945694f2:       mov    -0x30(%rbp),%r11d
    0.00 :   ffffffff945694f6:       jmp    0xffffffff94569457
    0.00 :   ffffffff945694fb:       mov    -0x38(%rbp),%rax
    0.00 :   ffffffff945694ff:       movl   $0x0,0x20c(%rax)
    0.00 :   ffffffff94569509:       jmp    0xffffffff945693eb
    0.00 :   ffffffff9456950e:       mov    %r13,%rsi
    0.00 :   ffffffff94569511:       mov    $0xffffffff96697620,%rdi
    0.00 :   ffffffff94569518:       mov    %r11d,-0x48(%rbp)
    0.00 :   ffffffff9456951c:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94569521:       mov    -0x48(%rbp),%r11d
    0.00 :   ffffffff94569525:       jmp    0xffffffff94569170
    0.00 :   ffffffff9456952a:       mov    %rdx,%rsi
    0.00 :   ffffffff9456952d:       mov    $0xffffffff966975a0,%rdi
    0.00 :   ffffffff94569534:       mov    %ecx,-0x48(%rbp)
    0.00 :   ffffffff94569537:       mov    %r11d,-0x44(%rbp)
    0.00 :   ffffffff9456953b:       mov    %rdx,-0x30(%rbp)
    0.00 :   ffffffff9456953f:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94569544:       mov    -0x48(%rbp),%ecx
    0.00 :   ffffffff94569547:       mov    -0x44(%rbp),%r11d
    0.00 :   ffffffff9456954b:       mov    -0x30(%rbp),%rdx
    0.00 :   ffffffff9456954f:       jmp    0xffffffff945691ff
    0.00 :   ffffffff94569554:       mov    %r13,%rsi
    0.00 :   ffffffff94569557:       mov    $0xffffffff96697600,%rdi
    0.00 :   ffffffff9456955e:       mov    %r11d,-0x5c(%rbp)
    0.00 :   ffffffff94569562:       mov    %eax,-0x48(%rbp)
    0.00 :   ffffffff94569565:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9456956a:       mov    -0x5c(%rbp),%r11d
    0.00 :   ffffffff9456956e:       mov    -0x48(%rbp),%eax
    0.00 :   ffffffff94569571:       jmp    0xffffffff94569125
    0.00 :   ffffffff94569576:       mov    %rax,%rsi
    0.00 :   ffffffff94569579:       mov    $0xffffffff96697660,%rdi
    0.00 :   ffffffff94569580:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94569585:       jmp    0xffffffff945690d2
    0.00 :   ffffffff9456958a:       mov    -0x40(%rbp),%rsi
    0.00 :   ffffffff9456958e:       mov    $0xffffffff966975e0,%rdi
    0.00 :   ffffffff94569595:       mov    %r11d,-0x30(%rbp)
    0.00 :   ffffffff94569599:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9456959e:       mov    -0x30(%rbp),%r11d
    0.00 :   ffffffff945695a2:       jmp    0xffffffff945694b8
    0.00 :   ffffffff945695a7:       jmp    0xffffffff954321ec
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94548260 <load0>:
    0.00 :   ffffffff94548260:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94548265:       push   %rbp
    0.00 :   ffffffff94548266:       mov    %rsp,%rbp
    0.00 :   ffffffff94548269:       push   %r15
    0.00 :   ffffffff9454826b:       push   %r14
    0.00 :   ffffffff9454826d:       lea    0x9c0(%rdi),%r14
    0.00 :   ffffffff94548274:       push   %r13
    0.00 :   ffffffff94548276:       push   %r12
    0.00 :   ffffffff94548278:       push   %rbx
    0.00 :   ffffffff94548279:       sub    $0x40,%rsp
    0.00 :   ffffffff9454827d:       mov    0x9c0(%rdi),%r12
    0.00 :   ffffffff94548284:       mov    %rdi,-0x68(%rbp)
    0.00 :   ffffffff94548288:       mov    %rsi,-0x38(%rbp)
    0.00 :   ffffffff9454828c:       movslq 0xaf8(%rdi),%r13
    0.00 :   ffffffff94548293:       mov    (%r12),%rcx
    0.00 :   ffffffff94548297:       cmp    %r14,%r12
    0.00 :   ffffffff9454829a:       je     0xffffffff945486e6
    0.00 :   ffffffff945482a0:       mov    0x4c(%r12),%r8d
    0.00 :   ffffffff945482a5:       movb   $0x0,-0x29(%rbp)
    0.00 :   ffffffff945482a9:       shl    $0x3,%r13
    0.00 :   ffffffff945482ad:       lea    -0x140(%r12),%rbx
    0.00 :   ffffffff945482b5:       lea    -0x140(%rcx),%r15
    0.00 :   ffffffff945482bc:       test   %r8d,%r8d
    0.00 :   ffffffff945482bf:       jne    0xffffffff94548463
    0.00 :   ffffffff945482c5:       mov    0x130(%rbx),%rax
    0.00 :   ffffffff945482cc:       cmpl   $0x1,0xa08(%rax)
    0.00 :   ffffffff945482d3:       jbe    0xffffffff94548715
    0.00 :   ffffffff945482d9:       mov    0xc4(%rbx),%edi
    0.00 :   ffffffff945482df:       mov    0xa48(%rax),%r8
    0.00 :   ffffffff945482e6:       sub    0x180(%rbx),%r8
    0.00 :   ffffffff945482ed:       sub    0xa50(%rax),%r8
    0.00 :   ffffffff945482f4:       test   %edi,%edi
    0.00 :   ffffffff945482f6:       jne    0xffffffff9454847f
    0.00 :   ffffffff945482fc:       mov    %rbx,%rsi
    0.00 :   ffffffff945482ff:       mov    %r8,%rdi
    0.00 :   ffffffff94548302:       call   0xffffffff94560310
    0.00 :   ffffffff94548307:       test   %eax,%eax
    0.00 :   ffffffff94548309:       jne    0xffffffff94548602
    0.00 :   ffffffff9454830f:       mov    0x150(%rbx),%rax
  100.00 :   ffffffff94548316:       mov    0xc8(%rax),%rax
    0.00 :   ffffffff9454831d:       mov    (%rax,%r13,1),%rsi
    0.00 :   ffffffff94548321:       test   %rsi,%rsi
    0.00 :   ffffffff94548324:       je     0xffffffff94548357
    0.00 :   ffffffff94548326:       cmpq   $0x0,0xe0(%rsi)
    0.00 :   ffffffff9454832e:       mov    0x80(%rsi),%rax
    0.00 :   ffffffff94548335:       jne    0xffffffff945486a3
    0.00 :   ffffffff9454833b:       cmpq   $0x0,0xf0(%rsi)
    0.00 :   ffffffff94548343:       jne    0xffffffff945486a3
    0.00 :   ffffffff94548349:       cmpq   $0x0,0x108(%rax)
    0.00 :   ffffffff94548351:       jne    0xffffffff945486a3
    0.00 :   ffffffff94548357:       cmpq   $0x0,(%rbx)
    0.00 :   ffffffff9454835b:       mov    0xa0(%rbx),%rax
    0.00 :   ffffffff94548362:       jne    0xffffffff94548414
    0.00 :   ffffffff94548368:       cmpq   $0x0,0x88(%rbx)
    0.00 :   ffffffff94548370:       jne    0xffffffff94548414
    0.00 :   ffffffff94548376:       mov    0x98(%rbx),%edx
    0.00 :   ffffffff9454837c:       test   %edx,%edx
    0.00 :   ffffffff9454837e:       jne    0xffffffff94548414
    0.00 :   ffffffff94548384:       cmpq   $0x0,0x90(%rbx)
    0.00 :   ffffffff9454838c:       jne    0xffffffff94548414
    0.00 :   ffffffff94548392:       test   %rax,%rax
    0.00 :   ffffffff94548395:       je     0xffffffff94548750
    0.00 :   ffffffff9454839b:       movzbl 0x246a996(%rip),%eax        # 0xffffffff969b2d38
    0.00 :   ffffffff945483a2:       cmp    $0x1,%al
    0.00 :   ffffffff945483a4:       ja     0xffffffff945487a3
    0.00 :   ffffffff945483aa:       test   $0x1,%al
    0.00 :   ffffffff945483ac:       je     0xffffffff9454877d
    0.00 :   ffffffff945483b2:       mov    0x138(%rbx),%eax
    0.00 :   ffffffff945483b8:       test   %eax,%eax
    0.00 :   ffffffff945483ba:       je     0xffffffff94548414
    0.00 :   ffffffff945483bc:       mov    0x148(%rbx),%rax
    0.00 :   ffffffff945483c3:       mov    0x150(%rbx),%rcx
    0.00 :   ffffffff945483ca:       mov    0x10(%rax),%rdx
    0.00 :   ffffffff945483ce:       cmp    %rcx,0x128(%rdx)
    0.00 :   ffffffff945483d5:       je     0xffffffff94548414
    0.00 :   ffffffff945483d7:       mov    0x130(%rbx),%rdx
    0.00 :   ffffffff945483de:       cmp    %r12,0x9d0(%rdx)
    0.00 :   ffffffff945483e5:       je     0xffffffff94548771
    0.00 :   ffffffff945483eb:       mov    0x140(%rbx),%rdx
    0.00 :   ffffffff945483f2:       mov    %rax,0x8(%rdx)
    0.00 :   ffffffff945483f6:       mov    %rdx,(%rax)
    0.00 :   ffffffff945483f9:       movabs $0xdead000000000122,%rax
    0.00 :   ffffffff94548403:       mov    %rax,0x148(%rbx)
    0.00 :   ffffffff9454840a:       movl   $0x0,0x138(%rbx)
    0.00 :   ffffffff94548414:       cmpq   $0x0,0xa0(%rbx)
    0.00 :   ffffffff9454841c:       jne    0xffffffff94548697
    0.00 :   ffffffff94548422:       cmpq   $0x0,0xb0(%rbx)
    0.00 :   ffffffff9454842a:       jne    0xffffffff94548697
    0.00 :   ffffffff94548430:       mov    0x140(%r15),%rax
    0.00 :   ffffffff94548437:       lea    0x140(%r15),%r12
    0.00 :   ffffffff9454843e:       mov    %r15,%rbx
    0.00 :   ffffffff94548441:       sub    $0x140,%rax
    0.00 :   ffffffff94548447:       cmp    %r14,%r12
    0.00 :   ffffffff9454844a:       je     0xffffffff945486ea
    0.00 :   ffffffff94548450:       mov    0x18c(%rbx),%r8d
    0.00 :   ffffffff94548457:       mov    %rax,%r15
    0.00 :   ffffffff9454845a:       test   %r8d,%r8d
    0.00 :   ffffffff9454845d:       je     0xffffffff945482c5
    0.00 :   ffffffff94548463:       mov    0xc4(%rbx),%edi
    0.00 :   ffffffff94548469:       mov    0x178(%rbx),%r8
    0.00 :   ffffffff94548470:       sub    0x180(%rbx),%r8
    0.00 :   ffffffff94548477:       test   %edi,%edi
    0.00 :   ffffffff94548479:       je     0xffffffff945482fc
    0.00 :   ffffffff9454847f:       mov    0x9c(%rbx),%eax
    0.00 :   ffffffff94548485:       lea    0xc0(%rbx),%rdi
    0.00 :   ffffffff9454848c:       mov    %r8,-0x60(%rbp)
    0.00 :   ffffffff94548490:       mov    %rdi,-0x58(%rbp)
    0.00 :   ffffffff94548494:       lea    0xb67e(%rax),%edx
    0.00 :   ffffffff9454849a:       mov    %edx,-0x30(%rbp)
    0.00 :   ffffffff9454849d:       call   0xffffffff954ac5a0
    0.00 :   ffffffff945484a2:       mov    0xd0(%rbx),%r10
    0.00 :   ffffffff945484a9:       mov    0xc8(%rbx),%r9
    0.00 :   ffffffff945484b0:       movq   $0x0,0xd0(%rbx)
    0.00 :   ffffffff945484bb:       mov    0xd8(%rbx),%rax
    0.00 :   ffffffff945484c2:       mov    -0x58(%rbp),%rdi
    0.00 :   ffffffff945484c6:       movq   $0x0,0xc8(%rbx)
    0.00 :   ffffffff945484d1:       movq   $0x0,0xd8(%rbx)
    0.00 :   ffffffff945484dc:       movl   $0x0,0xc4(%rbx)
    0.00 :   ffffffff945484e6:       mov    %r10,-0x50(%rbp)
    0.00 :   ffffffff945484ea:       mov    %r9,-0x48(%rbp)
    0.00 :   ffffffff945484ee:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff945484f2:       call   0xffffffff954ac6e0
    0.00 :   ffffffff945484f7:       mov    0xa0(%rbx),%rsi
    0.00 :   ffffffff945484fe:       mov    -0x48(%rbp),%r9
    0.00 :   ffffffff94548502:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff94548506:       mov    -0x50(%rbp),%r10
    0.00 :   ffffffff9454850a:       sub    %r9,%rsi
    0.00 :   ffffffff9454850d:       mov    -0x30(%rbp),%edx
    0.00 :   ffffffff94548510:       mov    -0x60(%rbp),%r8
    0.00 :   ffffffff94548514:       jb     0xffffffff945486b6
    0.00 :   ffffffff9454851a:       imul   $0xb67e,%esi,%edi
    0.00 :   ffffffff94548520:       mov    %edx,%r11d
    0.00 :   ffffffff94548523:       mov    %rsi,0xa0(%rbx)
    0.00 :   ffffffff9454852a:       mov    0x88(%rbx),%rsi
    0.00 :   ffffffff94548531:       imul   %r11,%r9
    0.00 :   ffffffff94548535:       sub    %r9,%rsi
    0.00 :   ffffffff94548538:       jb     0xffffffff945486df
    0.00 :   ffffffff9454853e:       cmp    %esi,%edi
    0.00 :   ffffffff94548540:       cmovb  %esi,%edi
    0.00 :   ffffffff94548543:       mov    %rsi,0x88(%rbx)
    0.00 :   ffffffff9454854a:       mov    0xb0(%rbx),%rsi
    0.00 :   ffffffff94548551:       mov    %edi,%ecx
    0.00 :   ffffffff94548553:       mov    %rcx,0x88(%rbx)
    0.00 :   ffffffff9454855a:       sub    %r10,%rsi
    0.00 :   ffffffff9454855d:       mov    %rsi,%rdi
    0.00 :   ffffffff94548560:       jb     0xffffffff945486d6
    0.00 :   ffffffff94548566:       imul   $0xb67e,%esi,%esi
    0.00 :   ffffffff9454856c:       imul   %r10d,%edx
    0.00 :   ffffffff94548570:       mov    %rdi,0xb0(%rbx)
    0.00 :   ffffffff94548577:       mov    0x98(%rbx),%edi
    0.00 :   ffffffff9454857d:       sub    %edx,%edi
    0.00 :   ffffffff9454857f:       mov    %edi,%edx
    0.00 :   ffffffff94548581:       jb     0xffffffff945486cf
    0.00 :   ffffffff94548587:       cmp    %edi,%esi
    0.00 :   ffffffff94548589:       cmovb  %edi,%esi
    0.00 :   ffffffff9454858c:       mov    %edx,0x98(%rbx)
    0.00 :   ffffffff94548592:       mov    0xa8(%rbx),%rdx
    0.00 :   ffffffff94548599:       mov    %esi,0x98(%rbx)
    0.00 :   ffffffff9454859f:       sub    %rax,%rdx
    0.00 :   ffffffff945485a2:       jb     0xffffffff945486c6
    0.00 :   ffffffff945485a8:       imul   $0xb67e,%edx,%esi
    0.00 :   ffffffff945485ae:       imul   %r11,%rax
    0.00 :   ffffffff945485b2:       mov    %rdx,0xa8(%rbx)
    0.00 :   ffffffff945485b9:       mov    0x90(%rbx),%rdx
    0.00 :   ffffffff945485c0:       sub    %rax,%rdx
    0.00 :   ffffffff945485c3:       jb     0xffffffff945486bf
    0.00 :   ffffffff945485c9:       cmp    %edx,%esi
    0.00 :   ffffffff945485cb:       cmovb  %edx,%esi
    0.00 :   ffffffff945485ce:       neg    %rax
    0.00 :   ffffffff945485d1:       mov    %esi,%ecx
    0.00 :   ffffffff945485d3:       mov    %rdx,0x90(%rbx)
    0.00 :   ffffffff945485da:       mov    %rbx,%rsi
    0.00 :   ffffffff945485dd:       sar    $0xa,%rax
    0.00 :   ffffffff945485e1:       add    %rax,0x110(%rbx)
    0.00 :   ffffffff945485e8:       mov    %r8,%rdi
    0.00 :   ffffffff945485eb:       mov    %rcx,0x90(%rbx)
    0.00 :   ffffffff945485f2:       movq   $0x1,0x108(%rbx)
    0.00 :   ffffffff945485fd:       call   0xffffffff94560310
    0.00 :   ffffffff94548602:       mov    0x100(%rbx),%rsi
    0.00 :   ffffffff94548609:       mov    0xa0(%rbx),%rdx
    0.00 :   ffffffff94548610:       mov    0x150(%rbx),%rax
    0.00 :   ffffffff94548617:       sub    %rsi,%rdx
    0.00 :   ffffffff9454861a:       cmp    $0xffffffff97b56ec0,%rax
    0.00 :   ffffffff94548620:       je     0xffffffff94548652
    0.00 :   ffffffff94548622:       mov    %rdx,%rdi
    0.00 :   ffffffff94548625:       neg    %rdi
    0.00 :   ffffffff94548628:       cmovs  %rdx,%rdi
    0.00 :   ffffffff9454862c:       shr    $0x6,%rsi
    0.00 :   ffffffff94548630:       cmp    %rsi,%rdi
    0.00 :   ffffffff94548633:       jbe    0xffffffff94548652
    0.00 :   ffffffff94548635:       lock add %rdx,0x100(%rax)
    0.00 :   ffffffff9454863d:       mov    0xa0(%rbx),%rax
    0.00 :   ffffffff94548644:       mov    %rax,0x100(%rbx)
    0.00 :   ffffffff9454864b:       mov    0x150(%rbx),%rax
    0.00 :   ffffffff94548652:       mov    0x10(%rbx),%esi
    0.00 :   ffffffff94548655:       test   %esi,%esi
    0.00 :   ffffffff94548657:       jne    0xffffffff94548675
    0.00 :   ffffffff94548659:       mov    0x18c(%rbx),%ecx
    0.00 :   ffffffff9454865f:       test   %ecx,%ecx
    0.00 :   ffffffff94548661:       jne    0xffffffff94548797
    0.00 :   ffffffff94548667:       mov    0x180(%rbx),%rdx
    0.00 :   ffffffff9454866e:       mov    %rdx,0x168(%rbx)
    0.00 :   ffffffff94548675:       mov    -0x68(%rbp),%rcx
    0.00 :   ffffffff94548679:       lea    0x100(%rcx),%rdx
    0.00 :   ffffffff94548680:       movzbl -0x29(%rbp),%ecx
    0.00 :   ffffffff94548684:       cmp    %rdx,%rbx
    0.00 :   ffffffff94548687:       mov    $0x1,%edx
    0.00 :   ffffffff9454868c:       cmove  %edx,%ecx
    0.00 :   ffffffff9454868f:       mov    %cl,-0x29(%rbp)
    0.00 :   ffffffff94548692:       jmp    0xffffffff94548316
    0.00 :   ffffffff94548697:       mov    -0x38(%rbp),%rax
    0.00 :   ffffffff9454869b:       movb   $0x0,(%rax)
    0.00 :   ffffffff9454869e:       jmp    0xffffffff94548430
    0.00 :   ffffffff945486a3:       mov    0x78(%rsi),%rdi
    0.00 :   ffffffff945486a7:       mov    $0x1,%edx
    0.00 :   ffffffff945486ac:       call   0xffffffff94547aa0
    0.00 :   ffffffff945486b1:       jmp    0xffffffff94548357
    0.00 :   ffffffff945486b6:       xor    %edi,%edi
    0.00 :   ffffffff945486b8:       xor    %esi,%esi
    0.00 :   ffffffff945486ba:       jmp    0xffffffff94548520
    0.00 :   ffffffff945486bf:       xor    %edx,%edx
    0.00 :   ffffffff945486c1:       jmp    0xffffffff945485ce
    0.00 :   ffffffff945486c6:       xor    %esi,%esi
    0.00 :   ffffffff945486c8:       xor    %edx,%edx
    0.00 :   ffffffff945486ca:       jmp    0xffffffff945485ae
    0.00 :   ffffffff945486cf:       xor    %edx,%edx
    0.00 :   ffffffff945486d1:       jmp    0xffffffff9454858c
    0.00 :   ffffffff945486d6:       xor    %esi,%esi
    0.00 :   ffffffff945486d8:       xor    %edi,%edi
    0.00 :   ffffffff945486da:       jmp    0xffffffff9454856c
    0.00 :   ffffffff945486df:       xor    %esi,%esi
    0.00 :   ffffffff945486e1:       jmp    0xffffffff94548543
    0.00 :   ffffffff945486e6:       movb   $0x0,-0x29(%rbp)
    0.00 :   ffffffff945486ea:       movzbl -0x29(%rbp),%eax
    0.00 :   ffffffff945486ee:       add    $0x40,%rsp
    0.00 :   ffffffff945486f2:       pop    %rbx
    0.00 :   ffffffff945486f3:       pop    %r12
    0.00 :   ffffffff945486f5:       pop    %r13
    0.00 :   ffffffff945486f7:       pop    %r14
    0.00 :   ffffffff945486f9:       pop    %r15
    0.00 :   ffffffff945486fb:       pop    %rbp
    0.00 :   ffffffff945486fc:       xor    %edx,%edx
    0.00 :   ffffffff945486fe:       xor    %ecx,%ecx
    0.00 :   ffffffff94548700:       xor    %esi,%esi
    0.00 :   ffffffff94548702:       xor    %edi,%edi
    0.00 :   ffffffff94548704:       xor    %r8d,%r8d
    0.00 :   ffffffff94548707:       xor    %r9d,%r9d
    0.00 :   ffffffff9454870a:       xor    %r10d,%r10d
    0.00 :   ffffffff9454870d:       xor    %r11d,%r11d
    0.00 :   ffffffff94548710:       ret
    0.00 :   ffffffff94548711:       int3
    0.00 :   ffffffff94548712:       int3
    0.00 :   ffffffff94548713:       int3
    0.00 :   ffffffff94548714:       int3
    0.00 :   ffffffff94548715:       movzbl 0x246a621(%rip),%edx        # 0xffffffff969b2d3d
    0.00 :   ffffffff9454871c:       cmp    $0x1,%dl
    0.00 :   ffffffff9454871f:       ja     0xffffffff9543133a
    0.00 :   ffffffff94548725:       and    $0x1,%edx
    0.00 :   ffffffff94548728:       jne    0xffffffff945482d9
    0.00 :   ffffffff9454872e:       mov    $0xffffffff95d2e300,%rdi
    0.00 :   ffffffff94548735:       mov    %rax,-0x40(%rbp)
    0.00 :   ffffffff94548739:       movb   $0x1,0x246a5fd(%rip)        # 0xffffffff969b2d3d
    0.00 :   ffffffff94548740:       call   0xffffffff944e98b0
    0.00 :   ffffffff94548745:       ud2
    0.00 :   ffffffff94548747:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff9454874b:       jmp    0xffffffff945482d9
    0.00 :   ffffffff94548750:       cmpq   $0x0,0xb0(%rbx)
    0.00 :   ffffffff94548758:       jne    0xffffffff9454839b
    0.00 :   ffffffff9454875e:       cmpq   $0x0,0xa8(%rbx)
    0.00 :   ffffffff94548766:       jne    0xffffffff9454839b
    0.00 :   ffffffff9454876c:       jmp    0xffffffff945483b2
    0.00 :   ffffffff94548771:       mov    %rax,0x9d0(%rdx)
    0.00 :   ffffffff94548778:       jmp    0xffffffff945483eb
    0.00 :   ffffffff9454877d:       mov    $0xffffffff95d2e858,%rdi
    0.00 :   ffffffff94548784:       movb   $0x1,0x246a5ad(%rip)        # 0xffffffff969b2d38
    0.00 :   ffffffff9454878b:       call   0xffffffff944e98b0
    0.00 :   ffffffff94548790:       ud2
    0.00 :   ffffffff94548792:       jmp    0xffffffff945483b2
    0.00 :   ffffffff94548797:       mov    $0xffffffffffffffff,%rdx
    0.00 :   ffffffff9454879e:       jmp    0xffffffff9454866e
    0.00 :   ffffffff945487a3:       jmp    0xffffffff9543135d
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff954abd70 <load0>:
    0.00 :   ffffffff954abd70:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff954abd75:       push   %rbp
    0.00 :   ffffffff954abd76:       mov    %rsp,%rbp
    0.00 :   ffffffff954abd79:       call   0xffffffff9457cd00
    0.00 :   ffffffff954abd7e:       pop    %rbp
    0.00 :   ffffffff954abd7f:       xor    %edi,%edi
  100.00 :   ffffffff954abd81:       ret
    0.00 :   ffffffff954abd82:       int3
    0.00 :   ffffffff954abd83:       int3
    0.00 :   ffffffff954abd84:       int3
    0.00 :   ffffffff954abd85:       int3
    0.00 :   ffffffff954abd86:       cs nopw 0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff956016a0 <load0>:
  100.00 :   ffffffff956016a0:       testb  $0x3,0x88(%rsp)
    0.00 :   ffffffff956016a8:       je     0xffffffff95601210
    0.00 :   ffffffff956016ae:       jmp    0xffffffff95601170
    0.00 :   ffffffff956016b3:       data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   ffffffff956016be:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff944f2ce0 <load0>:
  100.00 :   ffffffff944f2ce0:       push   %rbp
    0.00 :   ffffffff944f2ce1:       mov    %rsp,%rbp
    0.00 :   ffffffff944f2ce4:       cli
    0.00 :   ffffffff944f2ce5:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff944f2cea:       addl   $0xffff0000,%gs:0x6bb3eb53(%rip)        # 0x31848
    0.00 :   ffffffff944f2cf5:       mov    %gs:0x6bb3eb4c(%rip),%eax        # 0x31848
    0.00 :   ffffffff944f2cfc:       test   $0xffff00,%eax
    0.00 :   ffffffff944f2d01:       jne    0xffffffff944f2d10
    0.00 :   ffffffff944f2d03:       mov    %gs:0x6bb3eb5d(%rip),%ax        # 0x31868
    0.00 :   ffffffff944f2d0b:       test   %ax,%ax
    0.00 :   ffffffff944f2d0e:       jne    0xffffffff944f2d63
    0.00 :   ffffffff944f2d10:       mov    %gs:0x6bb3eb35(%rip),%edi        # 0x3184c
    0.00 :   ffffffff944f2d17:       call   0xffffffff9453e4b0
    0.00 :   ffffffff944f2d1c:       test   %eax,%eax
    0.00 :   ffffffff944f2d1e:       jne    0xffffffff944f2d30
    0.00 :   ffffffff944f2d20:       pop    %rbp
    0.00 :   ffffffff944f2d21:       xor    %eax,%eax
    0.00 :   ffffffff944f2d23:       xor    %edx,%edx
    0.00 :   ffffffff944f2d25:       xor    %ecx,%ecx
    0.00 :   ffffffff944f2d27:       xor    %esi,%esi
    0.00 :   ffffffff944f2d29:       xor    %edi,%edi
    0.00 :   ffffffff944f2d2b:       ret
    0.00 :   ffffffff944f2d2c:       int3
    0.00 :   ffffffff944f2d2d:       int3
    0.00 :   ffffffff944f2d2e:       int3
    0.00 :   ffffffff944f2d2f:       int3
    0.00 :   ffffffff944f2d30:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff944f2d39:       mov    (%rax),%rax
    0.00 :   ffffffff944f2d3c:       test   $0x8,%al
    0.00 :   ffffffff944f2d3e:       jne    0xffffffff944f2d20
    0.00 :   ffffffff944f2d40:       mov    %gs:0x6bb3eb01(%rip),%eax        # 0x31848
    0.00 :   ffffffff944f2d47:       test   $0xf0000,%eax
    0.00 :   ffffffff944f2d4c:       jne    0xffffffff944f2d20
    0.00 :   ffffffff944f2d4e:       call   0xffffffff945ef850
    0.00 :   ffffffff944f2d53:       pop    %rbp
    0.00 :   ffffffff944f2d54:       xor    %eax,%eax
    0.00 :   ffffffff944f2d56:       xor    %edx,%edx
    0.00 :   ffffffff944f2d58:       xor    %ecx,%ecx
    0.00 :   ffffffff944f2d5a:       xor    %esi,%esi
    0.00 :   ffffffff944f2d5c:       xor    %edi,%edi
    0.00 :   ffffffff944f2d5e:       ret
    0.00 :   ffffffff944f2d5f:       int3
    0.00 :   ffffffff944f2d60:       int3
    0.00 :   ffffffff944f2d61:       int3
    0.00 :   ffffffff944f2d62:       int3
    0.00 :   ffffffff944f2d63:       mov    %gs:0x6bb2d515(%rip),%rdi        # 0x20280
    0.00 :   ffffffff944f2d6b:       test   $0x41,%al
    0.00 :   ffffffff944f2d6d:       jne    0xffffffff944f2d7b
    0.00 :   ffffffff944f2d6f:       test   %rdi,%rdi
    0.00 :   ffffffff944f2d72:       je     0xffffffff944f2d7b
    0.00 :   ffffffff944f2d74:       mov    0x18(%rdi),%eax
    0.00 :   ffffffff944f2d77:       test   %eax,%eax
    0.00 :   ffffffff944f2d79:       je     0xffffffff944f2d9b
    0.00 :   ffffffff944f2d7b:       xchg   %ax,%ax
    0.00 :   ffffffff944f2d7d:       call   0xffffffff954ad3c0
    0.00 :   ffffffff944f2d82:       jmp    0xffffffff944f2d10
    0.00 :   ffffffff944f2d84:       mov    %gs:0x6bb2d4f4(%rip),%rdi        # 0x20280
    0.00 :   ffffffff944f2d8c:       test   %rdi,%rdi
    0.00 :   ffffffff944f2d8f:       je     0xffffffff944f2d7d
    0.00 :   ffffffff944f2d91:       call   0xffffffff9453c2c0
    0.00 :   ffffffff944f2d96:       jmp    0xffffffff944f2d10
    0.00 :   ffffffff944f2d9b:       call   0xffffffff9451b0b0
    0.00 :   ffffffff944f2da0:       test   %al,%al
    0.00 :   ffffffff944f2da2:       jne    0xffffffff944f2d7b
    0.00 :   ffffffff944f2da4:       jmp    0xffffffff944f2d10
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945b8990 <load0>:
    0.00 :   ffffffff945b8990:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945b8995:       push   %rbp
    0.00 :   ffffffff945b8996:       mov    %rsp,%rbp
    0.00 :   ffffffff945b8999:       push   %r15
    0.00 :   ffffffff945b899b:       push   %r14
    0.00 :   ffffffff945b899d:       push   %r13
    0.00 :   ffffffff945b899f:       push   %r12
    0.00 :   ffffffff945b89a1:       mov    %edi,%r12d
    0.00 :   ffffffff945b89a4:       push   %rbx
    0.00 :   ffffffff945b89a5:       mov    0x2442bfc(%rip),%rsi        # 0xffffffff969fb5a8
    0.00 :   ffffffff945b89ac:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945b89b1:       mov    $0x32f55,%rax
    0.00 :   ffffffff945b89b8:       incq   %gs:0x6ba7a4a8(%rip)        # 0x32e68
    0.00 :   ffffffff945b89c0:       add    %gs:0x6ba61018(%rip),%rax        # 0x199e0
    0.00 :   ffffffff945b89c8:       movzbl (%rax),%ebx
    0.00 :   ffffffff945b89cb:       cmp    $0x1,%bl
    0.00 :   ffffffff945b89ce:       ja     0xffffffff95434768
    0.00 :   ffffffff945b89d4:       and    $0x1,%ebx
    0.00 :   ffffffff945b89d7:       jne    0xffffffff945b8c95
    0.00 :   ffffffff945b89dd:       mov    %gs:0x31840,%rdi
  100.00 :   ffffffff945b89e6:       mov    0x834(%rdi),%eax
    0.00 :   ffffffff945b89ec:       test   %eax,%eax
    0.00 :   ffffffff945b89ee:       jg     0xffffffff945b8a00
    0.00 :   ffffffff945b89f0:       mov    %gs:0x6ba78e51(%rip),%eax        # 0x31848
    0.00 :   ffffffff945b89f7:       test   %ax,%ax
    0.00 :   ffffffff945b89fa:       je     0xffffffff945b8d11
    0.00 :   ffffffff945b8a00:       mov    %gs:0x6ba7a44a(%rip),%al        # 0x32e51
    0.00 :   ffffffff945b8a07:       test   %al,%al
    0.00 :   ffffffff945b8a09:       je     0xffffffff945b8c38
    0.00 :   ffffffff945b8a0f:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8a18:       mov    0x834(%rax),%eax
    0.00 :   ffffffff945b8a1e:       test   %eax,%eax
    0.00 :   ffffffff945b8a20:       jne    0xffffffff945b8a31
    0.00 :   ffffffff945b8a22:       lock orb $0x8,(%rdi)
    0.00 :   ffffffff945b8a26:       andl   $0x7fffffff,%gs:0x6ba78e17(%rip)        # 0x31848
    0.00 :   ffffffff945b8a31:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8a3a:       mov    0x834(%rax),%eax
    0.00 :   ffffffff945b8a40:       test   %eax,%eax
    0.00 :   ffffffff945b8a42:       jle    0xffffffff945b8a5e
    0.00 :   ffffffff945b8a44:       mov    %gs:0x6ba7a407(%rip),%al        # 0x32e52
    0.00 :   ffffffff945b8a4b:       test   %al,%al
    0.00 :   ffffffff945b8a4d:       je     0xffffffff945b8a5e
    0.00 :   ffffffff945b8a4f:       mov    %gs:0x6ba7a3fa(%rip),%al        # 0x32e50
    0.00 :   ffffffff945b8a56:       test   %al,%al
    0.00 :   ffffffff945b8a58:       jne    0xffffffff945b8d60
    0.00 :   ffffffff945b8a5e:       mov    $0x32e40,%rbx
    0.00 :   ffffffff945b8a65:       add    %gs:0x6ba60f73(%rip),%rbx        # 0x199e0
    0.00 :   ffffffff945b8a6d:       mov    %rbx,%rdi
    0.00 :   ffffffff945b8a70:       mov    0x18(%rbx),%r14
    0.00 :   ffffffff945b8a74:       call   0xffffffff945b4030
    0.00 :   ffffffff945b8a79:       test   %r12d,%r12d
    0.00 :   ffffffff945b8a7c:       je     0xffffffff945b8cdc
    0.00 :   ffffffff945b8a82:       mov    0x221a7b7(%rip),%rax        # 0xffffffff967d3240
    0.00 :   ffffffff945b8a89:       movzbl 0x12(%rbx),%r15d
    0.00 :   ffffffff945b8a8e:       mov    %eax,%r13d
    0.00 :   ffffffff945b8a91:       and    $0x3,%r13d
    0.00 :   ffffffff945b8a95:       cmp    $0x1,%r15b
    0.00 :   ffffffff945b8a99:       ja     0xffffffff9543477c
    0.00 :   ffffffff945b8a9f:       and    $0x1,%r15d
    0.00 :   ffffffff945b8aa3:       je     0xffffffff945b8b62
    0.00 :   ffffffff945b8aa9:       cmpb   $0x0,0x10(%rbx)
    0.00 :   ffffffff945b8aad:       jne    0xffffffff945b8b62
    0.00 :   ffffffff945b8ab3:       test   %r13d,%r13d
    0.00 :   ffffffff945b8ab6:       jne    0xffffffff945b8ae7
    0.00 :   ffffffff945b8ab8:       lea    0x78(%rbx),%rdi
    0.00 :   ffffffff945b8abc:       call   0xffffffff945ba170
    0.00 :   ffffffff945b8ac1:       test   %al,%al
    0.00 :   ffffffff945b8ac3:       jne    0xffffffff945b8ae7
    0.00 :   ffffffff945b8ac5:       movzbl 0xe8(%rbx),%eax
    0.00 :   ffffffff945b8acc:       test   $0x1,%al
    0.00 :   ffffffff945b8ace:       je     0xffffffff945b8b7c
    0.00 :   ffffffff945b8ad4:       mov    0x90(%rbx),%rax
    0.00 :   ffffffff945b8adb:       mov    (%rax),%rax
    0.00 :   ffffffff945b8ade:       test   %rax,%rax
    0.00 :   ffffffff945b8ae1:       je     0xffffffff945b8b7c
    0.00 :   ffffffff945b8ae7:       call   0xffffffff945b0b40
    0.00 :   ffffffff945b8aec:       test   %r12d,%r12d
    0.00 :   ffffffff945b8aef:       je     0xffffffff945b8ba8
    0.00 :   ffffffff945b8af5:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8afe:       movzbl 0x860(%rax),%edx
    0.00 :   ffffffff945b8b05:       test   %dl,%dl
    0.00 :   ffffffff945b8b07:       jne    0xffffffff945b8c2c
    0.00 :   ffffffff945b8b0d:       mov    %gs:0x31840,%rdi
    0.00 :   ffffffff945b8b16:       mov    0x878(%rdi),%eax
    0.00 :   ffffffff945b8b1c:       movzbl 0x881(%rdi),%edx
    0.00 :   ffffffff945b8b23:       test   %eax,%eax
    0.00 :   ffffffff945b8b25:       jne    0xffffffff945b8dd9
    0.00 :   ffffffff945b8b2b:       test   %dl,%dl
    0.00 :   ffffffff945b8b2d:       jne    0xffffffff945b8dd9
    0.00 :   ffffffff945b8b33:       mov    $0x2,%edx
    0.00 :   ffffffff945b8b38:       xor    %esi,%esi
    0.00 :   ffffffff945b8b3a:       call   0xffffffff945a7d00
    0.00 :   ffffffff945b8b3f:       mov    0x2442a5a(%rip),%rsi        # 0xffffffff969fb5a0
    0.00 :   ffffffff945b8b46:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945b8b4b:       pop    %rbx
    0.00 :   ffffffff945b8b4c:       pop    %r12
    0.00 :   ffffffff945b8b4e:       pop    %r13
    0.00 :   ffffffff945b8b50:       pop    %r14
    0.00 :   ffffffff945b8b52:       pop    %r15
    0.00 :   ffffffff945b8b54:       pop    %rbp
    0.00 :   ffffffff945b8b55:       xor    %eax,%eax
    0.00 :   ffffffff945b8b57:       xor    %edx,%edx
    0.00 :   ffffffff945b8b59:       xor    %esi,%esi
    0.00 :   ffffffff945b8b5b:       xor    %edi,%edi
    0.00 :   ffffffff945b8b5d:       ret
    0.00 :   ffffffff945b8b5e:       int3
    0.00 :   ffffffff945b8b5f:       int3
    0.00 :   ffffffff945b8b60:       int3
    0.00 :   ffffffff945b8b61:       int3
    0.00 :   ffffffff945b8b62:       lea    0x78(%rbx),%rdi
    0.00 :   ffffffff945b8b66:       call   0xffffffff945ba170
    0.00 :   ffffffff945b8b6b:       test   %al,%al
    0.00 :   ffffffff945b8b6d:       jne    0xffffffff945b8ae7
    0.00 :   ffffffff945b8b73:       test   %r13d,%r13d
    0.00 :   ffffffff945b8b76:       je     0xffffffff945b8ac5
    0.00 :   ffffffff945b8b7c:       mov    0x8(%r14),%rax
    0.00 :   ffffffff945b8b80:       cmp    (%rbx),%rax
    0.00 :   ffffffff945b8b83:       jne    0xffffffff945b8ae7
    0.00 :   ffffffff945b8b89:       movzbl 0x14(%rbx),%ebx
    0.00 :   ffffffff945b8b8d:       cmp    $0x1,%bl
    0.00 :   ffffffff945b8b90:       ja     0xffffffff95434791
    0.00 :   ffffffff945b8b96:       and    $0x1,%ebx
    0.00 :   ffffffff945b8b99:       jne    0xffffffff945b8ae7
    0.00 :   ffffffff945b8b9f:       test   %r12d,%r12d
    0.00 :   ffffffff945b8ba2:       jne    0xffffffff945b8af5
    0.00 :   ffffffff945b8ba8:       mov    %gs:0x6ba75180(%rip),%rax        # 0x2dd30
    0.00 :   ffffffff945b8bb0:       cmp    $0x1,%rax
    0.00 :   ffffffff945b8bb4:       jg     0xffffffff945b8b3f
    0.00 :   ffffffff945b8bb6:       test   %rax,%rax
    0.00 :   ffffffff945b8bb9:       jne    0xffffffff945b8bcc
    0.00 :   ffffffff945b8bbb:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8bc4:       testb  $0x2,0x2c(%rax)
    0.00 :   ffffffff945b8bc8:       jne    0xffffffff945b8bcc
    0.00 :   ffffffff945b8bca:       ud2
    0.00 :   ffffffff945b8bcc:       mov    %gs:0x6ba75154(%rip),%rax        # 0x2dd28
    0.00 :   ffffffff945b8bd4:       test   %rax,%rax
    0.00 :   ffffffff945b8bd7:       je     0xffffffff945b8af5
    0.00 :   ffffffff945b8bdd:       jmp    0xffffffff945b8b3f
    0.00 :   ffffffff945b8be2:       mov    %gs:0x6ba78c63(%rip),%eax        # 0x3184c
    0.00 :   ffffffff945b8be9:       mov    %eax,%eax
    0.00 :   ffffffff945b8beb:       bt     %rax,0x2447f2d(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff945b8bf3:       jae    0xffffffff945b8b4b
    0.00 :   ffffffff945b8bf9:       incl   %gs:0x6ba78c48(%rip)        # 0x31848
    0.00 :   ffffffff945b8c00:       mov    0x23fdef9(%rip),%rax        # 0xffffffff969b6b00
    0.00 :   ffffffff945b8c07:       test   %rax,%rax
    0.00 :   ffffffff945b8c0a:       je     0xffffffff945b8c15
    0.00 :   ffffffff945b8c0c:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff945b8c10:       call   0xffffffff945a7ab0
    0.00 :   ffffffff945b8c15:       decl   %gs:0x6ba78c2c(%rip)        # 0x31848
    0.00 :   ffffffff945b8c1c:       jne    0xffffffff945b8b4b
    0.00 :   ffffffff945b8c22:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945b8c27:       jmp    0xffffffff945b8b4b
    0.00 :   ffffffff945b8c2c:       movb   $0x0,0x860(%rax)
    0.00 :   ffffffff945b8c33:       jmp    0xffffffff945b8b0d
    0.00 :   ffffffff945b8c38:       mov    0x838(%rdi),%eax
    0.00 :   ffffffff945b8c3e:       test   %eax,%eax
    0.00 :   ffffffff945b8c40:       je     0xffffffff945b8a31
    0.00 :   ffffffff945b8c46:       jmp    0xffffffff945b8a0f
    0.00 :   ffffffff945b8c4b:       mov    %gs:0x6ba78bfa(%rip),%eax        # 0x3184c
    0.00 :   ffffffff945b8c52:       mov    %eax,%eax
    0.00 :   ffffffff945b8c54:       bt     %rax,0x2447ec4(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff945b8c5c:       jae    0xffffffff945b89b1
    0.00 :   ffffffff945b8c62:       incl   %gs:0x6ba78bdf(%rip)        # 0x31848
    0.00 :   ffffffff945b8c69:       mov    0x23fde90(%rip),%rax        # 0xffffffff969b6b00
    0.00 :   ffffffff945b8c70:       test   %rax,%rax
    0.00 :   ffffffff945b8c73:       je     0xffffffff945b8c7e
    0.00 :   ffffffff945b8c75:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff945b8c79:       call   0xffffffff945a7ab0
    0.00 :   ffffffff945b8c7e:       decl   %gs:0x6ba78bc3(%rip)        # 0x31848
    0.00 :   ffffffff945b8c85:       jne    0xffffffff945b89b1
    0.00 :   ffffffff945b8c8b:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945b8c90:       jmp    0xffffffff945b89b1
    0.00 :   ffffffff945b8c95:       mov    %gs:0x6ba75093(%rip),%rax        # 0x2dd30
    0.00 :   ffffffff945b8c9d:       cmp    $0x1,%rax
    0.00 :   ffffffff945b8ca1:       jg     0xffffffff945b8cc6
    0.00 :   ffffffff945b8ca3:       test   %rax,%rax
    0.00 :   ffffffff945b8ca6:       jne    0xffffffff945b8cb9
    0.00 :   ffffffff945b8ca8:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8cb1:       testb  $0x2,0x2c(%rax)
    0.00 :   ffffffff945b8cb5:       jne    0xffffffff945b8cb9
    0.00 :   ffffffff945b8cb7:       ud2
    0.00 :   ffffffff945b8cb9:       mov    %gs:0x6ba75067(%rip),%rax        # 0x2dd28
    0.00 :   ffffffff945b8cc1:       test   %rax,%rax
    0.00 :   ffffffff945b8cc4:       je     0xffffffff945b8ccf
    0.00 :   ffffffff945b8cc6:       test   %r12d,%r12d
    0.00 :   ffffffff945b8cc9:       je     0xffffffff945b8e06
    0.00 :   ffffffff945b8ccf:       movb   $0x0,%gs:0x6ba7a27e(%rip)        # 0x32f55
    0.00 :   ffffffff945b8cd7:       jmp    0xffffffff945b89dd
    0.00 :   ffffffff945b8cdc:       mov    %gs:0x6ba7504c(%rip),%rax        # 0x2dd30
    0.00 :   ffffffff945b8ce4:       cmp    $0x1,%rax
    0.00 :   ffffffff945b8ce8:       jg     0xffffffff945b8a82
    0.00 :   ffffffff945b8cee:       test   %rax,%rax
    0.00 :   ffffffff945b8cf1:       jne    0xffffffff945b8a82
    0.00 :   ffffffff945b8cf7:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8d00:       testb  $0x2,0x2c(%rax)
    0.00 :   ffffffff945b8d04:       jne    0xffffffff945b8a82
    0.00 :   ffffffff945b8d0a:       ud2
    0.00 :   ffffffff945b8d0c:       jmp    0xffffffff945b8a82
    0.00 :   ffffffff945b8d11:       mov    %gs:0x6ba7a139(%rip),%al        # 0x32e51
    0.00 :   ffffffff945b8d18:       test   %al,%al
    0.00 :   ffffffff945b8d1a:       jne    0xffffffff945b8d96
    0.00 :   ffffffff945b8d1c:       mov    0x838(%rdi),%eax
    0.00 :   ffffffff945b8d22:       test   %eax,%eax
    0.00 :   ffffffff945b8d24:       jne    0xffffffff945b8d96
    0.00 :   ffffffff945b8d26:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8d2f:       mov    0x834(%rax),%edx
    0.00 :   ffffffff945b8d35:       test   %edx,%edx
    0.00 :   ffffffff945b8d37:       jne    0xffffffff945b8e33
    0.00 :   ffffffff945b8d3d:       mov    %gs:0x6ba7a10c(%rip),%dl        # 0x32e50
    0.00 :   ffffffff945b8d44:       test   %dl,%dl
    0.00 :   ffffffff945b8d46:       je     0xffffffff945b8a5e
    0.00 :   ffffffff945b8d4c:       movb   $0x0,%gs:0x6ba7a0fc(%rip)        # 0x32e50
    0.00 :   ffffffff945b8d54:       movb   $0x0,0x839(%rax)
    0.00 :   ffffffff945b8d5b:       jmp    0xffffffff945b8a5e
    0.00 :   ffffffff945b8d60:       cmpb   $0x0,0x839(%rdi)
    0.00 :   ffffffff945b8d67:       jne    0xffffffff945b8a5e
    0.00 :   ffffffff945b8d6d:       mov    0x221a60c(%rip),%rax        # 0xffffffff967d3380
    0.00 :   ffffffff945b8d74:       mov    0x204ec45(%rip),%rdx        # 0xffffffff966079c0
    0.00 :   ffffffff945b8d7b:       add    $0xfa,%rax
    0.00 :   ffffffff945b8d81:       cmp    %rdx,%rax
    0.00 :   ffffffff945b8d84:       jns    0xffffffff945b8a5e
    0.00 :   ffffffff945b8d8a:       movb   $0x1,0x839(%rdi)
    0.00 :   ffffffff945b8d91:       jmp    0xffffffff945b8a5e
    0.00 :   ffffffff945b8d96:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8d9f:       mov    0x834(%rax),%eax
    0.00 :   ffffffff945b8da5:       test   %eax,%eax
    0.00 :   ffffffff945b8da7:       jne    0xffffffff945b8d26
    0.00 :   ffffffff945b8dad:       mov    %gs:0x6ba7a09d(%rip),%al        # 0x32e51
    0.00 :   ffffffff945b8db4:       test   %al,%al
    0.00 :   ffffffff945b8db6:       je     0xffffffff945b8e23
    0.00 :   ffffffff945b8db8:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8dc1:       mov    0x834(%rax),%eax
    0.00 :   ffffffff945b8dc7:       test   %eax,%eax
    0.00 :   ffffffff945b8dc9:       jne    0xffffffff945b8a5e
    0.00 :   ffffffff945b8dcf:       call   0xffffffff945b5ae0
    0.00 :   ffffffff945b8dd4:       jmp    0xffffffff945b8a5e
    0.00 :   ffffffff945b8dd9:       test   $0x7fffffff,%eax
    0.00 :   ffffffff945b8dde:       je     0xffffffff945b8b3f
    0.00 :   ffffffff945b8de4:       mov    %gs:0x31840,%rdi
    0.00 :   ffffffff945b8ded:       movzbl 0x880(%rdi),%eax
    0.00 :   ffffffff945b8df4:       test   %al,%al
    0.00 :   ffffffff945b8df6:       jne    0xffffffff945b8b3f
    0.00 :   ffffffff945b8dfc:       call   0xffffffff945a7d60
    0.00 :   ffffffff945b8e01:       jmp    0xffffffff945b8b3f
    0.00 :   ffffffff945b8e06:       mov    %gs:0x31840,%rax
    0.00 :   ffffffff945b8e0f:       lock orb $0x8,(%rax)
    0.00 :   ffffffff945b8e13:       andl   $0x7fffffff,%gs:0x6ba78a2a(%rip)        # 0x31848
    0.00 :   ffffffff945b8e1e:       jmp    0xffffffff945b8ccf
    0.00 :   ffffffff945b8e23:       mov    0x838(%rdi),%eax
    0.00 :   ffffffff945b8e29:       test   %eax,%eax
    0.00 :   ffffffff945b8e2b:       je     0xffffffff945b8a5e
    0.00 :   ffffffff945b8e31:       jmp    0xffffffff945b8db8
    0.00 :   ffffffff945b8e33:       ud2
    0.00 :   ffffffff945b8e35:       jmp    0xffffffff945b8a31
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945ba1b0 <load0>:
    0.00 :   ffffffff945ba1b0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945ba1b5:       push   %rbp
  100.00 :   ffffffff945ba1b6:       movzbl 0x70(%rdi),%eax
    0.00 :   ffffffff945ba1ba:       mov    %rsp,%rbp
    0.00 :   ffffffff945ba1bd:       and    $0x1,%eax
    0.00 :   ffffffff945ba1c0:       je     0xffffffff945ba1cf
    0.00 :   ffffffff945ba1c2:       mov    0x8(%rdi),%rax
    0.00 :   ffffffff945ba1c6:       mov    (%rax),%rax
    0.00 :   ffffffff945ba1c9:       test   %rax,%rax
    0.00 :   ffffffff945ba1cc:       setne  %al
    0.00 :   ffffffff945ba1cf:       pop    %rbp
    0.00 :   ffffffff945ba1d0:       xor    %edi,%edi
    0.00 :   ffffffff945ba1d2:       ret
    0.00 :   ffffffff945ba1d3:       int3
    0.00 :   ffffffff945ba1d4:       int3
    0.00 :   ffffffff945ba1d5:       int3
    0.00 :   ffffffff945ba1d6:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff95495b60 <load0>:
    0.00 :   ffffffff95495b60:       push   %rbp
    0.00 :   ffffffff95495b61:       mov    %rsp,%rbp
    0.00 :   ffffffff95495b64:       push   %r13
    0.00 :   ffffffff95495b66:       push   %r12
    0.00 :   ffffffff95495b68:       mov    %rdi,%r12
    0.00 :   ffffffff95495b6b:       call   0xffffffff95496cc0
    0.00 :   ffffffff95495b70:       mov    %eax,%r13d
    0.00 :   ffffffff95495b73:       movb   $0x1,%gs:0x6ab9bc05(%rip)        # 0x31780
    0.00 :   ffffffff95495b7b:       testb  $0x3,0x88(%r12)
    0.00 :   ffffffff95495b84:       jne    0xffffffff95495b91
    0.00 :   ffffffff95495b86:       mov    %gs:0x6ab9bcdd(%rip),%al        # 0x3186a
    0.00 :   ffffffff95495b8d:       test   %al,%al
    0.00 :   ffffffff95495b8f:       je     0xffffffff95495bce
    0.00 :   ffffffff95495b91:       call   0xffffffff944f30a0
    0.00 :   ffffffff95495b96:       mov    %r12,%rdi
    0.00 :   ffffffff95495b99:       call   0xffffffff9449cae0
    0.00 :   ffffffff95495b9e:       call   0xffffffff944f3160
  100.00 :   ffffffff95495ba3:       mov    %r13d,%esi
    0.00 :   ffffffff95495ba6:       mov    %r12,%rdi
    0.00 :   ffffffff95495ba9:       call   0xffffffff95496d50
    0.00 :   ffffffff95495bae:       pop    %r12
    0.00 :   ffffffff95495bb0:       pop    %r13
    0.00 :   ffffffff95495bb2:       pop    %rbp
    0.00 :   ffffffff95495bb3:       xor    %eax,%eax
    0.00 :   ffffffff95495bb5:       xor    %edx,%edx
    0.00 :   ffffffff95495bb7:       xor    %ecx,%ecx
    0.00 :   ffffffff95495bb9:       xor    %esi,%esi
    0.00 :   ffffffff95495bbb:       xor    %edi,%edi
    0.00 :   ffffffff95495bbd:       xor    %r8d,%r8d
    0.00 :   ffffffff95495bc0:       xor    %r9d,%r9d
    0.00 :   ffffffff95495bc3:       xor    %r10d,%r10d
    0.00 :   ffffffff95495bc6:       xor    %r11d,%r11d
    0.00 :   ffffffff95495bc9:       ret
    0.00 :   ffffffff95495bca:       int3
    0.00 :   ffffffff95495bcb:       int3
    0.00 :   ffffffff95495bcc:       int3
    0.00 :   ffffffff95495bcd:       int3
    0.00 :   ffffffff95495bce:       movb   $0x1,%gs:0x6ab9bc94(%rip)        # 0x3186a
    0.00 :   ffffffff95495bd6:       mov    %gs:0x6ab9bc82(%rip),%r11        # 0x31860
    0.00 :   ffffffff95495bde:       mov    %rsp,(%r11)
    0.00 :   ffffffff95495be1:       mov    %r11,%rsp
    0.00 :   ffffffff95495be4:       call   0xffffffff944f30a0
    0.00 :   ffffffff95495be9:       mov    %r12,%rdi
    0.00 :   ffffffff95495bec:       call   0xffffffff9449cae0
    0.00 :   ffffffff95495bf1:       call   0xffffffff944f3160
    0.00 :   ffffffff95495bf6:       pop    %rsp
    0.00 :   ffffffff95495bf7:       movb   $0x0,%gs:0x6ab9bc6b(%rip)        # 0x3186a
    0.00 :   ffffffff95495bff:       jmp    0xffffffff95495ba3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9453e4b0 <load0>:
    0.00 :   ffffffff9453e4b0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9453e4b5:       push   %rbp
    0.00 :   ffffffff9453e4b6:       mov    %rsp,%rbp
    0.00 :   ffffffff9453e4b9:       push   %r12
    0.00 :   ffffffff9453e4bb:       movslq %edi,%r12
    0.00 :   ffffffff9453e4be:       push   %rbx
    0.00 :   ffffffff9453e4bf:       mov    $0x31fc0,%rbx
    0.00 :   ffffffff9453e4c6:       cmp    $0x1fff,%r12
    0.00 :   ffffffff9453e4cd:       ja     0xffffffff9453e51c
    0.00 :   ffffffff9453e4cf:       add    -0x6a1a1540(,%r12,8),%rbx
    0.00 :   ffffffff9453e4d7:       xor    %eax,%eax
    0.00 :   ffffffff9453e4d9:       mov    0x9e8(%rbx),%rdx
    0.00 :   ffffffff9453e4e0:       cmp    %rdx,0x9e0(%rbx)
    0.00 :   ffffffff9453e4e7:       je     0xffffffff9453e4fa
    0.00 :   ffffffff9453e4e9:       pop    %rbx
    0.00 :   ffffffff9453e4ea:       pop    %r12
    0.00 :   ffffffff9453e4ec:       pop    %rbp
    0.00 :   ffffffff9453e4ed:       xor    %edx,%edx
    0.00 :   ffffffff9453e4ef:       xor    %ecx,%ecx
    0.00 :   ffffffff9453e4f1:       xor    %esi,%esi
    0.00 :   ffffffff9453e4f3:       xor    %edi,%edi
    0.00 :   ffffffff9453e4f5:       ret
    0.00 :   ffffffff9453e4f6:       int3
    0.00 :   ffffffff9453e4f7:       int3
    0.00 :   ffffffff9453e4f8:       int3
    0.00 :   ffffffff9453e4f9:       int3
  100.00 :   ffffffff9453e4fa:       mov    0x4(%rbx),%ecx
    0.00 :   ffffffff9453e4fd:       test   %ecx,%ecx
    0.00 :   ffffffff9453e4ff:       jne    0xffffffff9453e4e9
    0.00 :   ffffffff9453e501:       mov    0x68(%rbx),%edx
    0.00 :   ffffffff9453e504:       xor    %eax,%eax
    0.00 :   ffffffff9453e506:       pop    %rbx
    0.00 :   ffffffff9453e507:       pop    %r12
    0.00 :   ffffffff9453e509:       pop    %rbp
    0.00 :   ffffffff9453e50a:       test   %edx,%edx
    0.00 :   ffffffff9453e50c:       sete   %al
    0.00 :   ffffffff9453e50f:       xor    %edx,%edx
    0.00 :   ffffffff9453e511:       xor    %ecx,%ecx
    0.00 :   ffffffff9453e513:       xor    %esi,%esi
    0.00 :   ffffffff9453e515:       xor    %edi,%edi
    0.00 :   ffffffff9453e517:       ret
    0.00 :   ffffffff9453e518:       int3
    0.00 :   ffffffff9453e519:       int3
    0.00 :   ffffffff9453e51a:       int3
    0.00 :   ffffffff9453e51b:       int3
    0.00 :   ffffffff9453e51c:       mov    %r12,%rsi
    0.00 :   ffffffff9453e51f:       mov    $0xffffffff9668c3e0,%rdi
    0.00 :   ffffffff9453e526:       call   0xffffffff94c77aa0
    0.00 :   ffffffff9453e52b:       jmp    0xffffffff9453e4cf
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94541330 <load0>:
    0.00 :   ffffffff94541330:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94541335:       mov    0x50(%rdi),%rdx
  100.00 :   ffffffff94541339:       mov    0x48(%rdi),%rcx
    0.00 :   ffffffff9454133d:       push   %rbp
    0.00 :   ffffffff9454133e:       mov    0x28(%rdi),%rax
    0.00 :   ffffffff94541342:       mov    %rsp,%rbp
    0.00 :   ffffffff94541345:       test   %rdx,%rdx
    0.00 :   ffffffff94541348:       je     0xffffffff94541386
    0.00 :   ffffffff9454134a:       mov    0x38(%rdx),%esi
    0.00 :   ffffffff9454134d:       test   %esi,%esi
    0.00 :   ffffffff9454134f:       je     0xffffffff94541386
    0.00 :   ffffffff94541351:       mov    0x50(%rdx),%rdx
    0.00 :   ffffffff94541355:       test   %rcx,%rcx
    0.00 :   ffffffff94541358:       je     0xffffffff9454138f
    0.00 :   ffffffff9454135a:       mov    0x40(%rcx),%rcx
    0.00 :   ffffffff9454135e:       cmp    %rdx,%rcx
    0.00 :   ffffffff94541361:       cmovs  %rcx,%rdx
    0.00 :   ffffffff94541365:       mov    %rdx,%rcx
    0.00 :   ffffffff94541368:       sub    %rax,%rcx
    0.00 :   ffffffff9454136b:       test   %rcx,%rcx
    0.00 :   ffffffff9454136e:       cmovg  %rdx,%rax
    0.00 :   ffffffff94541372:       mov    %rax,0x28(%rdi)
    0.00 :   ffffffff94541376:       pop    %rbp
    0.00 :   ffffffff94541377:       xor    %eax,%eax
    0.00 :   ffffffff94541379:       xor    %edx,%edx
    0.00 :   ffffffff9454137b:       xor    %ecx,%ecx
    0.00 :   ffffffff9454137d:       xor    %esi,%esi
    0.00 :   ffffffff9454137f:       xor    %edi,%edi
    0.00 :   ffffffff94541381:       ret
    0.00 :   ffffffff94541382:       int3
    0.00 :   ffffffff94541383:       int3
    0.00 :   ffffffff94541384:       int3
    0.00 :   ffffffff94541385:       int3
    0.00 :   ffffffff94541386:       test   %rcx,%rcx
    0.00 :   ffffffff94541389:       je     0xffffffff94541372
    0.00 :   ffffffff9454138b:       mov    0x40(%rcx),%rdx
    0.00 :   ffffffff9454138f:       mov    %rdx,%rcx
    0.00 :   ffffffff94541392:       pop    %rbp
    0.00 :   ffffffff94541393:       sub    %rax,%rcx
    0.00 :   ffffffff94541396:       test   %rcx,%rcx
    0.00 :   ffffffff94541399:       cmovg  %rdx,%rax
    0.00 :   ffffffff9454139d:       mov    %rax,0x28(%rdi)
    0.00 :   ffffffff945413a1:       xor    %eax,%eax
    0.00 :   ffffffff945413a3:       xor    %edx,%edx
    0.00 :   ffffffff945413a5:       xor    %ecx,%ecx
    0.00 :   ffffffff945413a7:       xor    %esi,%esi
    0.00 :   ffffffff945413a9:       xor    %edi,%edi
    0.00 :   ffffffff945413ab:       ret
    0.00 :   ffffffff945413ac:       int3
    0.00 :   ffffffff945413ad:       int3
    0.00 :   ffffffff945413ae:       int3
    0.00 :   ffffffff945413af:       int3
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000019d9e0 <__strlen_avx2>:
         : 6      __strlen_avx2():
         : 7      ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:50
    0.00 :   19d9e0: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:63
    0.00 :   19d9e4: mov    %edi,%eax
         : 11     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:64
    0.00 :   19d9e6: mov    %rdi,%rdx
         : 13     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:65
    0.00 :   19d9e9: vpxor  %xmm0,%xmm0,%xmm0
         : 15     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:68
    0.00 :   19d9ed: and    $0xfff,%eax
         : 17     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:70
    0.00 :   19d9f2: cmp    $0xfe0,%eax
         : 19     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:71
    0.00 :   19d9f7: ja     19db30 <__strlen_avx2+0x150>
         : 21     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:74
  100.00 :   19d9fd: vpcmpeqb (%rdi),%ymm0,%ymm1
         : 23     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:75
    0.00 :   19da01: vpmovmskb %ymm1,%eax
         : 25     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:83
    0.00 :   19da05: test   %eax,%eax
         : 27     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:84
    0.00 :   19da07: je     19da60 <__strlen_avx2+0x80>
         : 29     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:85
    0.00 :   19da09: tzcnt  %eax,%eax
         : 31     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:90
    0.00 :   19da0d: vzeroupper
    0.00 :   19da10: ret
    0.00 :   19da11: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19da1c: nopl   0x0(%rax)
         : 36     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:116
    0.00 :   19da20: tzcnt  %eax,%eax
         : 38     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:129
    0.00 :   19da24: sub    %edx,%edi
         : 40     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:130
    0.00 :   19da26: inc    %edi
         : 42     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:131
    0.00 :   19da28: add    %edi,%eax
         : 44     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:137
    0.00 :   19da2a: vzeroupper
    0.00 :   19da2d: ret
    0.00 :   19da2e: xchg   %ax,%ax
         : 48     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:141
    0.00 :   19da30: tzcnt  %eax,%eax
         : 50     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:154
    0.00 :   19da34: sub    %edx,%edi
         : 52     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:155
    0.00 :   19da36: add    $0x21,%edi
         : 54     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:156
    0.00 :   19da39: add    %edi,%eax
         : 56     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:162
    0.00 :   19da3b: vzeroupper
    0.00 :   19da3e: ret
    0.00 :   19da3f: nop
         : 60     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:166
    0.00 :   19da40: tzcnt  %eax,%eax
         : 62     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:179
    0.00 :   19da44: sub    %edx,%edi
         : 64     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:180
    0.00 :   19da46: add    $0x41,%edi
         : 66     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:181
    0.00 :   19da49: add    %edi,%eax
         : 68     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:187
    0.00 :   19da4b: vzeroupper
    0.00 :   19da4e: ret
    0.00 :   19da4f: nop
         : 72     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:191
    0.00 :   19da50: tzcnt  %eax,%eax
         : 74     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:204
    0.00 :   19da54: sub    %edx,%edi
         : 76     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:205
    0.00 :   19da56: add    $0x61,%edi
         : 78     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:206
    0.00 :   19da59: add    %edi,%eax
         : 80     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:212
    0.00 :   19da5b: vzeroupper
    0.00 :   19da5e: ret
    0.00 :   19da5f: nop
         : 84     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:219
    0.00 :   19da60: or     $0x1f,%rdi
         : 86     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:234
    0.00 :   19da64: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
         : 88     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:240
    0.00 :   19da69: vpmovmskb %ymm1,%eax
         : 90     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:241
    0.00 :   19da6d: test   %eax,%eax
         : 92     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:242
    0.00 :   19da6f: jne    19da20 <__strlen_avx2+0x40>
         : 94     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:244
    0.00 :   19da71: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
         : 96     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:245
    0.00 :   19da76: vpmovmskb %ymm1,%eax
         : 98     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:246
    0.00 :   19da7a: test   %eax,%eax
         : 100    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:247
    0.00 :   19da7c: jne    19da30 <__strlen_avx2+0x50>
         : 102    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:249
    0.00 :   19da7e: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
         : 104    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:250
    0.00 :   19da83: vpmovmskb %ymm1,%eax
         : 106    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:251
    0.00 :   19da87: test   %eax,%eax
         : 108    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:252
    0.00 :   19da89: jne    19da40 <__strlen_avx2+0x60>
         : 110    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:254
    0.00 :   19da8b: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
         : 112    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:255
    0.00 :   19da90: vpmovmskb %ymm1,%eax
         : 114    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:256
    0.00 :   19da94: test   %eax,%eax
         : 116    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:257
    0.00 :   19da96: jne    19da50 <__strlen_avx2+0x70>
         : 118    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:275
    0.00 :   19da98: inc    %rdi
         : 120    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:276
    0.00 :   19da9b: or     $0x7f,%rdi
    0.00 :   19da9f: nop
         : 123    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:290
    0.00 :   19daa0: vmovdqa 0x1(%rdi),%ymm1
         : 125    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:291
    0.00 :   19daa5: vpminub 0x21(%rdi),%ymm1,%ymm2
         : 127    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:292
    0.00 :   19daaa: vmovdqa 0x41(%rdi),%ymm3
         : 129    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:293
    0.00 :   19daaf: vpminub 0x61(%rdi),%ymm3,%ymm4
         : 131    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:295
    0.00 :   19dab4: vpminub %ymm2,%ymm4,%ymm5
         : 133    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:296
    0.00 :   19dab8: vpcmpeqb %ymm5,%ymm0,%ymm5
         : 135    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:297
    0.00 :   19dabc: vpmovmskb %ymm5,%ecx
         : 137    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:299
    0.00 :   19dac0: sub    $0xffffffffffffff80,%rdi
         : 139    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:300
    0.00 :   19dac4: test   %ecx,%ecx
         : 141    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:301
    0.00 :   19dac6: je     19daa0 <__strlen_avx2+0xc0>
         : 143    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:304
    0.00 :   19dac8: vpcmpeqb %ymm1,%ymm0,%ymm1
         : 145    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:305
    0.00 :   19dacc: vpmovmskb %ymm1,%eax
         : 147    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:306
    0.00 :   19dad0: sub    %rdx,%rdi
         : 149    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:307
    0.00 :   19dad3: test   %eax,%eax
         : 151    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:308
    0.00 :   19dad5: jne    19db10 <__strlen_avx2+0x130>
         : 153    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:310
    0.00 :   19dad7: vpcmpeqb %ymm2,%ymm0,%ymm2
         : 155    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:311
    0.00 :   19dadb: vpmovmskb %ymm2,%eax
         : 157    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:312
    0.00 :   19dadf: test   %eax,%eax
         : 159    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:313
    0.00 :   19dae1: jne    19db20 <__strlen_avx2+0x140>
         : 161    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:316
    0.00 :   19dae3: vpcmpeqb %ymm3,%ymm0,%ymm3
         : 163    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:317
    0.00 :   19dae7: vpmovmskb %ymm3,%eax
         : 165    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:320
    0.00 :   19daeb: shl    $0x20,%rcx
         : 167    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:321
    0.00 :   19daef: or     %rcx,%rax
         : 169    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:322
    0.00 :   19daf2: tzcnt  %rax,%rax
         : 171    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:323
    0.00 :   19daf7: sub    $0x3f,%rdi
         : 173    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:324
    0.00 :   19dafb: add    %rdi,%rax
         : 175    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:329
    0.00 :   19dafe: vzeroupper
    0.00 :   19db01: ret
    0.00 :   19db02: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19db0d: nopl   (%rax)
         : 180    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:379
    0.00 :   19db10: tzcnt  %eax,%eax
         : 182    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:380
    0.00 :   19db14: sub    $0x7f,%rdi
         : 184    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:381
    0.00 :   19db18: add    %rdi,%rax
         : 186    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:386
    0.00 :   19db1b: vzeroupper
    0.00 :   19db1e: ret
    0.00 :   19db1f: nop
         : 190    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:390
    0.00 :   19db20: tzcnt  %eax,%eax
         : 192    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:391
    0.00 :   19db24: sub    $0x5f,%rdi
         : 194    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:392
    0.00 :   19db28: add    %rdi,%rax
         : 196    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:397
    0.00 :   19db2b: vzeroupper
    0.00 :   19db2e: ret
    0.00 :   19db2f: nop
         : 200    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:509
    0.00 :   19db30: or     $0x1f,%rdi
         : 202    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:510
    0.00 :   19db34: vpcmpeqb -0x1f(%rdi),%ymm0,%ymm1
         : 204    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:511
    0.00 :   19db39: vpmovmskb %ymm1,%eax
         : 206    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:514
    0.00 :   19db3d: sarx   %edx,%eax,%eax
         : 208    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:529
    0.00 :   19db42: test   %eax,%eax
         : 210    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:530
    0.00 :   19db44: je     19da64 <__strlen_avx2+0x84>
         : 212    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:531
    0.00 :   19db4a: tzcnt  %eax,%eax
         : 214    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:538
    0.00 :   19db4e: vzeroupper
    0.00 :   19db51: ret
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff954abe10 <load0>:
    0.00 :   ffffffff954abe10:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff954abe15:       push   %rbp
    0.00 :   ffffffff954abe16:       mov    %rsi,%r8
    0.00 :   ffffffff954abe19:       mov    %rsp,%rbp
    0.00 :   ffffffff954abe1c:       movb   $0x0,(%rdi)
    0.00 :   ffffffff954abe1f:       nopl   (%rax)
    0.00 :   ffffffff954abe22:       test   $0x200,%r8d
    0.00 :   ffffffff954abe29:       je     0xffffffff954abe31
    0.00 :   ffffffff954abe2b:       sti
    0.00 :   ffffffff954abe2c:       nopl   0x0(%rax,%rax,1)
  100.00 :   ffffffff954abe31:       decl   %gs:0x6ab85a10(%rip)        # 0x31848
    0.00 :   ffffffff954abe38:       je     0xffffffff954abe4d
    0.00 :   ffffffff954abe3a:       pop    %rbp
    0.00 :   ffffffff954abe3b:       xor    %eax,%eax
    0.00 :   ffffffff954abe3d:       xor    %edx,%edx
    0.00 :   ffffffff954abe3f:       xor    %ecx,%ecx
    0.00 :   ffffffff954abe41:       xor    %esi,%esi
    0.00 :   ffffffff954abe43:       xor    %edi,%edi
    0.00 :   ffffffff954abe45:       xor    %r8d,%r8d
    0.00 :   ffffffff954abe48:       ret
    0.00 :   ffffffff954abe49:       int3
    0.00 :   ffffffff954abe4a:       int3
    0.00 :   ffffffff954abe4b:       int3
    0.00 :   ffffffff954abe4c:       int3
    0.00 :   ffffffff954abe4d:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff954abe52:       pop    %rbp
    0.00 :   ffffffff954abe53:       xor    %eax,%eax
    0.00 :   ffffffff954abe55:       xor    %edx,%edx
    0.00 :   ffffffff954abe57:       xor    %ecx,%ecx
    0.00 :   ffffffff954abe59:       xor    %esi,%esi
    0.00 :   ffffffff954abe5b:       xor    %edi,%edi
    0.00 :   ffffffff954abe5d:       xor    %r8d,%r8d
    0.00 :   ffffffff954abe60:       ret
    0.00 :   ffffffff954abe61:       int3
    0.00 :   ffffffff954abe62:       int3
    0.00 :   ffffffff954abe63:       int3
    0.00 :   ffffffff954abe64:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9455fc30 <load0>:
    0.00 :   ffffffff9455fc30:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9455fc35:       push   %rbp
    0.00 :   ffffffff9455fc36:       mov    %rsp,%rbp
    0.00 :   ffffffff9455fc39:       push   %r15
    0.00 :   ffffffff9455fc3b:       push   %r14
    0.00 :   ffffffff9455fc3d:       push   %r13
    0.00 :   ffffffff9455fc3f:       push   %r12
    0.00 :   ffffffff9455fc41:       mov    %rdx,%r12
    0.00 :   ffffffff9455fc44:       push   %rbx
    0.00 :   ffffffff9455fc45:       and    $0xfffffffffffffff0,%rsp
    0.00 :   ffffffff9455fc49:       sub    $0x40,%rsp
    0.00 :   ffffffff9455fc4d:       mov    0x38(%rdx),%r13d
    0.00 :   ffffffff9455fc51:       mov    0x50(%rsi),%rcx
    0.00 :   ffffffff9455fc55:       test   %r13d,%r13d
    0.00 :   ffffffff9455fc58:       setne  %bl
    0.00 :   ffffffff9455fc5b:       cmpq   $0x0,0x80(%rdx)
    0.00 :   ffffffff9455fc63:       movzbl %bl,%r8d
    0.00 :   ffffffff9455fc67:       je     0xffffffff9455fc70
    0.00 :   ffffffff9455fc69:       mov    0x88(%rdx),%r8
    0.00 :   ffffffff9455fc70:       mov    0xc0(%r12),%rdx
    0.00 :   ffffffff9455fc78:       mov    %rdi,%rax
    0.00 :   ffffffff9455fc7b:       sub    %rdx,%rax
    0.00 :   ffffffff9455fc7e:       js     0xffffffff9455fe08
    0.00 :   ffffffff9455fc84:       mov    %rax,%rsi
    0.00 :   ffffffff9455fc87:       shr    $0xa,%rsi
    0.00 :   ffffffff9455fc8b:       je     0xffffffff9455fddf
    0.00 :   ffffffff9455fc91:       and    $0xfffffffffffffc00,%rax
    0.00 :   ffffffff9455fc97:       mov    %esi,%r15d
    0.00 :   ffffffff9455fc9a:       add    %rdx,%rax
    0.00 :   ffffffff9455fc9d:       mov    0xdc(%r12),%edx
    0.00 :   ffffffff9455fca5:       mov    %rax,0xc0(%r12)
    0.00 :   ffffffff9455fcad:       mov    %rdx,%r10
    0.00 :   ffffffff9455fcb0:       add    %rsi,%rdx
    0.00 :   ffffffff9455fcb3:       mov    %rdx,%r9
    0.00 :   ffffffff9455fcb6:       shr    $0xa,%r9
    0.00 :   ffffffff9455fcba:       test   %r13d,%r13d
    0.00 :   ffffffff9455fcbd:       je     0xffffffff9455fe39
    0.00 :   ffffffff9455fcc3:       xor    %r11d,%r11d
    0.00 :   ffffffff9455fcc6:       cmp    %r12,%rcx
    0.00 :   ffffffff9455fcc9:       sete   %r11b
    0.00 :   ffffffff9455fccd:       cmp    $0x3ff,%rdx
    0.00 :   ffffffff9455fcd4:       ja     0xffffffff9455ff0b
    0.00 :   ffffffff9455fcda:       mov    %edx,0xdc(%r12)
    0.00 :   ffffffff9455fce2:       mov    0xc8(%r12),%rsi
    0.00 :   ffffffff9455fcea:       mov    %edx,%r14d
    0.00 :   ffffffff9455fced:       movzbl %bl,%ebx
    0.00 :   ffffffff9455fcf0:       mov    %r15d,%eax
    0.00 :   ffffffff9455fcf3:       imul   %rax,%rbx
    0.00 :   ffffffff9455fcf7:       add    %rsi,%rbx
    0.00 :   ffffffff9455fcfa:       mov    %rbx,0xc8(%r12)
    0.00 :   ffffffff9455fd02:       test   %r8,%r8
    0.00 :   ffffffff9455fd05:       je     0xffffffff9455fd1a
    0.00 :   ffffffff9455fd07:       mov    %r15d,%eax
    0.00 :   ffffffff9455fd0a:       imul   %r8,%rax
    0.00 :   ffffffff9455fd0e:       shl    $0xa,%rax
    0.00 :   ffffffff9455fd12:       add    %rax,0xd0(%r12)
    0.00 :   ffffffff9455fd1a:       test   %r11d,%r11d
    0.00 :   ffffffff9455fd1d:       je     0xffffffff9455fd2b
    0.00 :   ffffffff9455fd1f:       shl    $0xa,%r15d
    0.00 :   ffffffff9455fd23:       add    %r15d,0xd8(%r12)
    0.00 :   ffffffff9455fd2b:       test   %r9d,%r9d
    0.00 :   ffffffff9455fd2e:       je     0xffffffff9455fddf
    0.00 :   ffffffff9455fd34:       mov    (%r12),%rax
    0.00 :   ffffffff9455fd38:       test   %rax,%rax
    0.00 :   ffffffff9455fd3b:       je     0xffffffff9455fd4d
    0.00 :   ffffffff9455fd3d:       shr    $0xa,%rax
    0.00 :   ffffffff9455fd41:       mov    $0x2,%edx
    0.00 :   ffffffff9455fd46:       cmp    %rdx,%rax
    0.00 :   ffffffff9455fd49:       cmovb  %rdx,%rax
    0.00 :   ffffffff9455fd4d:       imul   0xc8(%r12),%rax
    0.00 :   ffffffff9455fd56:       lea    0xb67e(%r14),%ecx
    0.00 :   ffffffff9455fd5d:       xor    %edx,%edx
    0.00 :   ffffffff9455fd5f:       div    %rcx
    0.00 :   ffffffff9455fd62:       xor    %edx,%edx
    0.00 :   ffffffff9455fd64:       mov    %rax,0xe0(%r12)
    0.00 :   ffffffff9455fd6c:       mov    0xd0(%r12),%rax
  100.00 :   ffffffff9455fd74:       div    %rcx
    0.00 :   ffffffff9455fd77:       xor    %edx,%edx
    0.00 :   ffffffff9455fd79:       mov    %rax,0xe8(%r12)
    0.00 :   ffffffff9455fd81:       mov    0xd8(%r12),%eax
    0.00 :   ffffffff9455fd89:       div    %ecx
    0.00 :   ffffffff9455fd8b:       mov    %rax,0xf0(%r12)
    0.00 :   ffffffff9455fd93:       xchg   %ax,%ax
    0.00 :   ffffffff9455fd95:       mov    0xf8(%r12),%eax
    0.00 :   ffffffff9455fd9d:       test   %eax,%eax
    0.00 :   ffffffff9455fd9f:       jns    0xffffffff9455fdae
    0.00 :   ffffffff9455fda1:       and    $0x7fffffff,%eax
    0.00 :   ffffffff9455fda6:       mov    %eax,0xf8(%r12)
    0.00 :   ffffffff9455fdae:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9455fdb3:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff9455fdb7:       mov    $0x1,%eax
    0.00 :   ffffffff9455fdbc:       pop    %rbx
    0.00 :   ffffffff9455fdbd:       pop    %r12
    0.00 :   ffffffff9455fdbf:       pop    %r13
    0.00 :   ffffffff9455fdc1:       pop    %r14
    0.00 :   ffffffff9455fdc3:       pop    %r15
    0.00 :   ffffffff9455fdc5:       pop    %rbp
    0.00 :   ffffffff9455fdc6:       xor    %edx,%edx
    0.00 :   ffffffff9455fdc8:       xor    %ecx,%ecx
    0.00 :   ffffffff9455fdca:       xor    %esi,%esi
    0.00 :   ffffffff9455fdcc:       xor    %edi,%edi
    0.00 :   ffffffff9455fdce:       xor    %r8d,%r8d
    0.00 :   ffffffff9455fdd1:       xor    %r9d,%r9d
    0.00 :   ffffffff9455fdd4:       xor    %r10d,%r10d
    0.00 :   ffffffff9455fdd7:       xor    %r11d,%r11d
    0.00 :   ffffffff9455fdda:       ret
    0.00 :   ffffffff9455fddb:       int3
    0.00 :   ffffffff9455fddc:       int3
    0.00 :   ffffffff9455fddd:       int3
    0.00 :   ffffffff9455fdde:       int3
    0.00 :   ffffffff9455fddf:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff9455fde3:       xor    %eax,%eax
    0.00 :   ffffffff9455fde5:       pop    %rbx
    0.00 :   ffffffff9455fde6:       pop    %r12
    0.00 :   ffffffff9455fde8:       pop    %r13
    0.00 :   ffffffff9455fdea:       pop    %r14
    0.00 :   ffffffff9455fdec:       pop    %r15
    0.00 :   ffffffff9455fdee:       pop    %rbp
    0.00 :   ffffffff9455fdef:       xor    %edx,%edx
    0.00 :   ffffffff9455fdf1:       xor    %ecx,%ecx
    0.00 :   ffffffff9455fdf3:       xor    %esi,%esi
    0.00 :   ffffffff9455fdf5:       xor    %edi,%edi
    0.00 :   ffffffff9455fdf7:       xor    %r8d,%r8d
    0.00 :   ffffffff9455fdfa:       xor    %r9d,%r9d
    0.00 :   ffffffff9455fdfd:       xor    %r10d,%r10d
    0.00 :   ffffffff9455fe00:       xor    %r11d,%r11d
    0.00 :   ffffffff9455fe03:       ret
    0.00 :   ffffffff9455fe04:       int3
    0.00 :   ffffffff9455fe05:       int3
    0.00 :   ffffffff9455fe06:       int3
    0.00 :   ffffffff9455fe07:       int3
    0.00 :   ffffffff9455fe08:       mov    %rdi,0xc0(%r12)
    0.00 :   ffffffff9455fe10:       lea    -0x28(%rbp),%rsp
    0.00 :   ffffffff9455fe14:       xor    %eax,%eax
    0.00 :   ffffffff9455fe16:       pop    %rbx
    0.00 :   ffffffff9455fe17:       pop    %r12
    0.00 :   ffffffff9455fe19:       pop    %r13
    0.00 :   ffffffff9455fe1b:       pop    %r14
    0.00 :   ffffffff9455fe1d:       pop    %r15
    0.00 :   ffffffff9455fe1f:       pop    %rbp
    0.00 :   ffffffff9455fe20:       xor    %edx,%edx
    0.00 :   ffffffff9455fe22:       xor    %ecx,%ecx
    0.00 :   ffffffff9455fe24:       xor    %esi,%esi
    0.00 :   ffffffff9455fe26:       xor    %edi,%edi
    0.00 :   ffffffff9455fe28:       xor    %r8d,%r8d
    0.00 :   ffffffff9455fe2b:       xor    %r9d,%r9d
    0.00 :   ffffffff9455fe2e:       xor    %r10d,%r10d
    0.00 :   ffffffff9455fe31:       xor    %r11d,%r11d
    0.00 :   ffffffff9455fe34:       ret
    0.00 :   ffffffff9455fe35:       int3
    0.00 :   ffffffff9455fe36:       int3
    0.00 :   ffffffff9455fe37:       int3
    0.00 :   ffffffff9455fe38:       int3
    0.00 :   ffffffff9455fe39:       cmp    $0x3ff,%rdx
    0.00 :   ffffffff9455fe40:       ja     0xffffffff9455fe52
    0.00 :   ffffffff9455fe42:       mov    %edx,0xdc(%r12)
    0.00 :   ffffffff9455fe4a:       mov    %edx,%r14d
    0.00 :   ffffffff9455fe4d:       jmp    0xffffffff9455fd2b
    0.00 :   ffffffff9455fe52:       mov    %edx,%r14d
    0.00 :   ffffffff9455fe55:       mov    0xc8(%r12),%rax
    0.00 :   ffffffff9455fe5d:       and    $0x3ff,%r14d
    0.00 :   ffffffff9455fe64:       cmp    $0x7e0,%r9
    0.00 :   ffffffff9455fe6b:       ja     0xffffffff945600c9
    0.00 :   ffffffff9455fe71:       xor    %r8d,%r8d
    0.00 :   ffffffff9455fe74:       xor    %r11d,%r11d
    0.00 :   ffffffff9455fe77:       cmp    $0x1f,%r9
    0.00 :   ffffffff9455fe7b:       ja     0xffffffff94560008
    0.00 :   ffffffff9455fe81:       mov    %r9d,%esi
    0.00 :   ffffffff9455fe84:       cmp    $0x1f,%r9d
    0.00 :   ffffffff9455fe88:       ja     0xffffffff9456019a
    0.00 :   ffffffff9455fe8e:       mov    -0x6a7d9620(,%rsi,4),%ecx
    0.00 :   ffffffff9455fe95:       mul    %rcx
    0.00 :   ffffffff9455fe98:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff9455fe9d:       mov    %rax,0xc8(%r12)
    0.00 :   ffffffff9455fea5:       mov    0xd0(%r12),%rax
    0.00 :   ffffffff9455fead:       cmp    $0x1f,%rsi
    0.00 :   ffffffff9455feb1:       ja     0xffffffff94560143
    0.00 :   ffffffff9455feb7:       mul    %rcx
    0.00 :   ffffffff9455feba:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff9455febf:       mov    %rax,0xd0(%r12)
    0.00 :   ffffffff9455fec7:       mov    0xd8(%r12),%eax
    0.00 :   ffffffff9455fecf:       cmp    $0x1f,%rsi
    0.00 :   ffffffff9455fed3:       ja     0xffffffff945600f8
    0.00 :   ffffffff9455fed9:       mov    -0x6a7d9620(,%rsi,4),%ecx
    0.00 :   ffffffff9455fee0:       mul    %rcx
    0.00 :   ffffffff9455fee3:       mov    %rcx,0x38(%rsp)
    0.00 :   ffffffff9455fee8:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff9455feed:       mov    %eax,0xd8(%r12)
    0.00 :   ffffffff9455fef5:       test   %r13d,%r13d
    0.00 :   ffffffff9455fef8:       jne    0xffffffff9455ffb8
    0.00 :   ffffffff9455fefe:       mov    %r14d,0xdc(%r12)
    0.00 :   ffffffff9455ff06:       jmp    0xffffffff9455fd02
    0.00 :   ffffffff9455ff0b:       and    $0x3ff,%edx
    0.00 :   ffffffff9455ff11:       mov    0xc8(%r12),%rax
    0.00 :   ffffffff9455ff19:       mov    %edx,%r14d
    0.00 :   ffffffff9455ff1c:       cmp    $0x7e0,%r9
    0.00 :   ffffffff9455ff23:       jbe    0xffffffff9455fe77
    0.00 :   ffffffff9455ff29:       movq   $0x0,0xc8(%r12)
    0.00 :   ffffffff9455ff35:       mov    %edx,%ecx
    0.00 :   ffffffff9455ff37:       xor    %esi,%esi
    0.00 :   ffffffff9455ff39:       xor    %eax,%eax
    0.00 :   ffffffff9455ff3b:       movq   $0x0,0xd0(%r12)
    0.00 :   ffffffff9455ff47:       movl   $0x0,0xd8(%r12)
    0.00 :   ffffffff9455ff53:       lea    0xb67e(%rcx),%edx
    0.00 :   ffffffff9455ff59:       mov    %r14d,0xdc(%r12)
    0.00 :   ffffffff9455ff61:       sub    %eax,%edx
    0.00 :   ffffffff9455ff63:       mov    %edx,%r15d
    0.00 :   ffffffff9455ff66:       jmp    0xffffffff9455fced
    0.00 :   ffffffff9455ff6b:       mov    %gs:0x6bad18da(%rip),%eax        # 0x3184c
    0.00 :   ffffffff9455ff72:       mov    %eax,%eax
    0.00 :   ffffffff9455ff74:       bt     %rax,0x24a0ba4(%rip)        # 0xffffffff96a00b20
    0.00 :   ffffffff9455ff7c:       jae    0xffffffff9455fdb3
    0.00 :   ffffffff9455ff82:       incl   %gs:0x6bad18bf(%rip)        # 0x31848
    0.00 :   ffffffff9455ff89:       mov    0x2455910(%rip),%rax        # 0xffffffff969b58a0
    0.00 :   ffffffff9455ff90:       test   %rax,%rax
    0.00 :   ffffffff9455ff93:       je     0xffffffff9455ffa1
    0.00 :   ffffffff9455ff95:       mov    0x8(%rax),%rdi
    0.00 :   ffffffff9455ff99:       mov    %r12,%rsi
    0.00 :   ffffffff9455ff9c:       call   0xffffffff9452be50
    0.00 :   ffffffff9455ffa1:       decl   %gs:0x6bad18a0(%rip)        # 0x31848
    0.00 :   ffffffff9455ffa8:       jne    0xffffffff9455fdb3
    0.00 :   ffffffff9455ffae:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9455ffb3:       jmp    0xffffffff9455fdb3
    0.00 :   ffffffff9455ffb8:       mov    $0x400,%r13d
    0.00 :   ffffffff9455ffbe:       sub    %r10d,%r13d
    0.00 :   ffffffff9455ffc1:       cmp    $0x1f,%rsi
    0.00 :   ffffffff9455ffc5:       ja     0xffffffff945602c2
    0.00 :   ffffffff9455ffcb:       mov    -0x6a7d9620(,%rsi,4),%eax
    0.00 :   ffffffff9455ffd2:       mov    %r9d,%esi
    0.00 :   ffffffff9455ffd5:       mul    %r13
    0.00 :   ffffffff9455ffd8:       shr    $0x20,%rax
    0.00 :   ffffffff9455ffdc:       mov    %rax,%r13
    0.00 :   ffffffff9455ffdf:       mov    $0xba7e,%eax
    0.00 :   ffffffff9455ffe4:       cmp    $0x1f,%rsi
    0.00 :   ffffffff9455ffe8:       ja     0xffffffff94560289
    0.00 :   ffffffff9455ffee:       mulq   0x38(%rsp)
    0.00 :   ffffffff9455fff3:       mov    0xc8(%r12),%rsi
    0.00 :   ffffffff9455fffb:       lea    (%r14,%r13,1),%ecx
    0.00 :   ffffffff9455ffff:       shr    $0x20,%rax
    0.00 :   ffffffff94560003:       jmp    0xffffffff9455ff53
    0.00 :   ffffffff94560008:       mov    %r9,%rsi
    0.00 :   ffffffff9456000b:       mov    %r9d,%ecx
    0.00 :   ffffffff9456000e:       and    $0x1f,%esi
    0.00 :   ffffffff94560011:       shr    $0x5,%ecx
    0.00 :   ffffffff94560014:       mov    -0x6a7d9620(,%rsi,4),%edi
    0.00 :   ffffffff9456001b:       shr    %cl,%rax
    0.00 :   ffffffff9456001e:       mul    %rdi
    0.00 :   ffffffff94560021:       mov    %rdi,0x38(%rsp)
    0.00 :   ffffffff94560026:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff9456002b:       mov    %rax,0xc8(%r12)
    0.00 :   ffffffff94560033:       mov    0xd0(%r12),%rax
    0.00 :   ffffffff9456003b:       shr    %cl,%rax
    0.00 :   ffffffff9456003e:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560042:       ja     0xffffffff94560234
    0.00 :   ffffffff94560048:       mulq   0x38(%rsp)
    0.00 :   ffffffff9456004d:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff94560052:       mov    %rax,0xd0(%r12)
    0.00 :   ffffffff9456005a:       mov    0xd8(%r12),%eax
    0.00 :   ffffffff94560062:       shr    %cl,%rax
    0.00 :   ffffffff94560065:       cmp    $0x1f,%rsi
    0.00 :   ffffffff94560069:       ja     0xffffffff945601e7
    0.00 :   ffffffff9456006f:       mov    -0x6a7d9620(,%rsi,4),%ecx
    0.00 :   ffffffff94560076:       mul    %rcx
    0.00 :   ffffffff94560079:       mov    %rcx,0x38(%rsp)
    0.00 :   ffffffff9456007e:       shrd   $0x20,%rdx,%rax
    0.00 :   ffffffff94560083:       mov    %eax,0xd8(%r12)
    0.00 :   ffffffff9456008b:       test   %r13d,%r13d
    0.00 :   ffffffff9456008e:       je     0xffffffff9455fefe
    0.00 :   ffffffff94560094:       mov    %r9,%rdx
    0.00 :   ffffffff94560097:       mov    %r9d,%ecx
    0.00 :   ffffffff9456009a:       mov    $0x400,%eax
    0.00 :   ffffffff9456009f:       and    $0x1f,%edx
    0.00 :   ffffffff945600a2:       shr    $0x5,%ecx
    0.00 :   ffffffff945600a5:       sub    %r10d,%eax
    0.00 :   ffffffff945600a8:       mov    -0x6a7d9620(,%rdx,4),%edx
    0.00 :   ffffffff945600af:       shr    %cl,%rax
    0.00 :   ffffffff945600b2:       mul    %rdx
    0.00 :   ffffffff945600b5:       shr    $0x20,%rax
    0.00 :   ffffffff945600b9:       mov    %rax,%r13
    0.00 :   ffffffff945600bc:       mov    $0xba7e,%eax
    0.00 :   ffffffff945600c1:       shr    %cl,%rax
    0.00 :   ffffffff945600c4:       jmp    0xffffffff9455ffe4
    0.00 :   ffffffff945600c9:       movq   $0x0,0xc8(%r12)
    0.00 :   ffffffff945600d5:       xor    %r8d,%r8d
    0.00 :   ffffffff945600d8:       xor    %r11d,%r11d
    0.00 :   ffffffff945600db:       movq   $0x0,0xd0(%r12)
    0.00 :   ffffffff945600e7:       movl   $0x0,0xd8(%r12)
    0.00 :   ffffffff945600f3:       jmp    0xffffffff9455fefe
    0.00 :   ffffffff945600f8:       mov    $0xffffffff96695000,%rdi
    0.00 :   ffffffff945600ff:       mov    %eax,0x10(%rsp)
    0.00 :   ffffffff94560103:       mov    %r11d,0x18(%rsp)
    0.00 :   ffffffff94560108:       mov    %r10d,0x20(%rsp)
    0.00 :   ffffffff9456010d:       mov    %r9,0x28(%rsp)
    0.00 :   ffffffff94560112:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560117:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff9456011c:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560121:       mov    0x10(%rsp),%eax
    0.00 :   ffffffff94560125:       mov    0x18(%rsp),%r11d
    0.00 :   ffffffff9456012a:       mov    0x20(%rsp),%r10d
    0.00 :   ffffffff9456012f:       mov    0x28(%rsp),%r9
    0.00 :   ffffffff94560134:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff94560139:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff9456013e:       jmp    0xffffffff9455fed9
    0.00 :   ffffffff94560143:       mov    $0xffffffff96695020,%rdi
    0.00 :   ffffffff9456014a:       mov    %rcx,0x8(%rsp)
    0.00 :   ffffffff9456014f:       mov    %rax,0x10(%rsp)
    0.00 :   ffffffff94560154:       mov    %r11d,0x18(%rsp)
    0.00 :   ffffffff94560159:       mov    %r10d,0x20(%rsp)
    0.00 :   ffffffff9456015e:       mov    %r9,0x28(%rsp)
    0.00 :   ffffffff94560163:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560168:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff9456016d:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560172:       mov    0x8(%rsp),%rcx
    0.00 :   ffffffff94560177:       mov    0x10(%rsp),%rax
    0.00 :   ffffffff9456017c:       mov    0x18(%rsp),%r11d
    0.00 :   ffffffff94560181:       mov    0x20(%rsp),%r10d
    0.00 :   ffffffff94560186:       mov    0x28(%rsp),%r9
    0.00 :   ffffffff9456018b:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff94560190:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff94560195:       jmp    0xffffffff9455feb7
    0.00 :   ffffffff9456019a:       mov    $0xffffffff96695040,%rdi
    0.00 :   ffffffff945601a1:       mov    %r11d,0x10(%rsp)
    0.00 :   ffffffff945601a6:       mov    %r10d,0x18(%rsp)
    0.00 :   ffffffff945601ab:       mov    %r9,0x20(%rsp)
    0.00 :   ffffffff945601b0:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff945601b5:       mov    %rax,0x30(%rsp)
    0.00 :   ffffffff945601ba:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff945601bf:       call   0xffffffff94c77aa0
    0.00 :   ffffffff945601c4:       mov    0x10(%rsp),%r11d
    0.00 :   ffffffff945601c9:       mov    0x18(%rsp),%r10d
    0.00 :   ffffffff945601ce:       mov    0x20(%rsp),%r9
    0.00 :   ffffffff945601d3:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff945601d8:       mov    0x30(%rsp),%rax
    0.00 :   ffffffff945601dd:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff945601e2:       jmp    0xffffffff9455fe8e
    0.00 :   ffffffff945601e7:       mov    $0xffffffff96695080,%rdi
    0.00 :   ffffffff945601ee:       mov    %r11d,0x10(%rsp)
    0.00 :   ffffffff945601f3:       mov    %r10d,0x18(%rsp)
    0.00 :   ffffffff945601f8:       mov    %rax,0x20(%rsp)
    0.00 :   ffffffff945601fd:       mov    %r9,0x28(%rsp)
    0.00 :   ffffffff94560202:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff94560207:       mov    %rsi,0x38(%rsp)
    0.00 :   ffffffff9456020c:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560211:       mov    0x10(%rsp),%r11d
    0.00 :   ffffffff94560216:       mov    0x18(%rsp),%r10d
    0.00 :   ffffffff9456021b:       mov    0x20(%rsp),%rax
    0.00 :   ffffffff94560220:       mov    0x28(%rsp),%r9
    0.00 :   ffffffff94560225:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff9456022a:       mov    0x38(%rsp),%rsi
    0.00 :   ffffffff9456022f:       jmp    0xffffffff9456006f
    0.00 :   ffffffff94560234:       mov    $0xffffffff966950a0,%rdi
    0.00 :   ffffffff9456023b:       mov    %r11d,0x4(%rsp)
    0.00 :   ffffffff94560240:       mov    %ecx,0x8(%rsp)
    0.00 :   ffffffff94560244:       mov    %rax,0x10(%rsp)
    0.00 :   ffffffff94560249:       mov    %r10d,0x18(%rsp)
    0.00 :   ffffffff9456024e:       mov    %r9,0x20(%rsp)
    0.00 :   ffffffff94560253:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff94560258:       mov    %rsi,0x30(%rsp)
    0.00 :   ffffffff9456025d:       call   0xffffffff94c77aa0
    0.00 :   ffffffff94560262:       mov    0x4(%rsp),%r11d
    0.00 :   ffffffff94560267:       mov    0x8(%rsp),%ecx
    0.00 :   ffffffff9456026b:       mov    0x10(%rsp),%rax
    0.00 :   ffffffff94560270:       mov    0x18(%rsp),%r10d
    0.00 :   ffffffff94560275:       mov    0x20(%rsp),%r9
    0.00 :   ffffffff9456027a:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff9456027f:       mov    0x30(%rsp),%rsi
    0.00 :   ffffffff94560284:       jmp    0xffffffff94560048
    0.00 :   ffffffff94560289:       mov    $0xffffffff96695060,%rdi
    0.00 :   ffffffff94560290:       mov    %rax,0x18(%rsp)
    0.00 :   ffffffff94560295:       mov    %r11d,0x20(%rsp)
    0.00 :   ffffffff9456029a:       mov    %r9,0x28(%rsp)
    0.00 :   ffffffff9456029f:       mov    %r8,0x30(%rsp)
    0.00 :   ffffffff945602a4:       call   0xffffffff94c77aa0
    0.00 :   ffffffff945602a9:       mov    0x18(%rsp),%rax
    0.00 :   ffffffff945602ae:       mov    0x20(%rsp),%r11d
    0.00 :   ffffffff945602b3:       mov    0x28(%rsp),%r9
    0.00 :   ffffffff945602b8:       mov    0x30(%rsp),%r8
    0.00 :   ffffffff945602bd:       jmp    0xffffffff9455ffee
    0.00 :   ffffffff945602c2:       mov    $0xffffffff96694fe0,%rdi
    0.00 :   ffffffff945602c9:       mov    %r11d,0x18(%rsp)
    0.00 :   ffffffff945602ce:       mov    %r9,0x20(%rsp)
    0.00 :   ffffffff945602d3:       mov    %r8,0x28(%rsp)
    0.00 :   ffffffff945602d8:       mov    %rsi,0x30(%rsp)
    0.00 :   ffffffff945602dd:       call   0xffffffff94c77aa0
    0.00 :   ffffffff945602e2:       mov    0x18(%rsp),%r11d
    0.00 :   ffffffff945602e7:       mov    0x20(%rsp),%r9
    0.00 :   ffffffff945602ec:       mov    0x28(%rsp),%r8
    0.00 :   ffffffff945602f1:       mov    0x30(%rsp),%rsi
    0.00 :   ffffffff945602f6:       jmp    0xffffffff9455ffcb
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94524070 <load0>:
    0.00 :   ffffffff94524070:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94524075:       push   %rbp
    0.00 :   ffffffff94524076:       mov    %rsp,%rbp
    0.00 :   ffffffff94524079:       push   %r14
    0.00 :   ffffffff9452407b:       push   %r13
    0.00 :   ffffffff9452407d:       push   %r12
    0.00 :   ffffffff9452407f:       push   %rbx
    0.00 :   ffffffff94524080:       mov    (%rdi),%rbx
    0.00 :   ffffffff94524083:       test   %rbx,%rbx
    0.00 :   ffffffff94524086:       je     0xffffffff945240d1
    0.00 :   ffffffff94524088:       mov    %rsi,%r12
    0.00 :   ffffffff9452408b:       mov    %rdx,%r13
    0.00 :   ffffffff9452408e:       mov    $0xffffffff,%r14d
    0.00 :   ffffffff94524094:       jmp    0xffffffff945240a4
    0.00 :   ffffffff94524096:       sub    $0x1,%r14d
    0.00 :   ffffffff9452409a:       test   %rbx,%rbx
    0.00 :   ffffffff9452409d:       je     0xffffffff945240be
    0.00 :   ffffffff9452409f:       test   %r14d,%r14d
    0.00 :   ffffffff945240a2:       je     0xffffffff945240be
    0.00 :   ffffffff945240a4:       mov    %rbx,%rdi
    0.00 :   ffffffff945240a7:       mov    %r13,%rdx
  100.00 :   ffffffff945240aa:       mov    0x8(%rbx),%rbx
    0.00 :   ffffffff945240ae:       mov    %r12,%rsi
    0.00 :   ffffffff945240b1:       mov    (%rdi),%rax
    0.00 :   ffffffff945240b4:       call   *%rax
    0.00 :   ffffffff945240b6:       nopl   (%rax)
    0.00 :   ffffffff945240b9:       test   $0x80,%ah
    0.00 :   ffffffff945240bc:       je     0xffffffff94524096
    0.00 :   ffffffff945240be:       pop    %rbx
    0.00 :   ffffffff945240bf:       pop    %r12
    0.00 :   ffffffff945240c1:       pop    %r13
    0.00 :   ffffffff945240c3:       pop    %r14
    0.00 :   ffffffff945240c5:       pop    %rbp
    0.00 :   ffffffff945240c6:       xor    %edx,%edx
    0.00 :   ffffffff945240c8:       xor    %esi,%esi
    0.00 :   ffffffff945240ca:       xor    %edi,%edi
    0.00 :   ffffffff945240cc:       ret
    0.00 :   ffffffff945240cd:       int3
    0.00 :   ffffffff945240ce:       int3
    0.00 :   ffffffff945240cf:       int3
    0.00 :   ffffffff945240d0:       int3
    0.00 :   ffffffff945240d1:       xor    %eax,%eax
    0.00 :   ffffffff945240d3:       jmp    0xffffffff945240be
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff945da280 <load0>:
    0.00 :   ffffffff945da280:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff945da285:       push   %rbp
    0.00 :   ffffffff945da286:       mov    %rsp,%rbp
    0.00 :   ffffffff945da289:       push   %r15
    0.00 :   ffffffff945da28b:       push   %r14
    0.00 :   ffffffff945da28d:       push   %r13
    0.00 :   ffffffff945da28f:       push   %r12
    0.00 :   ffffffff945da291:       mov    %esi,%r12d
    0.00 :   ffffffff945da294:       push   %rbx
    0.00 :   ffffffff945da295:       mov    %rdi,%rbx
    0.00 :   ffffffff945da298:       sub    $0x8,%rsp
    0.00 :   ffffffff945da29c:       and    $0x1,%esi
    0.00 :   ffffffff945da29f:       jne    0xffffffff945da3bc
    0.00 :   ffffffff945da2a5:       call   0xffffffff945dd190
    0.00 :   ffffffff945da2aa:       movabs $0x7fffffffffffffff,%rdx
    0.00 :   ffffffff945da2b4:       mov    %rax,0xb8(%rbx)
    0.00 :   ffffffff945da2bb:       cmp    %rdx,%rax
    0.00 :   ffffffff945da2be:       je     0xffffffff945da2ce
    0.00 :   ffffffff945da2c0:       sub    0x90(%rbx),%rax
    0.00 :   ffffffff945da2c7:       mov    %rax,0xb8(%rbx)
    0.00 :   ffffffff945da2ce:       mov    0x80(%rbx),%r13
    0.00 :   ffffffff945da2d5:       add    0x70(%rbx),%r13
    0.00 :   ffffffff945da2d9:       imul   $0x3b9aca00,%r13,%rax
    0.00 :   ffffffff945da2e0:       mov    0x88(%rbx),%r14
    0.00 :   ffffffff945da2e7:       mov    0x1c(%rbx),%ecx
    0.00 :   ffffffff945da2ea:       mov    0x20(%rbx),%r15
    0.00 :   ffffffff945da2ee:       mov    %r14d,%edx
    0.00 :   ffffffff945da2f1:       add    %rdx,%rax
    0.00 :   ffffffff945da2f4:       mov    %rax,0x28(%rbx)
    0.00 :   ffffffff945da2f8:       cmp    $0x3f,%ecx
    0.00 :   ffffffff945da2fb:       ja     0xffffffff954353d1
    0.00 :   ffffffff945da301:       shr    %cl,%r15
    0.00 :   ffffffff945da304:       mov    %rbx,%rdi
    0.00 :   ffffffff945da307:       add    %r15d,%r14d
    0.00 :   ffffffff945da30a:       cmp    $0x3b9aca00,%r14d
    0.00 :   ffffffff945da311:       sbb    $0xffffffffffffffff,%r13
    0.00 :   ffffffff945da315:       imul   $0x3b9aca00,0xc0(%rbx),%rax
    0.00 :   ffffffff945da320:       mov    %r13,0x78(%rbx)
    0.00 :   ffffffff945da324:       mov    %r12d,%r13d
    0.00 :   ffffffff945da327:       mov    %rax,0x60(%rbx)
    0.00 :   ffffffff945da32b:       call   0xffffffff945f02a0
    0.00 :   ffffffff945da330:       xor    %esi,%esi
    0.00 :   ffffffff945da332:       and    $0x4,%r13d
    0.00 :   ffffffff945da336:       mov    %rbx,%rdx
    0.00 :   ffffffff945da339:       setne  %sil
  100.00 :   ffffffff945da33d:       mov    $0xffffffff97bc5188,%rdi
    0.00 :   ffffffff945da344:       call   0xffffffff94524070
    0.00 :   ffffffff945da349:       mov    0x90(%rbx),%rax
    0.00 :   ffffffff945da350:       add    0x28(%rbx),%rax
    0.00 :   ffffffff945da354:       mov    %rbx,%rdi
    0.00 :   ffffffff945da357:       mov    %rax,0x30(%rbx)
    0.00 :   ffffffff945da35b:       mov    $0xffffffff967d9a40,%rsi
    0.00 :   ffffffff945da362:       call   0xffffffff945d9de0
    0.00 :   ffffffff945da367:       lea    0x38(%rbx),%rdi
    0.00 :   ffffffff945da36b:       mov    $0xffffffff967d99c0,%rsi
    0.00 :   ffffffff945da372:       call   0xffffffff945d9de0
    0.00 :   ffffffff945da377:       test   %r13d,%r13d
    0.00 :   ffffffff945da37a:       je     0xffffffff945da383
    0.00 :   ffffffff945da37c:       addl   $0x1,0xac(%rbx)
    0.00 :   ffffffff945da383:       and    $0x2,%r12d
    0.00 :   ffffffff945da387:       je     0xffffffff945da39f
    0.00 :   ffffffff945da389:       mov    $0xffffffff97bc51a0,%rdi
    0.00 :   ffffffff945da390:       mov    $0xffffffff97bc52c8,%rsi
    0.00 :   ffffffff945da397:       mov    $0x23,%ecx
    0.00 :   ffffffff945da39c:       rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :   ffffffff945da39f:       add    $0x8,%rsp
    0.00 :   ffffffff945da3a3:       pop    %rbx
    0.00 :   ffffffff945da3a4:       pop    %r12
    0.00 :   ffffffff945da3a6:       pop    %r13
    0.00 :   ffffffff945da3a8:       pop    %r14
    0.00 :   ffffffff945da3aa:       pop    %r15
    0.00 :   ffffffff945da3ac:       pop    %rbp
    0.00 :   ffffffff945da3ad:       xor    %eax,%eax
    0.00 :   ffffffff945da3af:       xor    %edx,%edx
    0.00 :   ffffffff945da3b1:       xor    %ecx,%ecx
    0.00 :   ffffffff945da3b3:       xor    %esi,%esi
    0.00 :   ffffffff945da3b5:       xor    %edi,%edi
    0.00 :   ffffffff945da3b7:       ret
    0.00 :   ffffffff945da3b8:       int3
    0.00 :   ffffffff945da3b9:       int3
    0.00 :   ffffffff945da3ba:       int3
    0.00 :   ffffffff945da3bb:       int3
    0.00 :   ffffffff945da3bc:       movq   $0x0,0x100(%rdi)
    0.00 :   ffffffff945da3c7:       call   0xffffffff945dd0e0
    0.00 :   ffffffff945da3cc:       jmp    0xffffffff945da2a5
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94571a00 <load0>:
    0.00 :   ffffffff94571a00:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff94571a05:       mov    0xe08(%rdi),%rax
    0.00 :   ffffffff94571a0c:       push   %rbp
  100.00 :   ffffffff94571a0d:       mov    0x10(%rax),%rax
    0.00 :   ffffffff94571a11:       mov    %rsp,%rbp
    0.00 :   ffffffff94571a14:       cmp    $0xffffffff966995a0,%rax
    0.00 :   ffffffff94571a1a:       je     0xffffffff94571a40
    0.00 :   ffffffff94571a1c:       movslq %esi,%rsi
    0.00 :   ffffffff94571a1f:       shl    $0x3,%rsi
    0.00 :   ffffffff94571a23:       mov    0xd0(%rax),%rcx
    0.00 :   ffffffff94571a2a:       add    %rsi,%rcx
    0.00 :   ffffffff94571a2d:       add    %rdx,%gs:(%rcx)
    0.00 :   ffffffff94571a31:       mov    0xc0(%rax),%rax
    0.00 :   ffffffff94571a38:       cmp    $0xffffffff966995a0,%rax
    0.00 :   ffffffff94571a3e:       jne    0xffffffff94571a23
    0.00 :   ffffffff94571a40:       pop    %rbp
    0.00 :   ffffffff94571a41:       xor    %eax,%eax
    0.00 :   ffffffff94571a43:       xor    %edx,%edx
    0.00 :   ffffffff94571a45:       xor    %ecx,%ecx
    0.00 :   ffffffff94571a47:       xor    %esi,%esi
    0.00 :   ffffffff94571a49:       xor    %edi,%edi
    0.00 :   ffffffff94571a4b:       ret
    0.00 :   ffffffff94571a4c:       int3
    0.00 :   ffffffff94571a4d:       int3
    0.00 :   ffffffff94571a4e:       int3
    0.00 :   ffffffff94571a4f:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff94c73d20 <load0>:
    0.00 :   ffffffff94c73d20:       test   %rdx,%rdx
    0.00 :   ffffffff94c73d23:       jle    0xffffffff94c73e74
    0.00 :   ffffffff94c73d29:       push   %rbp
    0.00 :   ffffffff94c73d2a:       mov    %rsp,%rbp
    0.00 :   ffffffff94c73d2d:       push   %r14
    0.00 :   ffffffff94c73d2f:       push   %r13
    0.00 :   ffffffff94c73d31:       mov    %rsi,%r13
    0.00 :   ffffffff94c73d34:       push   %r12
    0.00 :   ffffffff94c73d36:       push   %rbx
    0.00 :   ffffffff94c73d37:       movabs $0x7ffffffff000,%rbx
    0.00 :   ffffffff94c73d41:       cmp    %rbx,%rsi
    0.00 :   ffffffff94c73d44:       jae    0xffffffff94c73e1b
    0.00 :   ffffffff94c73d4a:       sub    %rsi,%rbx
    0.00 :   ffffffff94c73d4d:       mov    %rdx,%r14
    0.00 :   ffffffff94c73d50:       mov    %rdi,%r12
    0.00 :   ffffffff94c73d53:       cmp    %rdx,%rbx
    0.00 :   ffffffff94c73d56:       mov    %r14,%rsi
    0.00 :   ffffffff94c73d59:       cmova  %rdx,%rbx
    0.00 :   ffffffff94c73d5d:       xor    %edx,%edx
    0.00 :   ffffffff94c73d5f:       call   0xffffffff94871f10
    0.00 :   ffffffff94c73d64:       movabs $0x7ffffffff000,%rax
    0.00 :   ffffffff94c73d6e:       cmp    %rax,%rbx
    0.00 :   ffffffff94c73d71:       ja     0xffffffff94c73e1b
    0.00 :   ffffffff94c73d77:       sub    %rbx,%rax
    0.00 :   ffffffff94c73d7a:       cmp    %rax,%r13
    0.00 :   ffffffff94c73d7d:       ja     0xffffffff94c73e1b
    0.00 :   ffffffff94c73d83:       stac
    0.00 :   ffffffff94c73d86:       lfence
    0.00 :   ffffffff94c73d89:       movabs $0xfefefefefefefeff,%r8
    0.00 :   ffffffff94c73d93:       xor    %edx,%edx
    0.00 :   ffffffff94c73d95:       movabs $0x8080808080808080,%rcx
    0.00 :   ffffffff94c73d9f:       cmp    $0x7,%rbx
    0.00 :   ffffffff94c73da3:       ja     0xffffffff94c73dbc
    0.00 :   ffffffff94c73da5:       jmp    0xffffffff94c73e3f
    0.00 :   ffffffff94c73daa:       sub    $0x8,%rbx
    0.00 :   ffffffff94c73dae:       mov    %rsi,(%r12,%rdx,1)
    0.00 :   ffffffff94c73db2:       add    $0x8,%rdx
    0.00 :   ffffffff94c73db6:       cmp    $0x7,%rbx
    0.00 :   ffffffff94c73dba:       jbe    0xffffffff94c73e3a
  100.00 :   ffffffff94c73dbc:       mov    0x0(%r13,%rdx,1),%rsi
    0.00 :   ffffffff94c73dc1:       mov    %rsi,%rdi
    0.00 :   ffffffff94c73dc4:       lea    (%rsi,%r8,1),%rax
    0.00 :   ffffffff94c73dc8:       not    %rdi
    0.00 :   ffffffff94c73dcb:       and    %rdi,%rax
    0.00 :   ffffffff94c73dce:       lea    (%r12,%rdx,1),%rdi
    0.00 :   ffffffff94c73dd2:       and    %rcx,%rax
    0.00 :   ffffffff94c73dd5:       je     0xffffffff94c73daa
    0.00 :   ffffffff94c73dd7:       lea    -0x1(%rax),%rcx
    0.00 :   ffffffff94c73ddb:       not    %rax
    0.00 :   ffffffff94c73dde:       and    %rcx,%rax
    0.00 :   ffffffff94c73de1:       movabs $0x1020304050608,%rcx
    0.00 :   ffffffff94c73deb:       shr    $0x7,%rax
    0.00 :   ffffffff94c73def:       and    %rax,%rsi
    0.00 :   ffffffff94c73df2:       imul   %rcx,%rax
    0.00 :   ffffffff94c73df6:       mov    %rsi,(%rdi)
    0.00 :   ffffffff94c73df9:       shr    $0x38,%rax
    0.00 :   ffffffff94c73dfd:       add    %rdx,%rax
    0.00 :   ffffffff94c73e00:       clac
    0.00 :   ffffffff94c73e03:       pop    %rbx
    0.00 :   ffffffff94c73e04:       pop    %r12
    0.00 :   ffffffff94c73e06:       pop    %r13
    0.00 :   ffffffff94c73e08:       pop    %r14
    0.00 :   ffffffff94c73e0a:       pop    %rbp
    0.00 :   ffffffff94c73e0b:       xor    %edx,%edx
    0.00 :   ffffffff94c73e0d:       xor    %ecx,%ecx
    0.00 :   ffffffff94c73e0f:       xor    %esi,%esi
    0.00 :   ffffffff94c73e11:       xor    %edi,%edi
    0.00 :   ffffffff94c73e13:       xor    %r8d,%r8d
    0.00 :   ffffffff94c73e16:       ret
    0.00 :   ffffffff94c73e17:       int3
    0.00 :   ffffffff94c73e18:       int3
    0.00 :   ffffffff94c73e19:       int3
    0.00 :   ffffffff94c73e1a:       int3
    0.00 :   ffffffff94c73e1b:       pop    %rbx
    0.00 :   ffffffff94c73e1c:       mov    $0xfffffffffffffff2,%rax
    0.00 :   ffffffff94c73e23:       pop    %r12
    0.00 :   ffffffff94c73e25:       pop    %r13
    0.00 :   ffffffff94c73e27:       pop    %r14
    0.00 :   ffffffff94c73e29:       pop    %rbp
    0.00 :   ffffffff94c73e2a:       xor    %edx,%edx
    0.00 :   ffffffff94c73e2c:       xor    %ecx,%ecx
    0.00 :   ffffffff94c73e2e:       xor    %esi,%esi
    0.00 :   ffffffff94c73e30:       xor    %edi,%edi
    0.00 :   ffffffff94c73e32:       xor    %r8d,%r8d
    0.00 :   ffffffff94c73e35:       ret
    0.00 :   ffffffff94c73e36:       int3
    0.00 :   ffffffff94c73e37:       int3
    0.00 :   ffffffff94c73e38:       int3
    0.00 :   ffffffff94c73e39:       int3
    0.00 :   ffffffff94c73e3a:       test   %rbx,%rbx
    0.00 :   ffffffff94c73e3d:       je     0xffffffff94c73e86
    0.00 :   ffffffff94c73e3f:       mov    %rdx,%rax
    0.00 :   ffffffff94c73e42:       add    %rdx,%rbx
    0.00 :   ffffffff94c73e45:       mov    0x0(%r13,%rax,1),%dl
    0.00 :   ffffffff94c73e4a:       mov    %dl,(%r12,%rax,1)
    0.00 :   ffffffff94c73e4e:       test   %dl,%dl
    0.00 :   ffffffff94c73e50:       je     0xffffffff94c73e00
    0.00 :   ffffffff94c73e52:       add    $0x1,%rax
    0.00 :   ffffffff94c73e56:       cmp    %rbx,%rax
    0.00 :   ffffffff94c73e59:       jne    0xffffffff94c73e45
    0.00 :   ffffffff94c73e5b:       cmp    %rax,%r14
    0.00 :   ffffffff94c73e5e:       mov    $0xfffffffffffffff2,%rdx
    0.00 :   ffffffff94c73e65:       cmova  %rdx,%rax
    0.00 :   ffffffff94c73e69:       jmp    0xffffffff94c73e00
    0.00 :   ffffffff94c73e6b:       mov    $0xfffffffffffffff2,%rax
    0.00 :   ffffffff94c73e72:       jmp    0xffffffff94c73e00
    0.00 :   ffffffff94c73e74:       xor    %eax,%eax
    0.00 :   ffffffff94c73e76:       xor    %edx,%edx
    0.00 :   ffffffff94c73e78:       xor    %ecx,%ecx
    0.00 :   ffffffff94c73e7a:       xor    %esi,%esi
    0.00 :   ffffffff94c73e7c:       xor    %edi,%edi
    0.00 :   ffffffff94c73e7e:       xor    %r8d,%r8d
    0.00 :   ffffffff94c73e81:       ret
    0.00 :   ffffffff94c73e82:       int3
    0.00 :   ffffffff94c73e83:       int3
    0.00 :   ffffffff94c73e84:       int3
    0.00 :   ffffffff94c73e85:       int3
    0.00 :   ffffffff94c73e86:       mov    %rdx,%rax
    0.00 :   ffffffff94c73e89:       jmp    0xffffffff94c73e5b
    0.00 :   ffffffff94c73e8b:       int3
    0.00 :   ffffffff94c73e8c:       int3
    0.00 :   ffffffff94c73e8d:       int3
    0.00 :   ffffffff94c73e8e:       int3
    0.00 :   ffffffff94c73e8f:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffffc06a2d30 <load0>:
    0.00 :   ffffffffc06a2d30:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffffc06a2d35:       mov    0x180(%rsi),%rax
    0.00 :   ffffffffc06a2d3c:       add    $0x360,%rax
  100.00 :   ffffffffc06a2d42:       mov    (%rax),%eax
    0.00 :   ffffffffc06a2d44:       test   %eax,%eax
    0.00 :   ffffffffc06a2d46:       je     0xffffffffc06a2f0f
    0.00 :   ffffffffc06a2d4c:       push   %rbp
    0.00 :   ffffffffc06a2d4d:       mov    %rsp,%rbp
    0.00 :   ffffffffc06a2d50:       push   %r15
    0.00 :   ffffffffc06a2d52:       push   %r14
    0.00 :   ffffffffc06a2d54:       push   %r13
    0.00 :   ffffffffc06a2d56:       push   %r12
    0.00 :   ffffffffc06a2d58:       push   %rbx
    0.00 :   ffffffffc06a2d59:       mov    %rsi,%rbx
    0.00 :   ffffffffc06a2d5c:       sub    $0x18,%rsp
    0.00 :   ffffffffc06a2d60:       mov    0x180(%rsi),%rax
    0.00 :   ffffffffc06a2d67:       add    $0x2c0,%rax
    0.00 :   ffffffffc06a2d6d:       mov    (%rax),%eax
    0.00 :   ffffffffc06a2d6f:       mov    %eax,-0x30(%rbp)
    0.00 :   ffffffffc06a2d72:       mov    0x180(%rsi),%rax
    0.00 :   ffffffffc06a2d79:       add    $0x2e0,%rax
    0.00 :   ffffffffc06a2d7f:       mov    (%rax),%eax
    0.00 :   ffffffffc06a2d81:       mov    %eax,-0x2c(%rbp)
    0.00 :   ffffffffc06a2d84:       mov    0x4(%rsi),%eax
    0.00 :   ffffffffc06a2d87:       xor    %r15d,%r15d
    0.00 :   ffffffffc06a2d8a:       test   %eax,%eax
    0.00 :   ffffffffc06a2d8c:       jne    0xffffffffc06a2dc4
    0.00 :   ffffffffc06a2d8e:       jmp    0xffffffffc06a2e5a
    0.00 :   ffffffffc06a2d93:       test   %r10d,-0x30(%rbp)
    0.00 :   ffffffffc06a2d97:       jne    0xffffffffc06a2e83
    0.00 :   ffffffffc06a2d9d:       cmpl   $0x3,0x90(%r8)
    0.00 :   ffffffffc06a2da5:       je     0xffffffffc06a2e3a
    0.00 :   ffffffffc06a2dab:       mov    %r14,%rdi
    0.00 :   ffffffffc06a2dae:       add    $0x1,%r15d
    0.00 :   ffffffffc06a2db2:       call   0xffffffff954ac6e0
    0.00 :   ffffffffc06a2db7:       movzwl %r15w,%eax
    0.00 :   ffffffffc06a2dbb:       cmp    0x4(%rbx),%eax
    0.00 :   ffffffffc06a2dbe:       jae    0xffffffffc06a2e5a
    0.00 :   ffffffffc06a2dc4:       movzwl %r15w,%r12d
    0.00 :   ffffffffc06a2dc8:       imul   $0x168,%r12,%rax
    0.00 :   ffffffffc06a2dcf:       add    0x190(%rbx),%rax
    0.00 :   ffffffffc06a2dd6:       lea    0xa0(%rax),%r14
    0.00 :   ffffffffc06a2ddd:       mov    %rax,%r13
    0.00 :   ffffffffc06a2de0:       mov    %r14,%rdi
    0.00 :   ffffffffc06a2de3:       call   0xffffffff954ac5a0
    0.00 :   ffffffffc06a2de8:       mov    0x160(%r13),%r8
    0.00 :   ffffffffc06a2def:       test   %r8,%r8
    0.00 :   ffffffffc06a2df2:       je     0xffffffffc06a2dab
    0.00 :   ffffffffc06a2df4:       mov    -0x2c(%rbp),%r11d
    0.00 :   ffffffffc06a2df8:       mov    $0x1,%r10d
    0.00 :   ffffffffc06a2dfe:       mov    %r15d,%ecx
    0.00 :   ffffffffc06a2e01:       shl    %cl,%r10d
    0.00 :   ffffffffc06a2e04:       and    %r10d,%r11d
    0.00 :   ffffffffc06a2e07:       cmp    $0x1f,%r15w
    0.00 :   ffffffffc06a2e0c:       ja     0xffffffffc06a3788
    0.00 :   ffffffffc06a2e12:       test   %r11d,%r11d
    0.00 :   ffffffffc06a2e15:       je     0xffffffffc06a2d93
    0.00 :   ffffffffc06a2e1b:       mov    0x10c(%r13),%esi
    0.00 :   ffffffffc06a2e22:       mov    0x180(%rbx),%rax
    0.00 :   ffffffffc06a2e29:       mov    %esi,0x358(%rax)
    0.00 :   ffffffffc06a2e2f:       movl   $0x3,0x90(%r8)
    0.00 :   ffffffffc06a2e3a:       mov    0x10c(%r13),%edx
    0.00 :   ffffffffc06a2e41:       mov    0x0(%r13),%rax
    0.00 :   ffffffffc06a2e45:       shl    $0x8,%edx
    0.00 :   ffffffffc06a2e48:       mov    0x180(%rax),%rax
    0.00 :   ffffffffc06a2e4f:       mov    %edx,0x3a0(%rax)
    0.00 :   ffffffffc06a2e55:       jmp    0xffffffffc06a2dab
    0.00 :   ffffffffc06a2e5a:       add    $0x18,%rsp
    0.00 :   ffffffffc06a2e5e:       mov    $0x1,%eax
    0.00 :   ffffffffc06a2e63:       pop    %rbx
    0.00 :   ffffffffc06a2e64:       pop    %r12
    0.00 :   ffffffffc06a2e66:       pop    %r13
    0.00 :   ffffffffc06a2e68:       pop    %r14
    0.00 :   ffffffffc06a2e6a:       pop    %r15
    0.00 :   ffffffffc06a2e6c:       pop    %rbp
    0.00 :   ffffffffc06a2e6d:       xor    %edx,%edx
    0.00 :   ffffffffc06a2e6f:       xor    %ecx,%ecx
    0.00 :   ffffffffc06a2e71:       xor    %esi,%esi
    0.00 :   ffffffffc06a2e73:       xor    %edi,%edi
    0.00 :   ffffffffc06a2e75:       xor    %r8d,%r8d
    0.00 :   ffffffffc06a2e78:       xor    %r10d,%r10d
    0.00 :   ffffffffc06a2e7b:       xor    %r11d,%r11d
    0.00 :   ffffffffc06a2e7e:       ret
    0.00 :   ffffffffc06a2e7f:       int3
    0.00 :   ffffffffc06a2e80:       int3
    0.00 :   ffffffffc06a2e81:       int3
    0.00 :   ffffffffc06a2e82:       int3
    0.00 :   ffffffffc06a2e83:       mov    0x10c(%r13),%esi
    0.00 :   ffffffffc06a2e8a:       mov    0x180(%rbx),%rax
    0.00 :   ffffffffc06a2e91:       mov    %esi,0x338(%rax)
    0.00 :   ffffffffc06a2e97:       mov    (%r8),%esi
    0.00 :   ffffffffc06a2e9a:       mov    0x10(%r8),%rdx
    0.00 :   ffffffffc06a2e9e:       movl   $0x0,0x90(%r8)
    0.00 :   ffffffffc06a2ea9:       test   %esi,%esi
    0.00 :   ffffffffc06a2eab:       jle    0xffffffffc06a2f34
    0.00 :   ffffffffc06a2eb1:       mov    %esi,0x14(%rdx)
    0.00 :   ffffffffc06a2eb4:       lea    0x60(%r8),%rdi
    0.00 :   ffffffffc06a2eb8:       lea    0xd8(%rdx),%r10
    0.00 :   ffffffffc06a2ebf:       movl   $0x0,(%r8)
    0.00 :   ffffffffc06a2ec6:       mov    0xe0(%rdx),%rsi
    0.00 :   ffffffffc06a2ecd:       mov    %rdi,0xe0(%rdx)
    0.00 :   ffffffffc06a2ed4:       mov    %r10,0x60(%r8)
    0.00 :   ffffffffc06a2ed8:       mov    %rsi,0x68(%r8)
    0.00 :   ffffffffc06a2edc:       mov    %rdi,(%rsi)
    0.00 :   ffffffffc06a2edf:       lea    0x70(%rdx),%rdi
    0.00 :   ffffffffc06a2ee3:       lock btsq $0x0,0x78(%rdx)
    0.00 :   ffffffffc06a2eea:       jae    0xffffffffc06a2f25
    0.00 :   ffffffffc06a2eec:       mov    %r13,%rdi
    0.00 :   ffffffffc06a2eef:       mov    %r8,-0x38(%rbp)
    0.00 :   ffffffffc06a2ef3:       call   0xffffffffc06a20e0
    0.00 :   ffffffffc06a2ef8:       mov    -0x38(%rbp),%r8
    0.00 :   ffffffffc06a2efc:       cmpq   $0x0,0x160(%r13)
    0.00 :   ffffffffc06a2f04:       jne    0xffffffffc06a2d9d
    0.00 :   ffffffffc06a2f0a:       jmp    0xffffffffc06a2e3a
    0.00 :   ffffffffc06a2f0f:       xor    %edx,%edx
    0.00 :   ffffffffc06a2f11:       xor    %ecx,%ecx
    0.00 :   ffffffffc06a2f13:       xor    %esi,%esi
    0.00 :   ffffffffc06a2f15:       xor    %edi,%edi
    0.00 :   ffffffffc06a2f17:       xor    %r8d,%r8d
    0.00 :   ffffffffc06a2f1a:       xor    %r10d,%r10d
    0.00 :   ffffffffc06a2f1d:       xor    %r11d,%r11d
    0.00 :   ffffffffc06a2f20:       ret
    0.00 :   ffffffffc06a2f21:       int3
    0.00 :   ffffffffc06a2f22:       int3
    0.00 :   ffffffffc06a2f23:       int3
    0.00 :   ffffffffc06a2f24:       int3
    0.00 :   ffffffffc06a2f25:       mov    %r8,-0x38(%rbp)
    0.00 :   ffffffffc06a2f29:       call   0xffffffff944f3570
    0.00 :   ffffffffc06a2f2e:       mov    -0x38(%rbp),%r8
    0.00 :   ffffffffc06a2f32:       jmp    0xffffffffc06a2eec
    0.00 :   ffffffffc06a2f34:       ud2
    0.00 :   ffffffffc06a2f36:       cs nopw 0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9479f2f0 <load0>:
    0.00 :   ffffffff9479f2f0:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9479f2f5:       push   %rbp
    0.00 :   ffffffff9479f2f6:       mov    %rsp,%rbp
    0.00 :   ffffffff9479f2f9:       push   %r15
    0.00 :   ffffffff9479f2fb:       push   %r14
    0.00 :   ffffffff9479f2fd:       push   %r13
    0.00 :   ffffffff9479f2ff:       mov    %rdi,%r13
    0.00 :   ffffffff9479f302:       push   %r12
    0.00 :   ffffffff9479f304:       push   %rbx
    0.00 :   ffffffff9479f305:       sub    $0x38,%rsp
    0.00 :   ffffffff9479f309:       mov    %esi,-0x54(%rbp)
    0.00 :   ffffffff9479f30c:       mov    %rdx,%rsi
    0.00 :   ffffffff9479f30f:       movq   $0xffffffffffffffff,-0x38(%rbp)
    0.00 :   ffffffff9479f317:       test   %rdx,%rdx
    0.00 :   ffffffff9479f31a:       je     0xffffffff9479f330
    0.00 :   ffffffff9479f31c:       mov    %rdx,%rbx
    0.00 :   ffffffff9479f31f:       mov    %rdx,%rax
    0.00 :   ffffffff9479f322:       neg    %rbx
    0.00 :   ffffffff9479f325:       sub    $0x1,%rax
    0.00 :   ffffffff9479f329:       mov    %rbx,-0x38(%rbp)
    0.00 :   ffffffff9479f32d:       mov    %rax,%rsi
    0.00 :   ffffffff9479f330:       cmpl   $0x3,0x10(%r13)
    0.00 :   ffffffff9479f335:       movl   $0x0,-0x58(%rbp)
    0.00 :   ffffffff9479f33c:       jle    0xffffffff9479f372
    0.00 :   ffffffff9479f33e:       mov    0x1c(%r13),%eax
    0.00 :   ffffffff9479f342:       mov    %eax,-0x58(%rbp)
    0.00 :   ffffffff9479f345:       test   %eax,%eax
    0.00 :   ffffffff9479f347:       je     0xffffffff9479f372
    0.00 :   ffffffff9479f349:       mov    %eax,%edx
    0.00 :   ffffffff9479f34b:       shl    $0x2,%edx
    0.00 :   ffffffff9479f34e:       cmp    0x16d0f04(%rip),%edx        # 0xffffffff95e70258
    0.00 :   ffffffff9479f354:       je     0xffffffff9479f583
    0.00 :   ffffffff9479f35a:       mov    $0xffffffff,%eax
    0.00 :   ffffffff9479f35f:       bsr    %edx,%eax
    0.00 :   ffffffff9479f362:       lea    -0x2(%rax),%ebx
    0.00 :   ffffffff9479f365:       mov    $0x1,%eax
    0.00 :   ffffffff9479f36a:       test   %ebx,%ebx
    0.00 :   ffffffff9479f36c:       cmovg  %ebx,%eax
    0.00 :   ffffffff9479f36f:       mov    %eax,-0x58(%rbp)
    0.00 :   ffffffff9479f372:       movslq 0x78(%r13),%rax
    0.00 :   ffffffff9479f376:       movslq -0x54(%rbp),%rbx
    0.00 :   ffffffff9479f37a:       mov    %r13,-0x50(%rbp)
    0.00 :   ffffffff9479f37e:       mov    %rsi,%r15
    0.00 :   ffffffff9479f381:       movq   $0x0,-0x30(%rbp)
    0.00 :   ffffffff9479f389:       mov    0x40(%r13),%r12
    0.00 :   ffffffff9479f38d:       shl    $0xc,%rax
    0.00 :   ffffffff9479f391:       lea    0x400(%rbx,%rcx,1),%edx
    0.00 :   ffffffff9479f398:       movq   $0x0,-0x48(%rbp)
    0.00 :   ffffffff9479f3a0:       shr    $0x2,%rax
    0.00 :   ffffffff9479f3a4:       mov    %rbx,-0x40(%rbp)
    0.00 :   ffffffff9479f3a8:       cmp    %eax,%edx
    0.00 :   ffffffff9479f3aa:       cmovle %edx,%eax
    0.00 :   ffffffff9479f3ad:       movslq %ecx,%rdx
    0.00 :   ffffffff9479f3b0:       mov    %eax,-0x5c(%rbp)
    0.00 :   ffffffff9479f3b3:       movslq %eax,%rbx
    0.00 :   ffffffff9479f3b6:       mov    %rbx,%rsi
    0.00 :   ffffffff9479f3b9:       mov    %r12,%rdi
    0.00 :   ffffffff9479f3bc:       call   0xffffffff94baf450
    0.00 :   ffffffff9479f3c1:       lea    (%r15,%rax,1),%rcx
    0.00 :   ffffffff9479f3c5:       mov    -0x40(%rbp),%rax
    0.00 :   ffffffff9479f3c9:       and    -0x38(%rbp),%rcx
    0.00 :   ffffffff9479f3cd:       mov    %rcx,%r13
    0.00 :   ffffffff9479f3d0:       lea    (%rax,%rcx,1),%r14
    0.00 :   ffffffff9479f3d4:       cmp    %r14,%rbx
    0.00 :   ffffffff9479f3d7:       jae    0xffffffff9479f48e
    0.00 :   ffffffff9479f3dd:       mov    -0x50(%rbp),%r13
    0.00 :   ffffffff9479f3e1:       mov    %r14,%r15
    0.00 :   ffffffff9479f3e4:       mov    %r15d,%ebx
    0.00 :   ffffffff9479f3e7:       cmp    %r15d,-0x5c(%rbp)
    0.00 :   ffffffff9479f3eb:       jle    0xffffffff9479f591
    0.00 :   ffffffff9479f3f1:       cmpq   $0x0,-0x30(%rbp)
  100.00 :   ffffffff9479f3f6:       jne    0xffffffff9479f4f5
    0.00 :   ffffffff9479f3fc:       mov    -0x54(%rbp),%r14d
    0.00 :   ffffffff9479f400:       mov    0x40(%r13),%rdi
    0.00 :   ffffffff9479f404:       mov    %r15d,%esi
    0.00 :   ffffffff9479f407:       mov    %r14d,%edx
    0.00 :   ffffffff9479f40a:       call   0xffffffff94ba5820
    0.00 :   ffffffff9479f40f:       mov    0x48(%r13),%rax
    0.00 :   ffffffff9479f413:       movslq %ebx,%rdx
    0.00 :   ffffffff9479f416:       lock bts %rdx,(%rax)
    0.00 :   ffffffff9479f41b:       mov    0x48(%r13),%rdi
    0.00 :   ffffffff9479f41f:       lea    -0x1(%r14),%edx
    0.00 :   ffffffff9479f423:       lea    0x1(%rbx),%esi
    0.00 :   ffffffff9479f426:       call   0xffffffff94ba58c0
    0.00 :   ffffffff9479f42b:       lea    (%r14,%rbx,1),%edx
    0.00 :   ffffffff9479f42f:       mov    0x48(%r13),%rax
    0.00 :   ffffffff9479f433:       movslq %edx,%rdx
    0.00 :   ffffffff9479f436:       lock bts %rdx,(%rax)
    0.00 :   ffffffff9479f43b:       lea    0x0(,%r14,4),%eax
    0.00 :   ffffffff9479f443:       sub    %eax,0x10(%r13)
    0.00 :   ffffffff9479f447:       cmp    0x2c(%r13),%ebx
    0.00 :   ffffffff9479f44b:       je     0xffffffff9479f562
    0.00 :   ffffffff9479f451:       mov    -0x54(%rbp),%edx
    0.00 :   ffffffff9479f454:       mov    %ebx,%esi
    0.00 :   ffffffff9479f456:       mov    %r13,%rdi
    0.00 :   ffffffff9479f459:       call   0xffffffff9479d6f0
    0.00 :   ffffffff9479f45e:       mov    -0x58(%rbp),%esi
    0.00 :   ffffffff9479f461:       mov    %r13,%rdi
    0.00 :   ffffffff9479f464:       call   0xffffffff9479e600
    0.00 :   ffffffff9479f469:       lea    0x0(,%rbx,4),%eax
    0.00 :   ffffffff9479f470:       add    $0x38,%rsp
    0.00 :   ffffffff9479f474:       pop    %rbx
    0.00 :   ffffffff9479f475:       pop    %r12
    0.00 :   ffffffff9479f477:       pop    %r13
    0.00 :   ffffffff9479f479:       pop    %r14
    0.00 :   ffffffff9479f47b:       pop    %r15
    0.00 :   ffffffff9479f47d:       pop    %rbp
    0.00 :   ffffffff9479f47e:       xor    %edx,%edx
    0.00 :   ffffffff9479f480:       xor    %ecx,%ecx
    0.00 :   ffffffff9479f482:       xor    %esi,%esi
    0.00 :   ffffffff9479f484:       xor    %edi,%edi
    0.00 :   ffffffff9479f486:       xor    %r8d,%r8d
    0.00 :   ffffffff9479f489:       ret
    0.00 :   ffffffff9479f48a:       int3
    0.00 :   ffffffff9479f48b:       int3
    0.00 :   ffffffff9479f48c:       int3
    0.00 :   ffffffff9479f48d:       int3
    0.00 :   ffffffff9479f48e:       mov    %rcx,%rdx
    0.00 :   ffffffff9479f491:       mov    %r14,%rsi
    0.00 :   ffffffff9479f494:       mov    %r12,%rdi
    0.00 :   ffffffff9479f497:       call   0xffffffff94baf290
    0.00 :   ffffffff9479f49c:       cmp    %r14,%rax
    0.00 :   ffffffff9479f49f:       jae    0xffffffff9479f59b
    0.00 :   ffffffff9479f4a5:       mov    %rax,%rdx
    0.00 :   ffffffff9479f4a8:       sub    %r13,%rdx
    0.00 :   ffffffff9479f4ab:       cmp    -0x30(%rbp),%rdx
    0.00 :   ffffffff9479f4af:       ja     0xffffffff9479f4bc
    0.00 :   ffffffff9479f4b1:       je     0xffffffff9479f4c6
    0.00 :   ffffffff9479f4b3:       lea    0x1(%rax),%rdx
    0.00 :   ffffffff9479f4b7:       jmp    0xffffffff9479f3b6
    0.00 :   ffffffff9479f4bc:       mov    %rdx,-0x30(%rbp)
    0.00 :   ffffffff9479f4c0:       mov    %r13,-0x48(%rbp)
    0.00 :   ffffffff9479f4c4:       jmp    0xffffffff9479f4b3
    0.00 :   ffffffff9479f4c6:       mov    -0x48(%rbp),%rdi
    0.00 :   ffffffff9479f4ca:       test   %rdi,%rdi
    0.00 :   ffffffff9479f4cd:       je     0xffffffff9479f4b3
    0.00 :   ffffffff9479f4cf:       test   %r13,%r13
    0.00 :   ffffffff9479f4d2:       jne    0xffffffff9479f4de
    0.00 :   ffffffff9479f4d4:       movq   $0x0,-0x48(%rbp)
    0.00 :   ffffffff9479f4dc:       jmp    0xffffffff9479f4b3
    0.00 :   ffffffff9479f4de:       tzcnt  %r13,%rsi
    0.00 :   ffffffff9479f4e3:       tzcnt  %rdi,%rdx
    0.00 :   ffffffff9479f4e8:       cmp    %rdx,%rsi
    0.00 :   ffffffff9479f4eb:       cmovbe %rdi,%r13
    0.00 :   ffffffff9479f4ef:       mov    %r13,-0x48(%rbp)
    0.00 :   ffffffff9479f4f3:       jmp    0xffffffff9479f4b3
    0.00 :   ffffffff9479f4f5:       mov    -0x48(%rbp),%rax
    0.00 :   ffffffff9479f4f9:       mov    -0x30(%rbp),%r14d
    0.00 :   ffffffff9479f4fd:       mov    %eax,%r12d
    0.00 :   ffffffff9479f500:       and    $0x3ff,%r12d
    0.00 :   ffffffff9479f507:       add    %r12d,%r14d
    0.00 :   ffffffff9479f50a:       cmp    $0x400,%r14d
    0.00 :   ffffffff9479f511:       ja     0xffffffff9479f3fc
    0.00 :   ffffffff9479f517:       cltq
    0.00 :   ffffffff9479f519:       movslq %r12d,%rsi
    0.00 :   ffffffff9479f51c:       sar    $0xa,%rax
    0.00 :   ffffffff9479f520:       mov    %rax,%rdx
    0.00 :   ffffffff9479f523:       shl    $0xa,%rax
    0.00 :   ffffffff9479f527:       mov    %rax,%rdi
    0.00 :   ffffffff9479f52a:       shl    $0x5,%rdx
    0.00 :   ffffffff9479f52e:       add    0x50(%r13),%rdx
    0.00 :   ffffffff9479f532:       shr    $0x3,%rdi
    0.00 :   ffffffff9479f536:       add    0x40(%r13),%rdi
    0.00 :   ffffffff9479f53a:       mov    %rdx,-0x30(%rbp)
    0.00 :   ffffffff9479f53e:       call   0xffffffff94baf550
    0.00 :   ffffffff9479f543:       mov    -0x30(%rbp),%rdi
    0.00 :   ffffffff9479f547:       mov    %r14d,%edx
    0.00 :   ffffffff9479f54a:       cmp    %eax,%r12d
    0.00 :   ffffffff9479f54d:       lea    0x1(%rax),%esi
    0.00 :   ffffffff9479f550:       mov    $0x0,%eax
    0.00 :   ffffffff9479f555:       cmove  %eax,%esi
    0.00 :   ffffffff9479f558:       call   0xffffffff9479c800
    0.00 :   ffffffff9479f55d:       jmp    0xffffffff9479f3fc
    0.00 :   ffffffff9479f562:       movslq 0x78(%r13),%rsi
    0.00 :   ffffffff9479f566:       mov    0x40(%r13),%rdi
    0.00 :   ffffffff9479f56a:       shl    $0xc,%rsi
    0.00 :   ffffffff9479f56e:       shr    $0x2,%rsi
    0.00 :   ffffffff9479f572:       movslq %esi,%rsi
    0.00 :   ffffffff9479f575:       call   0xffffffff94baf450
    0.00 :   ffffffff9479f57a:       mov    %eax,0x2c(%r13)
    0.00 :   ffffffff9479f57e:       jmp    0xffffffff9479f451
    0.00 :   ffffffff9479f583:       mov    0x16d0cbf(%rip),%eax        # 0xffffffff95e70248
    0.00 :   ffffffff9479f589:       mov    %eax,-0x58(%rbp)
    0.00 :   ffffffff9479f58c:       jmp    0xffffffff9479f372
    0.00 :   ffffffff9479f591:       mov    $0xffffffff,%eax
    0.00 :   ffffffff9479f596:       jmp    0xffffffff9479f470
    0.00 :   ffffffff9479f59b:       mov    %r13,%r14
    0.00 :   ffffffff9479f59e:       mov    -0x50(%rbp),%r13
    0.00 :   ffffffff9479f5a2:       mov    %r14,%r15
    0.00 :   ffffffff9479f5a5:       jmp    0xffffffff9479f3e4
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000eabc0 <__vfork>:
         : 6     __libc_vfork():
         : 7     ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:28
    0.00 :   eabc0:  endbr64
         : 9     ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:32
    0.00 :   eabc4:  pop    %rdi
         : 11    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:37
    0.00 :   eabc5:  mov    $0x3a,%eax
         : 13    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:38
    0.00 :   eabca:  syscall
         : 15    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:41
  100.00 :   eabcc:  push   %rdi
         : 17    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:44
    0.00 :   eabcd:  cmp    $0xfffff001,%eax
         : 19    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:45
    0.00 :   eabd2:  jae    eabe8 <__vfork+0x28>
         : 21    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:49
    0.00 :   eabd4:  xor    %esi,%esi
         : 23    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:50
    0.00 :   eabd6:  rdsspq %rsi
         : 25    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:51
    0.00 :   eabdb:  test   %rsi,%rsi
         : 27    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:53
    0.00 :   eabde:  je     eabe7 <__vfork+0x27>
         : 29    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:55
    0.00 :   eabe0:  test   %eax,%eax
         : 31    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:57
    0.00 :   eabe2:  jne    eabe7 <__vfork+0x27>
         : 33    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:63
    0.00 :   eabe4:  pop    %rdi
         : 35    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:65
    0.00 :   eabe5:  jmp    *%rdi
         : 37    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:71
    0.00 :   eabe7:  ret
         : 39    ./posix/../sysdeps/unix/sysv/linux/x86_64/vfork.S:73
    0.00 :   eabe8:  mov    0x12e221(%rip),%rcx        # 218e10 <_DYNAMIC+0x250>
    0.00 :   eabef:  neg    %eax
    0.00 :   eabf1:  mov    %eax,%fs:(%rcx)
    0.00 :   eabf4:  or     $0xffffffffffffffff,%rax
    0.00 :   eabf8:  ret
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff9473a720 <load0>:
  100.00 :   ffffffff9473a720:       nopl   0x0(%rax,%rax,1)
    0.00 :   ffffffff9473a725:       push   %rbp
    0.00 :   ffffffff9473a726:       lea    0x360(%rdi),%rdx
    0.00 :   ffffffff9473a72d:       mov    %rsp,%rbp
    0.00 :   ffffffff9473a730:       push   %r13
    0.00 :   ffffffff9473a732:       push   %r12
    0.00 :   ffffffff9473a734:       push   %rbx
    0.00 :   ffffffff9473a735:       mov    0x278(%rdi),%rax
    0.00 :   ffffffff9473a73c:       lea    0x360(%rax),%rbx
    0.00 :   ffffffff9473a743:       test   %rax,%rax
    0.00 :   ffffffff9473a746:       mov    0x98(%rdi),%rax
    0.00 :   ffffffff9473a74d:       cmove  %rdx,%rbx
    0.00 :   ffffffff9473a751:       mov    0x5c(%rax),%eax
    0.00 :   ffffffff9473a754:       test   %eax,%eax
    0.00 :   ffffffff9473a756:       jne    0xffffffff9473a773
    0.00 :   ffffffff9473a758:       pop    %rbx
    0.00 :   ffffffff9473a759:       pop    %r12
    0.00 :   ffffffff9473a75b:       pop    %r13
    0.00 :   ffffffff9473a75d:       pop    %rbp
    0.00 :   ffffffff9473a75e:       xor    %eax,%eax
    0.00 :   ffffffff9473a760:       xor    %edx,%edx
    0.00 :   ffffffff9473a762:       xor    %ecx,%ecx
    0.00 :   ffffffff9473a764:       xor    %esi,%esi
    0.00 :   ffffffff9473a766:       xor    %edi,%edi
    0.00 :   ffffffff9473a768:       xor    %r8d,%r8d
    0.00 :   ffffffff9473a76b:       xor    %r9d,%r9d
    0.00 :   ffffffff9473a76e:       ret
    0.00 :   ffffffff9473a76f:       int3
    0.00 :   ffffffff9473a770:       int3
    0.00 :   ffffffff9473a771:       int3
    0.00 :   ffffffff9473a772:       int3
    0.00 :   ffffffff9473a773:       lea    0x10(%rbx),%r13
    0.00 :   ffffffff9473a777:       mov    %rdi,%r12
    0.00 :   ffffffff9473a77a:       mov    %r13,%rdi
    0.00 :   ffffffff9473a77d:       call   0xffffffff954abd70
    0.00 :   ffffffff9473a782:       mov    (%rbx),%rdx
    0.00 :   ffffffff9473a785:       mov    %rax,%rsi
    0.00 :   ffffffff9473a788:       cmp    %rbx,%rdx
    0.00 :   ffffffff9473a78b:       je     0xffffffff9473a811
    0.00 :   ffffffff9473a791:       xor    %edi,%edi
    0.00 :   ffffffff9473a793:       xor    %r8d,%r8d
    0.00 :   ffffffff9473a796:       cmpq   $0x0,0x18(%rdx)
    0.00 :   ffffffff9473a79b:       je     0xffffffff9473a7c8
    0.00 :   ffffffff9473a79d:       mov    0x378(%r12),%r9
    0.00 :   ffffffff9473a7a5:       mov    %edi,%ecx
    0.00 :   ffffffff9473a7a7:       add    $0x1,%r8d
    0.00 :   ffffffff9473a7ab:       shl    $0x4,%rcx
    0.00 :   ffffffff9473a7af:       movq   $0x0,(%r9,%rcx,1)
    0.00 :   ffffffff9473a7b7:       mov    0x378(%r12),%r9
    0.00 :   ffffffff9473a7bf:       movq   $0x0,0x8(%r9,%rcx,1)
    0.00 :   ffffffff9473a7c8:       mov    (%rdx),%rdx
    0.00 :   ffffffff9473a7cb:       add    $0x1,%edi
    0.00 :   ffffffff9473a7ce:       cmp    %rbx,%rdx
    0.00 :   ffffffff9473a7d1:       jne    0xffffffff9473a796
    0.00 :   ffffffff9473a7d3:       test   %r8d,%r8d
    0.00 :   ffffffff9473a7d6:       je     0xffffffff9473a811
    0.00 :   ffffffff9473a7d8:       addq   $0x1,0x380(%r12)
    0.00 :   ffffffff9473a7e1:       mov    %r13,%rdi
    0.00 :   ffffffff9473a7e4:       call   0xffffffff954abe10
    0.00 :   ffffffff9473a7e9:       mov    %r12,%rdi
    0.00 :   ffffffff9473a7ec:       mov    $0x1,%esi
    0.00 :   ffffffff9473a7f1:       call   0xffffffff9473a410
    0.00 :   ffffffff9473a7f6:       pop    %rbx
    0.00 :   ffffffff9473a7f7:       pop    %r12
    0.00 :   ffffffff9473a7f9:       pop    %r13
    0.00 :   ffffffff9473a7fb:       pop    %rbp
    0.00 :   ffffffff9473a7fc:       xor    %eax,%eax
    0.00 :   ffffffff9473a7fe:       xor    %edx,%edx
    0.00 :   ffffffff9473a800:       xor    %ecx,%ecx
    0.00 :   ffffffff9473a802:       xor    %esi,%esi
    0.00 :   ffffffff9473a804:       xor    %edi,%edi
    0.00 :   ffffffff9473a806:       xor    %r8d,%r8d
    0.00 :   ffffffff9473a809:       xor    %r9d,%r9d
    0.00 :   ffffffff9473a80c:       ret
    0.00 :   ffffffff9473a80d:       int3
    0.00 :   ffffffff9473a80e:       int3
    0.00 :   ffffffff9473a80f:       int3
    0.00 :   ffffffff9473a810:       int3
    0.00 :   ffffffff9473a811:       mov    %r13,%rdi
    0.00 :   ffffffff9473a814:       call   0xffffffff954abe10
    0.00 :   ffffffff9473a819:       pop    %rbx
    0.00 :   ffffffff9473a81a:       pop    %r12
    0.00 :   ffffffff9473a81c:       pop    %r13
    0.00 :   ffffffff9473a81e:       pop    %rbp
    0.00 :   ffffffff9473a81f:       xor    %eax,%eax
    0.00 :   ffffffff9473a821:       xor    %edx,%edx
    0.00 :   ffffffff9473a823:       xor    %ecx,%ecx
    0.00 :   ffffffff9473a825:       xor    %esi,%esi
    0.00 :   ffffffff9473a827:       xor    %edi,%edi
    0.00 :   ffffffff9473a829:       xor    %r8d,%r8d
    0.00 :   ffffffff9473a82c:       xor    %r9d,%r9d
    0.00 :   ffffffff9473a82f:       ret
    0.00 :   ffffffff9473a830:       int3
    0.00 :   ffffffff9473a831:       int3
    0.00 :   ffffffff9473a832:       int3
    0.00 :   ffffffff9473a833:       int3
 Percent |	Source code & Disassembly of kcore for cycles (1 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff944a8980 <load0>:
    0.00 :   ffffffff944a8980:       mov    %edi,%eax
    0.00 :   ffffffff944a8982:       and    $0xffffffef,%eax
    0.00 :   ffffffff944a8985:       cmp    $0x20,%eax
    0.00 :   ffffffff944a8988:       je     0xffffffff944a8995
    0.00 :   ffffffff944a898a:       lea    -0xd0(%rdi),%eax
    0.00 :   ffffffff944a8990:       and    $0xffffffef,%eax
    0.00 :   ffffffff944a8993:       jne    0xffffffff944a89b0
    0.00 :   ffffffff944a8995:       xor    %eax,%eax
    0.00 :   ffffffff944a8997:       xor    %edx,%edx
    0.00 :   ffffffff944a8999:       xor    %ecx,%ecx
    0.00 :   ffffffff944a899b:       xor    %esi,%esi
    0.00 :   ffffffff944a899d:       xor    %edi,%edi
    0.00 :   ffffffff944a899f:       xor    %r8d,%r8d
    0.00 :   ffffffff944a89a2:       xor    %r9d,%r9d
    0.00 :   ffffffff944a89a5:       xor    %r10d,%r10d
    0.00 :   ffffffff944a89a8:       xor    %r11d,%r11d
    0.00 :   ffffffff944a89ab:       ret
    0.00 :   ffffffff944a89ac:       int3
    0.00 :   ffffffff944a89ad:       int3
    0.00 :   ffffffff944a89ae:       int3
    0.00 :   ffffffff944a89af:       int3
    0.00 :   ffffffff944a89b0:       push   %rbp
    0.00 :   ffffffff944a89b1:       shr    $0x4,%edi
    0.00 :   ffffffff944a89b4:       mov    %esi,%esi
    0.00 :   ffffffff944a89b6:       xor    %edx,%edx
    0.00 :   ffffffff944a89b8:       add    $0x800,%edi
    0.00 :   ffffffff944a89be:       mov    %rsp,%rbp
    0.00 :   ffffffff944a89c1:       call   0xffffffff944b84f0
    0.00 :   ffffffff944a89c6:       nop
    0.00 :   ffffffff944a89c7:       pop    %rbp
  100.00 :   ffffffff944a89c8:       xor    %eax,%eax
    0.00 :   ffffffff944a89ca:       xor    %edx,%edx
    0.00 :   ffffffff944a89cc:       xor    %ecx,%ecx
    0.00 :   ffffffff944a89ce:       xor    %esi,%esi
    0.00 :   ffffffff944a89d0:       xor    %edi,%edi
    0.00 :   ffffffff944a89d2:       xor    %r8d,%r8d
    0.00 :   ffffffff944a89d5:       xor    %r9d,%r9d
    0.00 :   ffffffff944a89d8:       xor    %r10d,%r10d
    0.00 :   ffffffff944a89db:       xor    %r11d,%r11d
    0.00 :   ffffffff944a89de:       ret
    0.00 :   ffffffff944a89df:       int3
    0.00 :   ffffffff944a89e0:       int3
    0.00 :   ffffffff944a89e1:       int3
    0.00 :   ffffffff944a89e2:       int3
    0.00 :   ffffffff944a89e3:       data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   ffffffff944a89ee:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of kcore for cycles (16 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3                Disassembly of section load0:
         :
         : 5                ffffffff944b84f0 <load0>:
    0.00 :   ffffffff944b84f0:       mov    %esi,%eax
    0.00 :   ffffffff944b84f2:       mov    %edi,%ecx
    4.94 :   ffffffff944b84f4:       wrmsr
   67.64 :   ffffffff944b84f6:       xchg   %ax,%ax
    0.00 :   ffffffff944b84f8:       xor    %eax,%eax
    0.00 :   ffffffff944b84fa:       xor    %edx,%edx
    0.00 :   ffffffff944b84fc:       xor    %ecx,%ecx
   27.41 :   ffffffff944b84fe:       xor    %esi,%esi
    0.00 :   ffffffff944b8500:       xor    %edi,%edi
    0.00 :   ffffffff944b8502:       ret
    0.00 :   ffffffff944b8503:       int3
    0.00 :   ffffffff944b8504:       int3
    0.00 :   ffffffff944b8505:       int3
    0.00 :   ffffffff944b8506:       int3
    0.00 :   ffffffff944b8507:       push   %rbp
    0.00 :   ffffffff944b8508:       shl    $0x20,%rdx
    0.00 :   ffffffff944b850c:       mov    %rdx,%rsi
    0.00 :   ffffffff944b850f:       xor    %edx,%edx
    0.00 :   ffffffff944b8511:       or     %rax,%rsi
    0.00 :   ffffffff944b8514:       mov    %rsp,%rbp
    0.00 :   ffffffff944b8517:       call   0xffffffff94c7bd10
    0.00 :   ffffffff944b851c:       pop    %rbp
    0.00 :   ffffffff944b851d:       xor    %eax,%eax
    0.00 :   ffffffff944b851f:       xor    %edx,%edx
    0.00 :   ffffffff944b8521:       xor    %ecx,%ecx
    0.00 :   ffffffff944b8523:       xor    %esi,%esi
    0.00 :   ffffffff944b8525:       xor    %edi,%edi
    0.00 :   ffffffff944b8527:       ret
    0.00 :   ffffffff944b8528:       int3
    0.00 :   ffffffff944b8529:       int3
    0.00 :   ffffffff944b852a:       int3
    0.00 :   ffffffff944b852b:       int3
