 Percent |	Source code & Disassembly of MD.exe for cycles (13189 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000029b0 <computeAccelerations()>:
         : 6    computeAccelerations():
         : 524  int i, j, k;
         : 525  double f, rSqd;
         : 526  double rij[3]; // position of i relative to j
         : 527  double inv_rSqd, inv_rSqd_2, inv_rSqd_4, inv_rSqd_7;
         : 528  double rijkf;
         :
    0.00 :   29b0:   endbr64
         : 531  for (j = i + 1; j < N; j++) {
         : 532  // initialize r^2 to zero
         : 533  rSqd = 0;
         :
         : 535  for (k = 0; k < 3; k++) {
         : 536  //  component-by-componenent position of i relative to j
    0.00 :   29b4:   mov    0x79a8d(%rip),%r11d        # 7c448 <N>
    0.00 :   29bb:   lea    -0x1(%r11),%r10d
    0.00 :   29bf:   test   %r10d,%r10d
    0.00 :   29c2:   jle    2b00 <computeAccelerations()+0x150>
         :
    0.00 :   29c8:   push   %rbp
    0.00 :   29c9:   lea    0x21bd0(%rip),%rdx        # 245a0 <a>
         : 531  //  component-by-componenent position of i relative to j
    0.00 :   29d0:   xor    %r9d,%r9d
    0.00 :   29d3:   xor    %r8d,%r8d
    0.00 :   29d6:   vmovsd 0x22aa(%rip),%xmm4        # 4c88 <_IO_stdin_used+0xc88>
    0.00 :   29de:   vmovsd 0x22aa(%rip),%xmm3        # 4c90 <_IO_stdin_used+0xc90>
    0.00 :   29e6:   lea    0x5c573(%rip),%rdi        # 5ef60 <r>
    0.00 :   29ed:   vxorpd %xmm5,%xmm5,%xmm5
         :
    0.00 :   29f1:   mov    %rsp,%rbp
    0.00 :   29f4:   push   %rbx
    0.00 :   29f5:   lea    0x18(%rdx),%rbx
    0.00 :   29f9:   nopl   0x0(%rax)
         : 532  rij[k] = r[i][k] - r[j][k];
    0.00 :   2a00:   add    $0x1,%r8d
    0.00 :   2a04:   cmp    %r11d,%r8d
    0.00 :   2a07:   jge    2ae5 <computeAccelerations()+0x135>
    0.01 :   2a0d:   mov    %r10d,%eax
         : 538  //  sum of squares of the components
         : 539  rSqd += rij[k] * rij[k];
         : 540  }
         :
         : 542  //  From derivative of Lennard-Jones with sigma and epsilon set equal to 1 in natural units!
         : 543  inv_rSqd = 1.0 / rSqd;
    0.00 :   2a10:   vmovsd (%rdi),%xmm9
    0.00 :   2a14:   vmovsd 0x8(%rdi),%xmm8
    0.00 :   2a19:   mov    %rdi,%rcx
    0.00 :   2a1c:   sub    %r8d,%eax
    0.01 :   2a1f:   vmovsd 0x10(%rdi),%xmm7
    0.00 :   2a24:   add    %r9,%rax
    0.00 :   2a27:   lea    (%rax,%rax,2),%rax
    0.02 :   2a2b:   lea    (%rbx,%rax,8),%rsi
    0.00 :   2a2f:   mov    %rdx,%rax
    0.00 :   2a32:   nopw   0x0(%rax,%rax,1)
    0.17 :   2a38:   vsubsd 0x18(%rcx),%xmm9,%xmm2
    0.84 :   2a3d:   vsubsd 0x20(%rcx),%xmm8,%xmm1
         : 532  rij[k] = r[i][k] - r[j][k];
    2.62 :   2a42:   add    $0x18,%rax
    0.17 :   2a46:   add    $0x18,%rcx
         : 538  inv_rSqd = 1.0 / rSqd;
    0.32 :   2a4a:   vsubsd 0x10(%rcx),%xmm7,%xmm6
         : 540  inv_rSqd_2 = inv_rSqd * inv_rSqd;
         : 541  inv_rSqd_4 = inv_rSqd_2 * inv_rSqd_2;
    0.74 :   2a4f:   vmulsd %xmm2,%xmm2,%xmm0
    2.77 :   2a53:   vmulsd %xmm1,%xmm1,%xmm10
    0.23 :   2a57:   vaddsd %xmm5,%xmm0,%xmm0
    0.08 :   2a5b:   vaddsd %xmm0,%xmm10,%xmm10
    0.76 :   2a5f:   vmulsd %xmm6,%xmm6,%xmm0
    2.75 :   2a63:   vaddsd %xmm10,%xmm0,%xmm0
         : 544  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
         :
         : 546  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
         :
    0.74 :   2a68:   vdivsd %xmm0,%xmm4,%xmm0
         : 545  for (k = 0; k < 3; k++) {
    0.44 :   2a6c:   vmulsd %xmm0,%xmm0,%xmm10
         : 546  //  from F = ma, where m = 1 in natural units!
    1.42 :   2a70:   vmulsd %xmm10,%xmm10,%xmm11
         : 547  rijkf = rij[k] * f;
    3.67 :   2a75:   vmulsd %xmm10,%xmm0,%xmm0
    1.60 :   2a7a:   vmulsd %xmm11,%xmm0,%xmm0
         : 549  a[i][k] += rijkf;
         : 550  a[j][k] -= rijkf;
    5.35 :   2a7f:   vaddsd %xmm0,%xmm0,%xmm0
    8.72 :   2a83:   vsubsd %xmm11,%xmm0,%xmm0
   13.84 :   2a88:   vmulsd %xmm3,%xmm0,%xmm0
         : 553  }
         : 554  }
         : 555  }
         : 556  }
   15.59 :   2a8c:   vmulsd %xmm2,%xmm0,%xmm2
         :
   14.89 :   2a90:   vaddsd (%rdx),%xmm2,%xmm10
         : 553  }
    0.14 :   2a94:   vmulsd %xmm1,%xmm0,%xmm1
    0.02 :   2a98:   vmulsd %xmm6,%xmm0,%xmm0
         :
    4.18 :   2a9c:   vmovsd %xmm10,(%rdx)
         : 555  // returns sum of dv/dt*m/A (aka Pressure) from elastic collisions with walls
    0.13 :   2aa0:   vmovsd (%rax),%xmm10
    0.34 :   2aa4:   vsubsd %xmm2,%xmm10,%xmm10
    3.84 :   2aa8:   vmovsd %xmm10,(%rax)
         :
    0.21 :   2aac:   vaddsd 0x8(%rdx),%xmm1,%xmm2
    2.87 :   2ab1:   vmovsd %xmm2,0x8(%rdx)
         : 555  // returns sum of dv/dt*m/A (aka Pressure) from elastic collisions with walls
    0.15 :   2ab6:   vmovsd 0x8(%rax),%xmm2
    1.28 :   2abb:   vsubsd %xmm1,%xmm2,%xmm2
    1.90 :   2abf:   vmovsd %xmm2,0x8(%rax)
         :
    0.95 :   2ac4:   vaddsd 0x10(%rdx),%xmm0,%xmm1
    2.26 :   2ac9:   vmovsd %xmm1,0x10(%rdx)
         : 555  // returns sum of dv/dt*m/A (aka Pressure) from elastic collisions with walls
    0.17 :   2ace:   vmovsd 0x10(%rax),%xmm1
    0.71 :   2ad3:   vsubsd %xmm0,%xmm1,%xmm1
    2.93 :   2ad7:   vmovsd %xmm1,0x10(%rax)
         : 532  rij[k] = r[i][k] - r[j][k];
    0.00 :   2adc:   cmp    %rax,%rsi
    0.14 :   2adf:   jne    2a38 <computeAccelerations()+0x88>
         : 531  //  component-by-componenent position of i relative to j
    0.00 :   2ae5:   add    $0x1,%r9
    0.00 :   2ae9:   add    $0x18,%rdi
    0.00 :   2aed:   add    $0x18,%rdx
    0.00 :   2af1:   cmp    %r10d,%r8d
    0.00 :   2af4:   jne    2a00 <computeAccelerations()+0x50>
         : 559  double VelocityVerlet(double dt, int iter, FILE *fp) {
         : 560  int i, j;
         :
         : 562  double psum = 0.;
    0.00 :   2afa:   mov    -0x8(%rbp),%rbx
    0.00 :   2afe:   leave
    0.00 :   2aff:   ret
    0.00 :   2b00:   ret
