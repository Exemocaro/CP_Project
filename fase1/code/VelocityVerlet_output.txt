 Percent |	Source code & Disassembly of MD.exe for cycles (13342 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000027e0 <VelocityVerlet(double, int, _IO_FILE*)>:
         : 6    VelocityVerlet(double, int, _IO_FILE*):
         : 580  }
         : 581  }
         : 582  }
         :
         : 584  // returns sum of dv/dt*m/A (aka Pressure) from elastic collisions with walls
         : 585  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27e0:   endbr64
         : 586  int i;
         :
         : 588  double psum = 0.;
         :
         : 590  double dt2 = dt*dt;
         : 591  double dt5 = dt * 0.5;
    0.00 :   27e4:   movapd %xmm0,%xmm9
         : 580  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27e9:   push   %rbx
         : 585  double dt2 = dt*dt;
    0.00 :   27ea:   movapd %xmm0,%xmm15
         : 580  double VelocityVerlet(double dt, int iter, FILE *fp) {
    0.00 :   27ef:   movapd %xmm0,%xmm7
         : 586  double dt5 = dt * 0.5;
    0.00 :   27f3:   movsd  0x2435(%rip),%xmm2        # 4c30 <_IO_stdin_used+0xc30>
         : 597  //  Compute accelerations from forces at current position
         : 598  // this call was removed (commented) for predagogical reasons
         : 599  //computeAccelerations();
         : 600  //  Update positions and velocity with current velocity and acceleration
         : 601  //printf("  Updated Positions!\n");
         : 602  for (i=0; i<N; i++) {
    0.00 :   27fb:   mov    0x79c46(%rip),%r10d        # 7c448 <N>
         : 585  double dt2 = dt*dt;
    0.00 :   2802:   mulsd  %xmm0,%xmm15
         : 679  // Elastic walls
         : 680  if (r[i][0]<0.) {
         : 681  v[i][0] *=-1.; //- elastic walls
         : 682  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "left" walls
         : 683  }
         : 684  else if (r[i][0]>=L) {
    0.00 :   2807:   movsd  0x79c30(%rip),%xmm8        # 7c440 <L>
         : 586  double dt5 = dt * 0.5;
    0.00 :   2810:   mulsd  %xmm2,%xmm9
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2815:   lea    -0x1(%r10),%r11d
    0.00 :   2819:   movapd %xmm9,%xmm4
    0.00 :   281e:   unpcklpd %xmm4,%xmm4
    0.00 :   2822:   movaps %xmm4,-0x10(%rsp)
         : 597  for (i=0; i<N; i++) {
    0.00 :   2827:   test   %r10d,%r10d
    0.00 :   282a:   jle    2d3e <VelocityVerlet(double, int, _IO_FILE*)+0x55e>
    0.00 :   2830:   movapd %xmm0,%xmm3
    0.00 :   2834:   movapd %xmm15,%xmm0
    0.00 :   2839:   unpcklpd %xmm3,%xmm3
    0.00 :   283d:   unpcklpd %xmm0,%xmm0
    0.00 :   2841:   cmp    $0x1,%r10d
    0.00 :   2845:   je     2d67 <VelocityVerlet(double, int, _IO_FILE*)+0x587>
    0.00 :   284b:   mov    %r10d,%r9d
    0.00 :   284e:   lea    0x21d4b(%rip),%rsi        # 245a0 <a>
    0.00 :   2855:   lea    0x3f224(%rip),%rdi        # 41a80 <v>
    0.00 :   285c:   movapd 0x23cc(%rip),%xmm6        # 4c30 <_IO_stdin_used+0xc30>
    0.00 :   2864:   shr    %r9d
    0.00 :   2867:   lea    0x5c6f2(%rip),%r8        # 5ef60 <r>
    0.00 :   286e:   mov    %rsi,%rax
    0.00 :   2871:   mov    %rdi,%rcx
    0.00 :   2874:   sub    $0x1,%r9d
    0.00 :   2878:   lea    0x30(%rsi),%rbx
         : 616  a[i][0] = 0;
    0.00 :   287c:   pxor   %xmm10,%xmm10
    0.00 :   2881:   mov    %r8,%rdx
    0.00 :   2884:   lea    (%r9,%r9,2),%r9
    0.00 :   2888:   shl    $0x4,%r9
    0.00 :   288c:   add    %rbx,%r9
    0.00 :   288f:   nop
         : 603  ai05 =  0.5*a[i][0];
    0.01 :   2890:   movapd 0x10(%rax),%xmm4
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   2895:   movapd 0x10(%rcx),%xmm11
    0.00 :   289b:   movapd %xmm0,%xmm12
    0.01 :   28a0:   add    $0x30,%rax
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28a4:   movapd -0x10(%rax),%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28a9:   movapd 0x20(%rcx),%xmm13
    0.00 :   28af:   add    $0x30,%rdx
    0.00 :   28b3:   add    $0x30,%rcx
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28b7:   mulpd  %xmm6,%xmm4
    0.00 :   28bb:   movapd -0x30(%rax),%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28c0:   movapd -0x30(%rcx),%xmm14
    0.00 :   28c6:   mulpd  %xmm3,%xmm11
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   28cb:   mulpd  %xmm6,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28cf:   mulpd  %xmm3,%xmm13
         : 603  ai05 =  0.5*a[i][0];
    0.01 :   28d4:   mulpd  %xmm6,%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28d8:   mulpd  %xmm4,%xmm12
    0.01 :   28dd:   mulpd  %xmm3,%xmm14
         : 608  v[i][0] += ai05*dt;
    0.00 :   28e2:   mulpd  %xmm3,%xmm4
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28e6:   addpd  %xmm11,%xmm12
    0.00 :   28eb:   movapd %xmm0,%xmm11
    0.00 :   28f0:   addpd  -0x20(%rdx),%xmm12
    0.00 :   28f6:   mulpd  %xmm1,%xmm11
         : 608  v[i][0] += ai05*dt;
    0.01 :   28fb:   mulpd  %xmm3,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   28ff:   movaps %xmm12,-0x20(%rdx)
    0.00 :   2904:   addpd  %xmm13,%xmm11
    0.00 :   2909:   movapd %xmm0,%xmm13
    0.01 :   290e:   addpd  -0x10(%rdx),%xmm11
    0.00 :   2914:   mulpd  %xmm5,%xmm13
         : 608  v[i][0] += ai05*dt;
    0.00 :   2919:   mulpd  %xmm3,%xmm5
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   291d:   movaps %xmm11,-0x10(%rdx)
    0.00 :   2922:   addpd  %xmm14,%xmm13
    0.00 :   2927:   addpd  -0x30(%rdx),%xmm13
    0.00 :   292d:   movaps %xmm13,-0x30(%rdx)
         : 608  v[i][0] += ai05*dt;
    0.00 :   2932:   addpd  -0x30(%rcx),%xmm5
    0.00 :   2937:   addpd  -0x20(%rcx),%xmm4
    0.00 :   293c:   addpd  -0x10(%rcx),%xmm1
    0.00 :   2941:   movaps %xmm5,-0x30(%rcx)
    0.00 :   2945:   movaps %xmm4,-0x20(%rcx)
    0.00 :   2949:   movaps %xmm1,-0x10(%rcx)
         : 616  a[i][0] = 0;
    0.00 :   294d:   movaps %xmm10,-0x30(%rax)
    0.00 :   2952:   movaps %xmm10,-0x20(%rax)
    0.00 :   2957:   movaps %xmm10,-0x10(%rax)
         : 597  for (i=0; i<N; i++) {
    0.00 :   295c:   cmp    %r9,%rax
    0.00 :   295f:   jne    2890 <VelocityVerlet(double, int, _IO_FILE*)+0xb0>
    0.00 :   2965:   mov    %r10d,%eax
    0.00 :   2968:   and    $0xfffffffe,%eax
    0.00 :   296b:   test   $0x1,%r10b
    0.00 :   296f:   je     29fe <VelocityVerlet(double, int, _IO_FILE*)+0x21e>
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   2975:   cltq
    0.00 :   2977:   lea    (%rax,%rax,2),%rdx
    0.00 :   297b:   shl    $0x3,%rdx
    0.00 :   297f:   lea    (%rdx,%rsi,1),%rax
    0.00 :   2983:   lea    (%r8,%rdx,1),%rcx
    0.00 :   2987:   add    %rdi,%rdx
    0.00 :   298a:   movupd (%rax),%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   298e:   movupd (%rdx),%xmm4
         : 605  ai25 =  0.5*a[i][2];
    0.00 :   2992:   mulsd  0x10(%rax),%xmm2
         : 603  ai05 =  0.5*a[i][0];
    0.00 :   2997:   mulpd  %xmm6,%xmm1
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   299b:   mulpd  %xmm3,%xmm4
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   299f:   mulsd  %xmm2,%xmm15
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   29a4:   mulpd  %xmm1,%xmm0
         : 608  v[i][0] += ai05*dt;
    0.00 :   29a8:   mulpd  %xmm3,%xmm1
         : 614  v[i][2] += ai25*dt;
    0.00 :   29ac:   mulsd  %xmm7,%xmm2
         : 607  r[i][0] += v[i][0]*dt + ai05*dt2;
    0.00 :   29b0:   addpd  %xmm4,%xmm0
    0.00 :   29b4:   movupd (%rcx),%xmm4
    0.00 :   29b8:   addpd  %xmm4,%xmm0
    0.00 :   29bc:   movups %xmm0,(%rcx)
         : 608  v[i][0] += ai05*dt;
    0.00 :   29bf:   movupd (%rdx),%xmm4
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29c3:   movapd %xmm7,%xmm0
         : 608  v[i][0] += ai05*dt;
    0.00 :   29c7:   addpd  %xmm4,%xmm1
    0.00 :   29cb:   movups %xmm1,(%rdx)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29ce:   movsd  0x10(%rdx),%xmm1
         : 618  a[i][2] = 0;
    0.00 :   29d3:   movq   $0x0,0x10(%rax)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29db:   mulsd  %xmm1,%xmm0
         : 614  v[i][2] += ai25*dt;
    0.00 :   29df:   addsd  %xmm1,%xmm2
    0.00 :   29e3:   movsd  %xmm2,0x10(%rdx)
         : 613  r[i][2] += v[i][2]*dt + ai25*dt2;
    0.00 :   29e8:   addsd  %xmm15,%xmm0
    0.00 :   29ed:   addsd  0x10(%rcx),%xmm0
    0.00 :   29f2:   movsd  %xmm0,0x10(%rcx)
         : 616  a[i][0] = 0;
    0.00 :   29f7:   pxor   %xmm0,%xmm0
    0.00 :   29fb:   movups %xmm0,(%rax)
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   29fe:   pxor   %xmm4,%xmm4
    0.00 :   2a02:   test   %r11d,%r11d
    0.00 :   2a05:   jle    2b82 <VelocityVerlet(double, int, _IO_FILE*)+0x3a2>
    0.00 :   2a0b:   lea    0x21b8e(%rip),%rdx        # 245a0 <a>
         : 597  for (i=0; i<N; i++) {
    0.00 :   2a12:   xor    %r9d,%r9d
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2a15:   xor    %r8d,%r8d
    0.00 :   2a18:   movsd  0x2258(%rip),%xmm6        # 4c78 <_IO_stdin_used+0xc78>
    0.00 :   2a20:   movsd  0x2258(%rip),%xmm5        # 4c80 <_IO_stdin_used+0xc80>
    0.00 :   2a28:   lea    0x5c531(%rip),%rdi        # 5ef60 <r>
    0.00 :   2a2f:   pxor   %xmm4,%xmm4
    0.00 :   2a33:   lea    0x18(%rdx),%rbx
    0.00 :   2a37:   nopw   0x0(%rax,%rax,1)
         : 633  for (j = i+1; j < N; j++) {
    0.00 :   2a40:   add    $0x1,%r8d
    0.01 :   2a44:   cmp    %r8d,%r10d
    0.00 :   2a47:   jle    2b64 <VelocityVerlet(double, int, _IO_FILE*)+0x384>
    0.00 :   2a4d:   mov    %r11d,%eax
         : 639  rij[0] = r[i][0] - r[j][0];
    0.00 :   2a50:   movsd  (%rdi),%xmm13
         : 642  rij[1] = r[i][1] - r[j][1];
    0.00 :   2a55:   movsd  0x8(%rdi),%xmm12
         : 645  rij[2] = r[i][2] - r[j][2];
    0.00 :   2a5b:   mov    %rdi,%rcx
    0.01 :   2a5e:   sub    %r8d,%eax
    0.00 :   2a61:   movsd  0x10(%rdi),%xmm11
    0.01 :   2a67:   add    %r9,%rax
    0.00 :   2a6a:   lea    (%rax,%rax,2),%rax
    0.00 :   2a6e:   lea    (%rbx,%rax,8),%rsi
    0.00 :   2a72:   mov    %rdx,%rax
    0.00 :   2a75:   nopl   (%rax)
         : 639  rij[0] = r[i][0] - r[j][0];
    0.91 :   2a78:   movapd %xmm13,%xmm3
    0.23 :   2a7d:   subsd  0x18(%rcx),%xmm3
         : 633  for (j = i+1; j < N; j++) {
    2.12 :   2a82:   add    $0x18,%rax
    0.41 :   2a86:   add    $0x18,%rcx
         : 642  rij[1] = r[i][1] - r[j][1];
    0.94 :   2a8a:   movapd %xmm12,%xmm2
    0.31 :   2a8f:   subsd  0x8(%rcx),%xmm2
         : 640  rSqd += rij[0] * rij[0];
    2.04 :   2a94:   movapd %xmm3,%xmm1
    0.41 :   2a98:   mulsd  %xmm3,%xmm1
         : 643  rSqd += rij[1] * rij[1];
    0.91 :   2a9c:   movapd %xmm2,%xmm0
    0.29 :   2aa0:   mulsd  %xmm2,%xmm0
         : 640  rSqd += rij[0] * rij[0];
    2.08 :   2aa4:   addsd  %xmm4,%xmm1
         : 643  rSqd += rij[1] * rij[1];
    0.34 :   2aa8:   addsd  %xmm1,%xmm0
         : 645  rij[2] = r[i][2] - r[j][2];
    1.15 :   2aac:   movapd %xmm11,%xmm1
    0.31 :   2ab1:   subsd  0x10(%rcx),%xmm1
         : 646  rSqd += rij[2] * rij[2];
    2.20 :   2ab6:   movapd %xmm1,%xmm10
    0.40 :   2abb:   mulsd  %xmm1,%xmm10
    0.96 :   2ac0:   addsd  %xmm0,%xmm10
         : 653  inv_rSqd = 1.0 / rSqd;
    0.24 :   2ac5:   movapd %xmm6,%xmm0
    2.24 :   2ac9:   divsd  %xmm10,%xmm0
         : 654  inv_rSqd_2 = inv_rSqd * inv_rSqd;
    0.41 :   2ace:   movapd %xmm0,%xmm14
    0.95 :   2ad3:   mulsd  %xmm0,%xmm14
         : 656  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    0.52 :   2ad8:   mulsd  %xmm14,%xmm0
         : 655  inv_rSqd_4 = inv_rSqd_2 * inv_rSqd_2;
    2.18 :   2add:   movapd %xmm14,%xmm10
    0.68 :   2ae2:   mulsd  %xmm14,%xmm10
         : 656  inv_rSqd_7 = inv_rSqd * inv_rSqd_2 * inv_rSqd_4;
    1.38 :   2ae7:   mulsd  %xmm10,%xmm0
         : 658  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
    2.67 :   2aec:   addsd  %xmm0,%xmm0
    9.46 :   2af0:   subsd  %xmm10,%xmm0
         : 662  a[i][k] += rij[k] * f;
    0.21 :   2af5:   movsd  (%rdx),%xmm10
         : 658  f = 24 * (2 * inv_rSqd_7 - inv_rSqd_4);
   14.17 :   2afa:   mulsd  %xmm5,%xmm0
         : 662  a[i][k] += rij[k] * f;
   16.40 :   2afe:   mulsd  %xmm0,%xmm3
    0.78 :   2b02:   mulsd  %xmm0,%xmm2
    1.08 :   2b06:   mulsd  %xmm0,%xmm1
    9.52 :   2b0a:   addsd  %xmm3,%xmm10
    4.00 :   2b0f:   movsd  %xmm10,(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.03 :   2b14:   movsd  (%rax),%xmm10
    0.01 :   2b19:   subsd  %xmm3,%xmm10
    3.61 :   2b1e:   movsd  %xmm10,(%rax)
         : 662  a[i][k] += rij[k] * f;
    0.42 :   2b23:   movsd  0x8(%rdx),%xmm3
    0.05 :   2b28:   addsd  %xmm2,%xmm3
    2.17 :   2b2c:   movsd  %xmm3,0x8(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.91 :   2b31:   movsd  0x8(%rax),%xmm3
    0.39 :   2b36:   subsd  %xmm2,%xmm3
    2.88 :   2b3a:   movsd  %xmm3,0x8(%rax)
         : 662  a[i][k] += rij[k] * f;
    0.31 :   2b3f:   movsd  0x10(%rdx),%xmm0
    0.88 :   2b44:   addsd  %xmm1,%xmm0
    1.75 :   2b48:   movsd  %xmm0,0x10(%rdx)
         : 663  a[j][k] -= rij[k] * f;
    0.99 :   2b4d:   movsd  0x10(%rax),%xmm0
    0.19 :   2b52:   subsd  %xmm1,%xmm0
    1.91 :   2b56:   movsd  %xmm0,0x10(%rax)
         : 633  for (j = i+1; j < N; j++) {
    0.00 :   2b5b:   cmp    %rax,%rsi
    0.48 :   2b5e:   jne    2a78 <VelocityVerlet(double, int, _IO_FILE*)+0x298>
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2b64:   add    $0x1,%r9
    0.00 :   2b68:   add    $0x18,%rdi
    0.00 :   2b6c:   add    $0x18,%rdx
    0.00 :   2b70:   cmp    %r11d,%r8d
    0.00 :   2b73:   jl     2a40 <VelocityVerlet(double, int, _IO_FILE*)+0x260>
         : 669  for (i=0; i<N; i++) {
    0.00 :   2b79:   test   %r10d,%r10d
    0.00 :   2b7c:   jle    2d4b <VelocityVerlet(double, int, _IO_FILE*)+0x56b>
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2b82:   movq   0x2095(%rip),%xmm10        # 4c20 <_IO_stdin_used+0xc20>
    0.00 :   2b8b:   lea    0x3eeee(%rip),%rax        # 41a80 <v>
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2b92:   xor    %esi,%esi
    0.00 :   2b94:   movsd  0x448c(%rip),%xmm2        # 7028 <m>
    0.00 :   2b9c:   lea    0x219fd(%rip),%rcx        # 245a0 <a>
    0.00 :   2ba3:   lea    0x5c3b6(%rip),%rdx        # 5ef60 <r>
    0.00 :   2baa:   movapd %xmm4,%xmm0
         : 676  v[i][0] *=-1.; //- elastic walls
    0.00 :   2bae:   movapd %xmm10,%xmm13
         : 689  if (r[i][1]<0.) {
         : 690  v[i][1] *=-1.; //- elastic walls
         : 691  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "left" walls
         : 692  }
         : 693  else if (r[i][1]>=L) {
         : 694  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2bb3:   movapd %xmm10,%xmm15
         : 685  v[i][1] *=-1.; //- elastic walls
    0.00 :   2bb8:   movapd %xmm10,%xmm12
         : 694  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "right" walls
         : 695  }
         :
         : 697  if (r[i][2]<0.) {
         : 698  v[i][2] *=-1.; //- elastic walls
    0.00 :   2bbd:   movapd %xmm10,%xmm11
    0.00 :   2bc2:   jmp    2cc7 <VelocityVerlet(double, int, _IO_FILE*)+0x4e7>
    0.00 :   2bc7:   nopw   0x0(%rax,%rax,1)
         : 679  else if (r[i][0]>=L) {
    0.00 :   2bd0:   comisd %xmm8,%xmm6
    0.00 :   2bd5:   jb     2c12 <VelocityVerlet(double, int, _IO_FILE*)+0x432>
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2bd7:   movapd %xmm3,%xmm6
    0.00 :   2bdb:   xorpd  %xmm10,%xmm6
         : 683  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2be0:   movapd %xmm4,%xmm14
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 680  v[i][0]*=-1.;  //- elastic walls
    0.00 :   2be5:   movsd  %xmm6,(%rax)
         : 682  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2be9:   cmpnltsd %xmm3,%xmm14
    0.00 :   2bef:   andpd  %xmm14,%xmm6
    0.00 :   2bf4:   andnpd %xmm3,%xmm14
         : 91   VelocityVerlet(double, int, _IO_FILE*):
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2bf9:   movapd %xmm2,%xmm3
    0.00 :   2bfd:   addsd  %xmm2,%xmm3
         : 684  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c01:   orpd   %xmm14,%xmm6
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 681  psum += 2*m*my_fabs(v[i][0])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c06:   mulsd  %xmm6,%xmm3
    0.00 :   2c0a:   divsd  %xmm7,%xmm3
    0.00 :   2c0e:   addsd  %xmm3,%xmm0
         : 684  if (r[i][1]<0.) {
    0.01 :   2c12:   movsd  0x8(%rdx),%xmm3
    0.00 :   2c17:   comisd %xmm3,%xmm4
    0.00 :   2c1b:   ja     2d20 <VelocityVerlet(double, int, _IO_FILE*)+0x540>
         : 688  else if (r[i][1]>=L) {
    0.00 :   2c21:   comisd %xmm8,%xmm3
    0.00 :   2c26:   jb     2c5f <VelocityVerlet(double, int, _IO_FILE*)+0x47f>
         : 689  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2c28:   movapd %xmm5,%xmm6
    0.00 :   2c2c:   xorpd  %xmm15,%xmm6
         : 692  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c31:   movapd %xmm4,%xmm3
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 689  v[i][1]*=-1.;  //- elastic walls
    0.00 :   2c35:   movsd  %xmm6,0x8(%rax)
         : 691  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c3a:   cmpnltsd %xmm5,%xmm3
    0.00 :   2c3f:   andpd  %xmm3,%xmm6
    0.00 :   2c43:   andnpd %xmm5,%xmm3
    0.00 :   2c47:   orpd   %xmm3,%xmm6
         : 92   VelocityVerlet(double, int, _IO_FILE*):
         : 690  psum += 2*m*my_fabs(v[i][1])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c4b:   movapd %xmm2,%xmm3
    0.00 :   2c4f:   addsd  %xmm2,%xmm3
    0.00 :   2c53:   mulsd  %xmm6,%xmm3
    0.00 :   2c57:   divsd  %xmm7,%xmm3
    0.00 :   2c5b:   addsd  %xmm3,%xmm0
         : 693  if (r[i][2]<0.) {
    0.00 :   2c5f:   movsd  0x10(%rdx),%xmm3
    0.00 :   2c64:   comisd %xmm3,%xmm4
    0.00 :   2c68:   ja     2d30 <VelocityVerlet(double, int, _IO_FILE*)+0x550>
         : 697  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "left" walls
         : 698  }
         : 699  else if (r[i][2]>=L) {
    0.00 :   2c6e:   comisd %xmm8,%xmm3
    0.00 :   2c73:   jb     2caf <VelocityVerlet(double, int, _IO_FILE*)+0x4cf>
         : 698  v[i][2]*=-1.;  //- elastic walls
    0.00 :   2c75:   movapd %xmm1,%xmm3
    0.00 :   2c79:   xorpd  0x1f9f(%rip),%xmm3        # 4c20 <_IO_stdin_used+0xc20>
         : 701  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c81:   movapd %xmm4,%xmm5
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 698  v[i][2]*=-1.;  //- elastic walls
    0.00 :   2c85:   movsd  %xmm3,0x10(%rax)
         : 700  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c8a:   cmpnltsd %xmm1,%xmm5
    0.00 :   2c8f:   andpd  %xmm5,%xmm3
    0.00 :   2c93:   andnpd %xmm1,%xmm5
         : 91   VelocityVerlet(double, int, _IO_FILE*):
         : 699  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "right" walls
    0.00 :   2c97:   movapd %xmm2,%xmm1
    0.00 :   2c9b:   addsd  %xmm2,%xmm1
         : 702  my_fabs(double):
         : 87   return (x < 0) ? -x : x;
    0.00 :   2c9f:   orpd   %xmm5,%xmm3
         : 89   VelocityVerlet(double, int, _IO_FILE*):
         : 699  psum += 2*m*my_fabs(v[i][2])/dt;  // contribution to pressure from "right" walls
    0.00 :   2ca3:   mulsd  %xmm3,%xmm1
    0.00 :   2ca7:   divsd  %xmm7,%xmm1
    0.00 :   2cab:   addsd  %xmm1,%xmm0
         : 669  for (i=0; i<N; i++) {
    0.00 :   2caf:   add    $0x1,%esi
    0.00 :   2cb2:   add    $0x18,%rax
    0.00 :   2cb6:   add    $0x18,%rcx
    0.00 :   2cba:   add    $0x18,%rdx
    0.00 :   2cbe:   cmp    %esi,%r10d
    0.00 :   2cc1:   jle    2d4f <VelocityVerlet(double, int, _IO_FILE*)+0x56f>
         : 670  v[i][0] += a[i][0]*dt5;
    0.01 :   2cc7:   movupd (%rcx),%xmm1
    0.00 :   2ccb:   mulpd  -0x10(%rsp),%xmm1
    0.01 :   2cd1:   movupd (%rax),%xmm6
    0.01 :   2cd5:   addpd  %xmm6,%xmm1
    0.00 :   2cd9:   movapd %xmm1,%xmm5
    0.00 :   2cdd:   movups %xmm1,(%rax)
    0.00 :   2ce0:   movapd %xmm1,%xmm3
         : 672  v[i][2] += a[i][2]*dt5;
    0.00 :   2ce4:   movsd  0x10(%rcx),%xmm1
    0.00 :   2ce9:   unpckhpd %xmm5,%xmm5
    0.00 :   2ced:   mulsd  %xmm9,%xmm1
    0.00 :   2cf2:   addsd  0x10(%rax),%xmm1
    0.00 :   2cf7:   movsd  %xmm1,0x10(%rax)
         : 675  if (r[i][0]<0.) {
    0.01 :   2cfc:   movsd  (%rdx),%xmm6
    0.01 :   2d00:   comisd %xmm6,%xmm4
    0.00 :   2d04:   jbe    2bd0 <VelocityVerlet(double, int, _IO_FILE*)+0x3f0>
         : 676  v[i][0] *=-1.; //- elastic walls
    0.00 :   2d0a:   movapd %xmm3,%xmm6
    0.00 :   2d0e:   xorpd  %xmm13,%xmm6
    0.00 :   2d13:   jmp    2be0 <VelocityVerlet(double, int, _IO_FILE*)+0x400>
    0.00 :   2d18:   nopl   0x0(%rax,%rax,1)
         : 685  v[i][1] *=-1.; //- elastic walls
    0.00 :   2d20:   movapd %xmm5,%xmm6
    0.00 :   2d24:   xorpd  %xmm12,%xmm6
    0.00 :   2d29:   jmp    2c31 <VelocityVerlet(double, int, _IO_FILE*)+0x451>
    0.00 :   2d2e:   xchg   %ax,%ax
         : 694  v[i][2] *=-1.; //- elastic walls
    0.00 :   2d30:   movapd %xmm1,%xmm3
    0.00 :   2d34:   xorpd  %xmm11,%xmm3
    0.00 :   2d39:   jmp    2c81 <VelocityVerlet(double, int, _IO_FILE*)+0x4a1>
         : 632  for (i = 0; i < N-1; i++) {   // loop over all distinct pairs i,j
    0.00 :   2d3e:   pxor   %xmm4,%xmm4
    0.00 :   2d42:   test   %r11d,%r11d
    0.00 :   2d45:   jg     2a0b <VelocityVerlet(double, int, _IO_FILE*)+0x22b>
         : 583  double psum = 0.;
    0.00 :   2d4b:   movapd %xmm4,%xmm0
         : 713  }
         : 714  fprintf(fp,"\n");
         : 715  }*/
         : 716  //fprintf(fp,"\n \n");
         :
         : 718  return psum/(6*L*L);
    0.00 :   2d4f:   movsd  0x1f31(%rip),%xmm1        # 4c88 <_IO_stdin_used+0xc88>
         : 714  }
    0.00 :   2d57:   pop    %rbx
         : 713  return psum/(6*L*L);
    0.00 :   2d58:   mulsd  %xmm8,%xmm1
    0.00 :   2d5d:   mulsd  %xmm8,%xmm1
    0.00 :   2d62:   divsd  %xmm1,%xmm0
         : 714  }
    0.00 :   2d66:   ret
         : 597  for (i=0; i<N; i++) {
    0.00 :   2d67:   xor    %eax,%eax
    0.00 :   2d69:   movapd 0x1ebf(%rip),%xmm6        # 4c30 <_IO_stdin_used+0xc30>
    0.00 :   2d71:   lea    0x21828(%rip),%rsi        # 245a0 <a>
    0.00 :   2d78:   lea    0x3ed01(%rip),%rdi        # 41a80 <v>
    0.00 :   2d7f:   lea    0x5c1da(%rip),%r8        # 5ef60 <r>
    0.00 :   2d86:   jmp    2975 <VelocityVerlet(double, int, _IO_FILE*)+0x195>
